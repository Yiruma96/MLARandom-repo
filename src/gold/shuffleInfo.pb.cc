// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shuffleInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "shuffleInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ShuffleInfo {
class ReorderInfo_BinaryInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReorderInfo_BinaryInfo> {};
ReorderInfo_BinaryInfoDefaultTypeInternal _ReorderInfo_BinaryInfo_default_instance_;
class ReorderInfo_LayoutInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReorderInfo_LayoutInfo> {};
ReorderInfo_LayoutInfoDefaultTypeInternal _ReorderInfo_LayoutInfo_default_instance_;
class ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReorderInfo_FixupInfo_FixupTuple> {};
ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal _ReorderInfo_FixupInfo_FixupTuple_default_instance_;
class ReorderInfo_FixupInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReorderInfo_FixupInfo> {};
ReorderInfo_FixupInfoDefaultTypeInternal _ReorderInfo_FixupInfo_default_instance_;
class ReorderInfo_SourceInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReorderInfo_SourceInfo> {};
ReorderInfo_SourceInfoDefaultTypeInternal _ReorderInfo_SourceInfo_default_instance_;
class ReorderInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReorderInfo> {};
ReorderInfoDefaultTypeInternal _ReorderInfo_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_shuffleInfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_shuffleInfo_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_BinaryInfo, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_BinaryInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_BinaryInfo, rand_obj_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_BinaryInfo, obj_sz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_BinaryInfo, src_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_BinaryInfo, main_addr_offset_),
    0,
    1,
    2,
    3,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_LayoutInfo, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_LayoutInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_LayoutInfo, bb_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_LayoutInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_LayoutInfo, bb_fallthrough_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_LayoutInfo, section_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_LayoutInfo, num_fixups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_LayoutInfo, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_LayoutInfo, padding_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_LayoutInfo, assemble_type_),
    1,
    2,
    3,
    0,
    4,
    5,
    6,
    7,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, deref_sz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, base_bbl_sym_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, base_section_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, target_bbl_sym_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, target_section_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, section_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, is_rela_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, num_jt_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, jt_entry_sz_),
    3,
    4,
    7,
    5,
    0,
    6,
    1,
    2,
    8,
    9,
    10,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo, rodata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo, datarel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_FixupInfo, initarray_),
    0,
    1,
    2,
    3,
    4,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_SourceInfo, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_SourceInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo_SourceInfo, src_type_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo, bin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo, layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo, fixup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderInfo, source_),
    0,
    2,
    3,
    1,
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(ReorderInfo_BinaryInfo)},
  { 12, 24, sizeof(ReorderInfo_LayoutInfo)},
  { 32, 47, sizeof(ReorderInfo_FixupInfo_FixupTuple)},
  { 58, 67, sizeof(ReorderInfo_FixupInfo)},
  { 72, 77, sizeof(ReorderInfo_SourceInfo)},
  { 78, 86, sizeof(ReorderInfo)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ReorderInfo_BinaryInfo_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ReorderInfo_LayoutInfo_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ReorderInfo_FixupInfo_FixupTuple_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ReorderInfo_FixupInfo_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ReorderInfo_SourceInfo_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ReorderInfo_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_shuffleInfo_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "shuffleInfo.proto", schemas, file_default_instances, protobuf_Offsets_shuffleInfo_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void protobuf_ShutdownFile_shuffleInfo_2eproto() {
  _ReorderInfo_BinaryInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ReorderInfo_LayoutInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ReorderInfo_FixupInfo_FixupTuple_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ReorderInfo_FixupInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ReorderInfo_SourceInfo_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ReorderInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void protobuf_InitDefaults_shuffleInfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ReorderInfo_BinaryInfo_default_instance_.DefaultConstruct();
  _ReorderInfo_LayoutInfo_default_instance_.DefaultConstruct();
  _ReorderInfo_FixupInfo_FixupTuple_default_instance_.DefaultConstruct();
  _ReorderInfo_FixupInfo_default_instance_.DefaultConstruct();
  _ReorderInfo_SourceInfo_default_instance_.DefaultConstruct();
  _ReorderInfo_default_instance_.DefaultConstruct();
  _ReorderInfo_default_instance_.get_mutable()->bin_ = const_cast< ::ShuffleInfo::ReorderInfo_BinaryInfo*>(
      ::ShuffleInfo::ReorderInfo_BinaryInfo::internal_default_instance());
  _ReorderInfo_default_instance_.get_mutable()->source_ = const_cast< ::ShuffleInfo::ReorderInfo_SourceInfo*>(
      ::ShuffleInfo::ReorderInfo_SourceInfo::internal_default_instance());
}

void protobuf_InitDefaults_shuffleInfo_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_shuffleInfo_2eproto_impl);
}
void protobuf_AddDesc_shuffleInfo_2eproto_impl() {
  protobuf_InitDefaults_shuffleInfo_2eproto();
  static const char descriptor[] = {
      "\n\021shuffleInfo.proto\022\013ShuffleInfo\"\321\010\n\013Reo"
      "rderInfo\0220\n\003bin\030\001 \001(\0132#.ShuffleInfo.Reor"
      "derInfo.BinaryInfo\0223\n\006layout\030\002 \003(\0132#.Shu"
      "ffleInfo.ReorderInfo.LayoutInfo\0221\n\005fixup"
      "\030\003 \003(\0132\".ShuffleInfo.ReorderInfo.FixupIn"
      "fo\0223\n\006source\030\004 \001(\0132#.ShuffleInfo.Reorder"
      "Info.SourceInfo\032a\n\nBinaryInfo\022\027\n\017rand_ob"
      "j_offset\030\001 \001(\r\022\016\n\006obj_sz\030\002 \001(\r\022\020\n\010src_ty"
      "pe\030\003 \001(\r\022\030\n\020main_addr_offset\030\004 \001(\r\032\255\001\n\nL"
      "ayoutInfo\022\017\n\007bb_size\030\001 \001(\r\022\014\n\004type\030\002 \001(\r"
      "\022\026\n\016bb_fallthrough\030\003 \001(\010\022\024\n\014section_name"
      "\030\004 \001(\t\022\022\n\nnum_fixups\030\005 \001(\r\022\016\n\006offset\030\006 \001"
      "(\r\022\024\n\014padding_size\030\007 \001(\r\022\030\n\rassemble_typ"
      "e\030\010 \001(\r:\0010\032\277\004\n\tFixupInfo\022;\n\004text\030\001 \003(\0132-"
      ".ShuffleInfo.ReorderInfo.FixupInfo.Fixup"
      "Tuple\022=\n\006rodata\030\002 \003(\0132-.ShuffleInfo.Reor"
      "derInfo.FixupInfo.FixupTuple\022;\n\004data\030\003 \003"
      "(\0132-.ShuffleInfo.ReorderInfo.FixupInfo.F"
      "ixupTuple\022>\n\007datarel\030\004 \003(\0132-.ShuffleInfo"
      ".ReorderInfo.FixupInfo.FixupTuple\022@\n\tini"
      "tarray\030\005 \003(\0132-.ShuffleInfo.ReorderInfo.F"
      "ixupInfo.FixupTuple\032\366\001\n\nFixupTuple\022\016\n\006of"
      "fset\030\001 \001(\r\022\020\n\010deref_sz\030\002 \001(\r\022\014\n\004type\030\003 \001"
      "(\r\022\024\n\014base_bbl_sym\030\004 \001(\004\022\031\n\021base_section"
      "_name\030\005 \001(\t\022\026\n\016target_bbl_sym\030\006 \001(\004\022\033\n\023t"
      "arget_section_name\030\007 \001(\t\022\024\n\014section_name"
      "\030\010 \001(\t\022\017\n\007is_rela\030\t \001(\010\022\026\n\016num_jt_entrie"
      "s\030\n \001(\r\022\023\n\013jt_entry_sz\030\013 \001(\r\032\036\n\nSourceIn"
      "fo\022\020\n\010src_type\030\001 \003(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1140);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "shuffleInfo.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_shuffleInfo_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_shuffleInfo_2eproto_once_);
void protobuf_AddDesc_shuffleInfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_shuffleInfo_2eproto_once_,
                 &protobuf_AddDesc_shuffleInfo_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_shuffleInfo_2eproto {
  StaticDescriptorInitializer_shuffleInfo_2eproto() {
    protobuf_AddDesc_shuffleInfo_2eproto();
  }
} static_descriptor_initializer_shuffleInfo_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReorderInfo_BinaryInfo::kRandObjOffsetFieldNumber;
const int ReorderInfo_BinaryInfo::kObjSzFieldNumber;
const int ReorderInfo_BinaryInfo::kSrcTypeFieldNumber;
const int ReorderInfo_BinaryInfo::kMainAddrOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReorderInfo_BinaryInfo::ReorderInfo_BinaryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_shuffleInfo_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShuffleInfo.ReorderInfo.BinaryInfo)
}
ReorderInfo_BinaryInfo::ReorderInfo_BinaryInfo(const ReorderInfo_BinaryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rand_obj_offset_, &from.rand_obj_offset_,
    reinterpret_cast<char*>(&main_addr_offset_) -
    reinterpret_cast<char*>(&rand_obj_offset_) + sizeof(main_addr_offset_));
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.BinaryInfo)
}

void ReorderInfo_BinaryInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rand_obj_offset_, 0, reinterpret_cast<char*>(&main_addr_offset_) -
    reinterpret_cast<char*>(&rand_obj_offset_) + sizeof(main_addr_offset_));
}

ReorderInfo_BinaryInfo::~ReorderInfo_BinaryInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.BinaryInfo)
  SharedDtor();
}

void ReorderInfo_BinaryInfo::SharedDtor() {
}

void ReorderInfo_BinaryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReorderInfo_BinaryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const ReorderInfo_BinaryInfo& ReorderInfo_BinaryInfo::default_instance() {
  protobuf_InitDefaults_shuffleInfo_2eproto();
  return *internal_default_instance();
}

ReorderInfo_BinaryInfo* ReorderInfo_BinaryInfo::New(::google::protobuf::Arena* arena) const {
  ReorderInfo_BinaryInfo* n = new ReorderInfo_BinaryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReorderInfo_BinaryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&rand_obj_offset_, 0, reinterpret_cast<char*>(&main_addr_offset_) -
      reinterpret_cast<char*>(&rand_obj_offset_) + sizeof(main_addr_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReorderInfo_BinaryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rand_obj_offset = 1;
      case 1: {
        if (tag == 8u) {
          set_has_rand_obj_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_obj_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 obj_sz = 2;
      case 2: {
        if (tag == 16u) {
          set_has_obj_sz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_sz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 src_type = 3;
      case 3: {
        if (tag == 24u) {
          set_has_src_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 main_addr_offset = 4;
      case 4: {
        if (tag == 32u) {
          set_has_main_addr_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main_addr_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShuffleInfo.ReorderInfo.BinaryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShuffleInfo.ReorderInfo.BinaryInfo)
  return false;
#undef DO_
}

void ReorderInfo_BinaryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  // optional uint32 rand_obj_offset = 1;
  if (has_rand_obj_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rand_obj_offset(), output);
  }

  // optional uint32 obj_sz = 2;
  if (has_obj_sz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->obj_sz(), output);
  }

  // optional uint32 src_type = 3;
  if (has_src_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->src_type(), output);
  }

  // optional uint32 main_addr_offset = 4;
  if (has_main_addr_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->main_addr_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShuffleInfo.ReorderInfo.BinaryInfo)
}

::google::protobuf::uint8* ReorderInfo_BinaryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  // optional uint32 rand_obj_offset = 1;
  if (has_rand_obj_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rand_obj_offset(), target);
  }

  // optional uint32 obj_sz = 2;
  if (has_obj_sz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->obj_sz(), target);
  }

  // optional uint32 src_type = 3;
  if (has_src_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->src_type(), target);
  }

  // optional uint32 main_addr_offset = 4;
  if (has_main_addr_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->main_addr_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.BinaryInfo)
  return target;
}

size_t ReorderInfo_BinaryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 rand_obj_offset = 1;
    if (has_rand_obj_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_obj_offset());
    }

    // optional uint32 obj_sz = 2;
    if (has_obj_sz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obj_sz());
    }

    // optional uint32 src_type = 3;
    if (has_src_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_type());
    }

    // optional uint32 main_addr_offset = 4;
    if (has_main_addr_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main_addr_offset());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReorderInfo_BinaryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReorderInfo_BinaryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReorderInfo_BinaryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShuffleInfo.ReorderInfo.BinaryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShuffleInfo.ReorderInfo.BinaryInfo)
    MergeFrom(*source);
  }
}

void ReorderInfo_BinaryInfo::MergeFrom(const ReorderInfo_BinaryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_rand_obj_offset()) {
      set_rand_obj_offset(from.rand_obj_offset());
    }
    if (from.has_obj_sz()) {
      set_obj_sz(from.obj_sz());
    }
    if (from.has_src_type()) {
      set_src_type(from.src_type());
    }
    if (from.has_main_addr_offset()) {
      set_main_addr_offset(from.main_addr_offset());
    }
  }
}

void ReorderInfo_BinaryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReorderInfo_BinaryInfo::CopyFrom(const ReorderInfo_BinaryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_BinaryInfo::IsInitialized() const {
  return true;
}

void ReorderInfo_BinaryInfo::Swap(ReorderInfo_BinaryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReorderInfo_BinaryInfo::InternalSwap(ReorderInfo_BinaryInfo* other) {
  std::swap(rand_obj_offset_, other->rand_obj_offset_);
  std::swap(obj_sz_, other->obj_sz_);
  std::swap(src_type_, other->src_type_);
  std::swap(main_addr_offset_, other->main_addr_offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReorderInfo_BinaryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReorderInfo_BinaryInfo

// optional uint32 rand_obj_offset = 1;
bool ReorderInfo_BinaryInfo::has_rand_obj_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReorderInfo_BinaryInfo::set_has_rand_obj_offset() {
  _has_bits_[0] |= 0x00000001u;
}
void ReorderInfo_BinaryInfo::clear_has_rand_obj_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReorderInfo_BinaryInfo::clear_rand_obj_offset() {
  rand_obj_offset_ = 0u;
  clear_has_rand_obj_offset();
}
::google::protobuf::uint32 ReorderInfo_BinaryInfo::rand_obj_offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.rand_obj_offset)
  return rand_obj_offset_;
}
void ReorderInfo_BinaryInfo::set_rand_obj_offset(::google::protobuf::uint32 value) {
  set_has_rand_obj_offset();
  rand_obj_offset_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.rand_obj_offset)
}

// optional uint32 obj_sz = 2;
bool ReorderInfo_BinaryInfo::has_obj_sz() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReorderInfo_BinaryInfo::set_has_obj_sz() {
  _has_bits_[0] |= 0x00000002u;
}
void ReorderInfo_BinaryInfo::clear_has_obj_sz() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReorderInfo_BinaryInfo::clear_obj_sz() {
  obj_sz_ = 0u;
  clear_has_obj_sz();
}
::google::protobuf::uint32 ReorderInfo_BinaryInfo::obj_sz() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.obj_sz)
  return obj_sz_;
}
void ReorderInfo_BinaryInfo::set_obj_sz(::google::protobuf::uint32 value) {
  set_has_obj_sz();
  obj_sz_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.obj_sz)
}

// optional uint32 src_type = 3;
bool ReorderInfo_BinaryInfo::has_src_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReorderInfo_BinaryInfo::set_has_src_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ReorderInfo_BinaryInfo::clear_has_src_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReorderInfo_BinaryInfo::clear_src_type() {
  src_type_ = 0u;
  clear_has_src_type();
}
::google::protobuf::uint32 ReorderInfo_BinaryInfo::src_type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.src_type)
  return src_type_;
}
void ReorderInfo_BinaryInfo::set_src_type(::google::protobuf::uint32 value) {
  set_has_src_type();
  src_type_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.src_type)
}

// optional uint32 main_addr_offset = 4;
bool ReorderInfo_BinaryInfo::has_main_addr_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReorderInfo_BinaryInfo::set_has_main_addr_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void ReorderInfo_BinaryInfo::clear_has_main_addr_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReorderInfo_BinaryInfo::clear_main_addr_offset() {
  main_addr_offset_ = 0u;
  clear_has_main_addr_offset();
}
::google::protobuf::uint32 ReorderInfo_BinaryInfo::main_addr_offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.main_addr_offset)
  return main_addr_offset_;
}
void ReorderInfo_BinaryInfo::set_main_addr_offset(::google::protobuf::uint32 value) {
  set_has_main_addr_offset();
  main_addr_offset_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.main_addr_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReorderInfo_LayoutInfo::kBbSizeFieldNumber;
const int ReorderInfo_LayoutInfo::kTypeFieldNumber;
const int ReorderInfo_LayoutInfo::kBbFallthroughFieldNumber;
const int ReorderInfo_LayoutInfo::kSectionNameFieldNumber;
const int ReorderInfo_LayoutInfo::kNumFixupsFieldNumber;
const int ReorderInfo_LayoutInfo::kOffsetFieldNumber;
const int ReorderInfo_LayoutInfo::kPaddingSizeFieldNumber;
const int ReorderInfo_LayoutInfo::kAssembleTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReorderInfo_LayoutInfo::ReorderInfo_LayoutInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_shuffleInfo_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShuffleInfo.ReorderInfo.LayoutInfo)
}
ReorderInfo_LayoutInfo::ReorderInfo_LayoutInfo(const ReorderInfo_LayoutInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  section_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_section_name()) {
    section_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_name_);
  }
  ::memcpy(&bb_size_, &from.bb_size_,
    reinterpret_cast<char*>(&assemble_type_) -
    reinterpret_cast<char*>(&bb_size_) + sizeof(assemble_type_));
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.LayoutInfo)
}

void ReorderInfo_LayoutInfo::SharedCtor() {
  _cached_size_ = 0;
  section_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bb_size_, 0, reinterpret_cast<char*>(&assemble_type_) -
    reinterpret_cast<char*>(&bb_size_) + sizeof(assemble_type_));
}

ReorderInfo_LayoutInfo::~ReorderInfo_LayoutInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.LayoutInfo)
  SharedDtor();
}

void ReorderInfo_LayoutInfo::SharedDtor() {
  section_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReorderInfo_LayoutInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReorderInfo_LayoutInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const ReorderInfo_LayoutInfo& ReorderInfo_LayoutInfo::default_instance() {
  protobuf_InitDefaults_shuffleInfo_2eproto();
  return *internal_default_instance();
}

ReorderInfo_LayoutInfo* ReorderInfo_LayoutInfo::New(::google::protobuf::Arena* arena) const {
  ReorderInfo_LayoutInfo* n = new ReorderInfo_LayoutInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReorderInfo_LayoutInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  if (has_section_name()) {
    GOOGLE_DCHECK(!section_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*section_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&bb_size_, 0, reinterpret_cast<char*>(&assemble_type_) -
      reinterpret_cast<char*>(&bb_size_) + sizeof(assemble_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReorderInfo_LayoutInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bb_size = 1;
      case 1: {
        if (tag == 8u) {
          set_has_bb_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bb_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bb_fallthrough = 3;
      case 3: {
        if (tag == 24u) {
          set_has_bb_fallthrough();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bb_fallthrough_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string section_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_section_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->section_name().data(), this->section_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShuffleInfo.ReorderInfo.LayoutInfo.section_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_fixups = 5;
      case 5: {
        if (tag == 40u) {
          set_has_num_fixups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_fixups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 offset = 6;
      case 6: {
        if (tag == 48u) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 padding_size = 7;
      case 7: {
        if (tag == 56u) {
          set_has_padding_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &padding_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assemble_type = 8 [default = 0];
      case 8: {
        if (tag == 64u) {
          set_has_assemble_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assemble_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShuffleInfo.ReorderInfo.LayoutInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShuffleInfo.ReorderInfo.LayoutInfo)
  return false;
#undef DO_
}

void ReorderInfo_LayoutInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  // optional uint32 bb_size = 1;
  if (has_bb_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bb_size(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional bool bb_fallthrough = 3;
  if (has_bb_fallthrough()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bb_fallthrough(), output);
  }

  // optional string section_name = 4;
  if (has_section_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->section_name().data(), this->section_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.ReorderInfo.LayoutInfo.section_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->section_name(), output);
  }

  // optional uint32 num_fixups = 5;
  if (has_num_fixups()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_fixups(), output);
  }

  // optional uint32 offset = 6;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->offset(), output);
  }

  // optional uint32 padding_size = 7;
  if (has_padding_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->padding_size(), output);
  }

  // optional uint32 assemble_type = 8 [default = 0];
  if (has_assemble_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->assemble_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShuffleInfo.ReorderInfo.LayoutInfo)
}

::google::protobuf::uint8* ReorderInfo_LayoutInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  // optional uint32 bb_size = 1;
  if (has_bb_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bb_size(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional bool bb_fallthrough = 3;
  if (has_bb_fallthrough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bb_fallthrough(), target);
  }

  // optional string section_name = 4;
  if (has_section_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->section_name().data(), this->section_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.ReorderInfo.LayoutInfo.section_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->section_name(), target);
  }

  // optional uint32 num_fixups = 5;
  if (has_num_fixups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_fixups(), target);
  }

  // optional uint32 offset = 6;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->offset(), target);
  }

  // optional uint32 padding_size = 7;
  if (has_padding_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->padding_size(), target);
  }

  // optional uint32 assemble_type = 8 [default = 0];
  if (has_assemble_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->assemble_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.LayoutInfo)
  return target;
}

size_t ReorderInfo_LayoutInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string section_name = 4;
    if (has_section_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->section_name());
    }

    // optional uint32 bb_size = 1;
    if (has_bb_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bb_size());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional bool bb_fallthrough = 3;
    if (has_bb_fallthrough()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_fixups = 5;
    if (has_num_fixups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_fixups());
    }

    // optional uint32 offset = 6;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 padding_size = 7;
    if (has_padding_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->padding_size());
    }

    // optional uint32 assemble_type = 8 [default = 0];
    if (has_assemble_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assemble_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReorderInfo_LayoutInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReorderInfo_LayoutInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReorderInfo_LayoutInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShuffleInfo.ReorderInfo.LayoutInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShuffleInfo.ReorderInfo.LayoutInfo)
    MergeFrom(*source);
  }
}

void ReorderInfo_LayoutInfo::MergeFrom(const ReorderInfo_LayoutInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_section_name()) {
      set_has_section_name();
      section_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_name_);
    }
    if (from.has_bb_size()) {
      set_bb_size(from.bb_size());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bb_fallthrough()) {
      set_bb_fallthrough(from.bb_fallthrough());
    }
    if (from.has_num_fixups()) {
      set_num_fixups(from.num_fixups());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_padding_size()) {
      set_padding_size(from.padding_size());
    }
    if (from.has_assemble_type()) {
      set_assemble_type(from.assemble_type());
    }
  }
}

void ReorderInfo_LayoutInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReorderInfo_LayoutInfo::CopyFrom(const ReorderInfo_LayoutInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_LayoutInfo::IsInitialized() const {
  return true;
}

void ReorderInfo_LayoutInfo::Swap(ReorderInfo_LayoutInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReorderInfo_LayoutInfo::InternalSwap(ReorderInfo_LayoutInfo* other) {
  section_name_.Swap(&other->section_name_);
  std::swap(bb_size_, other->bb_size_);
  std::swap(type_, other->type_);
  std::swap(bb_fallthrough_, other->bb_fallthrough_);
  std::swap(num_fixups_, other->num_fixups_);
  std::swap(offset_, other->offset_);
  std::swap(padding_size_, other->padding_size_);
  std::swap(assemble_type_, other->assemble_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReorderInfo_LayoutInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReorderInfo_LayoutInfo

// optional uint32 bb_size = 1;
bool ReorderInfo_LayoutInfo::has_bb_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReorderInfo_LayoutInfo::set_has_bb_size() {
  _has_bits_[0] |= 0x00000002u;
}
void ReorderInfo_LayoutInfo::clear_has_bb_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReorderInfo_LayoutInfo::clear_bb_size() {
  bb_size_ = 0u;
  clear_has_bb_size();
}
::google::protobuf::uint32 ReorderInfo_LayoutInfo::bb_size() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.bb_size)
  return bb_size_;
}
void ReorderInfo_LayoutInfo::set_bb_size(::google::protobuf::uint32 value) {
  set_has_bb_size();
  bb_size_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.bb_size)
}

// optional uint32 type = 2;
bool ReorderInfo_LayoutInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReorderInfo_LayoutInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ReorderInfo_LayoutInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReorderInfo_LayoutInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 ReorderInfo_LayoutInfo::type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.type)
  return type_;
}
void ReorderInfo_LayoutInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.type)
}

// optional bool bb_fallthrough = 3;
bool ReorderInfo_LayoutInfo::has_bb_fallthrough() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReorderInfo_LayoutInfo::set_has_bb_fallthrough() {
  _has_bits_[0] |= 0x00000008u;
}
void ReorderInfo_LayoutInfo::clear_has_bb_fallthrough() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReorderInfo_LayoutInfo::clear_bb_fallthrough() {
  bb_fallthrough_ = false;
  clear_has_bb_fallthrough();
}
bool ReorderInfo_LayoutInfo::bb_fallthrough() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.bb_fallthrough)
  return bb_fallthrough_;
}
void ReorderInfo_LayoutInfo::set_bb_fallthrough(bool value) {
  set_has_bb_fallthrough();
  bb_fallthrough_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.bb_fallthrough)
}

// optional string section_name = 4;
bool ReorderInfo_LayoutInfo::has_section_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReorderInfo_LayoutInfo::set_has_section_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ReorderInfo_LayoutInfo::clear_has_section_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReorderInfo_LayoutInfo::clear_section_name() {
  section_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_section_name();
}
const ::std::string& ReorderInfo_LayoutInfo::section_name() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
  return section_name_.GetNoArena();
}
void ReorderInfo_LayoutInfo::set_section_name(const ::std::string& value) {
  set_has_section_name();
  section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}
#if LANG_CXX11
void ReorderInfo_LayoutInfo::set_section_name(::std::string&& value) {
  set_has_section_name();
  section_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}
#endif
void ReorderInfo_LayoutInfo::set_section_name(const char* value) {
  set_has_section_name();
  section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}
void ReorderInfo_LayoutInfo::set_section_name(const char* value, size_t size) {
  set_has_section_name();
  section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}
::std::string* ReorderInfo_LayoutInfo::mutable_section_name() {
  set_has_section_name();
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
  return section_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReorderInfo_LayoutInfo::release_section_name() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
  clear_has_section_name();
  return section_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReorderInfo_LayoutInfo::set_allocated_section_name(::std::string* section_name) {
  if (section_name != NULL) {
    set_has_section_name();
  } else {
    clear_has_section_name();
  }
  section_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), section_name);
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}

// optional uint32 num_fixups = 5;
bool ReorderInfo_LayoutInfo::has_num_fixups() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReorderInfo_LayoutInfo::set_has_num_fixups() {
  _has_bits_[0] |= 0x00000010u;
}
void ReorderInfo_LayoutInfo::clear_has_num_fixups() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReorderInfo_LayoutInfo::clear_num_fixups() {
  num_fixups_ = 0u;
  clear_has_num_fixups();
}
::google::protobuf::uint32 ReorderInfo_LayoutInfo::num_fixups() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.num_fixups)
  return num_fixups_;
}
void ReorderInfo_LayoutInfo::set_num_fixups(::google::protobuf::uint32 value) {
  set_has_num_fixups();
  num_fixups_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.num_fixups)
}

// optional uint32 offset = 6;
bool ReorderInfo_LayoutInfo::has_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ReorderInfo_LayoutInfo::set_has_offset() {
  _has_bits_[0] |= 0x00000020u;
}
void ReorderInfo_LayoutInfo::clear_has_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
void ReorderInfo_LayoutInfo::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
::google::protobuf::uint32 ReorderInfo_LayoutInfo::offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.offset)
  return offset_;
}
void ReorderInfo_LayoutInfo::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.offset)
}

// optional uint32 padding_size = 7;
bool ReorderInfo_LayoutInfo::has_padding_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ReorderInfo_LayoutInfo::set_has_padding_size() {
  _has_bits_[0] |= 0x00000040u;
}
void ReorderInfo_LayoutInfo::clear_has_padding_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void ReorderInfo_LayoutInfo::clear_padding_size() {
  padding_size_ = 0u;
  clear_has_padding_size();
}
::google::protobuf::uint32 ReorderInfo_LayoutInfo::padding_size() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.padding_size)
  return padding_size_;
}
void ReorderInfo_LayoutInfo::set_padding_size(::google::protobuf::uint32 value) {
  set_has_padding_size();
  padding_size_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.padding_size)
}

// optional uint32 assemble_type = 8 [default = 0];
bool ReorderInfo_LayoutInfo::has_assemble_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ReorderInfo_LayoutInfo::set_has_assemble_type() {
  _has_bits_[0] |= 0x00000080u;
}
void ReorderInfo_LayoutInfo::clear_has_assemble_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void ReorderInfo_LayoutInfo::clear_assemble_type() {
  assemble_type_ = 0u;
  clear_has_assemble_type();
}
::google::protobuf::uint32 ReorderInfo_LayoutInfo::assemble_type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.assemble_type)
  return assemble_type_;
}
void ReorderInfo_LayoutInfo::set_assemble_type(::google::protobuf::uint32 value) {
  set_has_assemble_type();
  assemble_type_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.assemble_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReorderInfo_FixupInfo_FixupTuple::kOffsetFieldNumber;
const int ReorderInfo_FixupInfo_FixupTuple::kDerefSzFieldNumber;
const int ReorderInfo_FixupInfo_FixupTuple::kTypeFieldNumber;
const int ReorderInfo_FixupInfo_FixupTuple::kBaseBblSymFieldNumber;
const int ReorderInfo_FixupInfo_FixupTuple::kBaseSectionNameFieldNumber;
const int ReorderInfo_FixupInfo_FixupTuple::kTargetBblSymFieldNumber;
const int ReorderInfo_FixupInfo_FixupTuple::kTargetSectionNameFieldNumber;
const int ReorderInfo_FixupInfo_FixupTuple::kSectionNameFieldNumber;
const int ReorderInfo_FixupInfo_FixupTuple::kIsRelaFieldNumber;
const int ReorderInfo_FixupInfo_FixupTuple::kNumJtEntriesFieldNumber;
const int ReorderInfo_FixupInfo_FixupTuple::kJtEntrySzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReorderInfo_FixupInfo_FixupTuple::ReorderInfo_FixupInfo_FixupTuple()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_shuffleInfo_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
}
ReorderInfo_FixupInfo_FixupTuple::ReorderInfo_FixupInfo_FixupTuple(const ReorderInfo_FixupInfo_FixupTuple& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_section_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_base_section_name()) {
    base_section_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_section_name_);
  }
  target_section_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_section_name()) {
    target_section_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_section_name_);
  }
  section_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_section_name()) {
    section_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_name_);
  }
  ::memcpy(&offset_, &from.offset_,
    reinterpret_cast<char*>(&jt_entry_sz_) -
    reinterpret_cast<char*>(&offset_) + sizeof(jt_entry_sz_));
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
}

void ReorderInfo_FixupInfo_FixupTuple::SharedCtor() {
  _cached_size_ = 0;
  base_section_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_section_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  section_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&offset_, 0, reinterpret_cast<char*>(&jt_entry_sz_) -
    reinterpret_cast<char*>(&offset_) + sizeof(jt_entry_sz_));
}

ReorderInfo_FixupInfo_FixupTuple::~ReorderInfo_FixupInfo_FixupTuple() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  SharedDtor();
}

void ReorderInfo_FixupInfo_FixupTuple::SharedDtor() {
  base_section_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_section_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  section_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReorderInfo_FixupInfo_FixupTuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReorderInfo_FixupInfo_FixupTuple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2].descriptor;
}

const ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo_FixupTuple::default_instance() {
  protobuf_InitDefaults_shuffleInfo_2eproto();
  return *internal_default_instance();
}

ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo_FixupTuple::New(::google::protobuf::Arena* arena) const {
  ReorderInfo_FixupInfo_FixupTuple* n = new ReorderInfo_FixupInfo_FixupTuple;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReorderInfo_FixupInfo_FixupTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_base_section_name()) {
      GOOGLE_DCHECK(!base_section_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*base_section_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_target_section_name()) {
      GOOGLE_DCHECK(!target_section_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*target_section_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_section_name()) {
      GOOGLE_DCHECK(!section_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*section_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&offset_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&offset_) + sizeof(type_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&is_rela_, 0, reinterpret_cast<char*>(&jt_entry_sz_) -
      reinterpret_cast<char*>(&is_rela_) + sizeof(jt_entry_sz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReorderInfo_FixupInfo_FixupTuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 offset = 1;
      case 1: {
        if (tag == 8u) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deref_sz = 2;
      case 2: {
        if (tag == 16u) {
          set_has_deref_sz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deref_sz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (tag == 24u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 base_bbl_sym = 4;
      case 4: {
        if (tag == 32u) {
          set_has_base_bbl_sym();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_bbl_sym_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string base_section_name = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_section_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->base_section_name().data(), this->base_section_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 target_bbl_sym = 6;
      case 6: {
        if (tag == 48u) {
          set_has_target_bbl_sym();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_bbl_sym_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_section_name = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_section_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_section_name().data(), this->target_section_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string section_name = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_section_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->section_name().data(), this->section_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rela = 9;
      case 9: {
        if (tag == 72u) {
          set_has_is_rela();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rela_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_jt_entries = 10;
      case 10: {
        if (tag == 80u) {
          set_has_num_jt_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_jt_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jt_entry_sz = 11;
      case 11: {
        if (tag == 88u) {
          set_has_jt_entry_sz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jt_entry_sz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  return false;
#undef DO_
}

void ReorderInfo_FixupInfo_FixupTuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  // optional uint32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 deref_sz = 2;
  if (has_deref_sz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deref_sz(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint64 base_bbl_sym = 4;
  if (has_base_bbl_sym()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->base_bbl_sym(), output);
  }

  // optional string base_section_name = 5;
  if (has_base_section_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_section_name().data(), this->base_section_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->base_section_name(), output);
  }

  // optional uint64 target_bbl_sym = 6;
  if (has_target_bbl_sym()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->target_bbl_sym(), output);
  }

  // optional string target_section_name = 7;
  if (has_target_section_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_section_name().data(), this->target_section_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->target_section_name(), output);
  }

  // optional string section_name = 8;
  if (has_section_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->section_name().data(), this->section_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->section_name(), output);
  }

  // optional bool is_rela = 9;
  if (has_is_rela()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_rela(), output);
  }

  // optional uint32 num_jt_entries = 10;
  if (has_num_jt_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->num_jt_entries(), output);
  }

  // optional uint32 jt_entry_sz = 11;
  if (has_jt_entry_sz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->jt_entry_sz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
}

::google::protobuf::uint8* ReorderInfo_FixupInfo_FixupTuple::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  // optional uint32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 deref_sz = 2;
  if (has_deref_sz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deref_sz(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint64 base_bbl_sym = 4;
  if (has_base_bbl_sym()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->base_bbl_sym(), target);
  }

  // optional string base_section_name = 5;
  if (has_base_section_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_section_name().data(), this->base_section_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->base_section_name(), target);
  }

  // optional uint64 target_bbl_sym = 6;
  if (has_target_bbl_sym()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->target_bbl_sym(), target);
  }

  // optional string target_section_name = 7;
  if (has_target_section_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_section_name().data(), this->target_section_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->target_section_name(), target);
  }

  // optional string section_name = 8;
  if (has_section_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->section_name().data(), this->section_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->section_name(), target);
  }

  // optional bool is_rela = 9;
  if (has_is_rela()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_rela(), target);
  }

  // optional uint32 num_jt_entries = 10;
  if (has_num_jt_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->num_jt_entries(), target);
  }

  // optional uint32 jt_entry_sz = 11;
  if (has_jt_entry_sz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->jt_entry_sz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  return target;
}

size_t ReorderInfo_FixupInfo_FixupTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string base_section_name = 5;
    if (has_base_section_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_section_name());
    }

    // optional string target_section_name = 7;
    if (has_target_section_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_section_name());
    }

    // optional string section_name = 8;
    if (has_section_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->section_name());
    }

    // optional uint32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 deref_sz = 2;
    if (has_deref_sz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deref_sz());
    }

    // optional uint64 base_bbl_sym = 4;
    if (has_base_bbl_sym()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_bbl_sym());
    }

    // optional uint64 target_bbl_sym = 6;
    if (has_target_bbl_sym()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_bbl_sym());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool is_rela = 9;
    if (has_is_rela()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_jt_entries = 10;
    if (has_num_jt_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_jt_entries());
    }

    // optional uint32 jt_entry_sz = 11;
    if (has_jt_entry_sz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jt_entry_sz());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReorderInfo_FixupInfo_FixupTuple::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  GOOGLE_DCHECK_NE(&from, this);
  const ReorderInfo_FixupInfo_FixupTuple* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReorderInfo_FixupInfo_FixupTuple>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
    MergeFrom(*source);
  }
}

void ReorderInfo_FixupInfo_FixupTuple::MergeFrom(const ReorderInfo_FixupInfo_FixupTuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_base_section_name()) {
      set_has_base_section_name();
      base_section_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_section_name_);
    }
    if (from.has_target_section_name()) {
      set_has_target_section_name();
      target_section_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_section_name_);
    }
    if (from.has_section_name()) {
      set_has_section_name();
      section_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_name_);
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_deref_sz()) {
      set_deref_sz(from.deref_sz());
    }
    if (from.has_base_bbl_sym()) {
      set_base_bbl_sym(from.base_bbl_sym());
    }
    if (from.has_target_bbl_sym()) {
      set_target_bbl_sym(from.target_bbl_sym());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & 1792u) {
    if (from.has_is_rela()) {
      set_is_rela(from.is_rela());
    }
    if (from.has_num_jt_entries()) {
      set_num_jt_entries(from.num_jt_entries());
    }
    if (from.has_jt_entry_sz()) {
      set_jt_entry_sz(from.jt_entry_sz());
    }
  }
}

void ReorderInfo_FixupInfo_FixupTuple::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReorderInfo_FixupInfo_FixupTuple::CopyFrom(const ReorderInfo_FixupInfo_FixupTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_FixupInfo_FixupTuple::IsInitialized() const {
  return true;
}

void ReorderInfo_FixupInfo_FixupTuple::Swap(ReorderInfo_FixupInfo_FixupTuple* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReorderInfo_FixupInfo_FixupTuple::InternalSwap(ReorderInfo_FixupInfo_FixupTuple* other) {
  base_section_name_.Swap(&other->base_section_name_);
  target_section_name_.Swap(&other->target_section_name_);
  section_name_.Swap(&other->section_name_);
  std::swap(offset_, other->offset_);
  std::swap(deref_sz_, other->deref_sz_);
  std::swap(base_bbl_sym_, other->base_bbl_sym_);
  std::swap(target_bbl_sym_, other->target_bbl_sym_);
  std::swap(type_, other->type_);
  std::swap(is_rela_, other->is_rela_);
  std::swap(num_jt_entries_, other->num_jt_entries_);
  std::swap(jt_entry_sz_, other->jt_entry_sz_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReorderInfo_FixupInfo_FixupTuple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReorderInfo_FixupInfo_FixupTuple

// optional uint32 offset = 1;
bool ReorderInfo_FixupInfo_FixupTuple::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReorderInfo_FixupInfo_FixupTuple::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
::google::protobuf::uint32 ReorderInfo_FixupInfo_FixupTuple::offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.offset)
  return offset_;
}
void ReorderInfo_FixupInfo_FixupTuple::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.offset)
}

// optional uint32 deref_sz = 2;
bool ReorderInfo_FixupInfo_FixupTuple::has_deref_sz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReorderInfo_FixupInfo_FixupTuple::set_has_deref_sz() {
  _has_bits_[0] |= 0x00000010u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_has_deref_sz() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_deref_sz() {
  deref_sz_ = 0u;
  clear_has_deref_sz();
}
::google::protobuf::uint32 ReorderInfo_FixupInfo_FixupTuple::deref_sz() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.deref_sz)
  return deref_sz_;
}
void ReorderInfo_FixupInfo_FixupTuple::set_deref_sz(::google::protobuf::uint32 value) {
  set_has_deref_sz();
  deref_sz_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.deref_sz)
}

// optional uint32 type = 3;
bool ReorderInfo_FixupInfo_FixupTuple::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ReorderInfo_FixupInfo_FixupTuple::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 ReorderInfo_FixupInfo_FixupTuple::type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.type)
  return type_;
}
void ReorderInfo_FixupInfo_FixupTuple::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.type)
}

// optional uint64 base_bbl_sym = 4;
bool ReorderInfo_FixupInfo_FixupTuple::has_base_bbl_sym() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ReorderInfo_FixupInfo_FixupTuple::set_has_base_bbl_sym() {
  _has_bits_[0] |= 0x00000020u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_has_base_bbl_sym() {
  _has_bits_[0] &= ~0x00000020u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_base_bbl_sym() {
  base_bbl_sym_ = GOOGLE_ULONGLONG(0);
  clear_has_base_bbl_sym();
}
::google::protobuf::uint64 ReorderInfo_FixupInfo_FixupTuple::base_bbl_sym() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_bbl_sym)
  return base_bbl_sym_;
}
void ReorderInfo_FixupInfo_FixupTuple::set_base_bbl_sym(::google::protobuf::uint64 value) {
  set_has_base_bbl_sym();
  base_bbl_sym_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_bbl_sym)
}

// optional string base_section_name = 5;
bool ReorderInfo_FixupInfo_FixupTuple::has_base_section_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReorderInfo_FixupInfo_FixupTuple::set_has_base_section_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_has_base_section_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_base_section_name() {
  base_section_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base_section_name();
}
const ::std::string& ReorderInfo_FixupInfo_FixupTuple::base_section_name() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section_name)
  return base_section_name_.GetNoArena();
}
void ReorderInfo_FixupInfo_FixupTuple::set_base_section_name(const ::std::string& value) {
  set_has_base_section_name();
  base_section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section_name)
}
#if LANG_CXX11
void ReorderInfo_FixupInfo_FixupTuple::set_base_section_name(::std::string&& value) {
  set_has_base_section_name();
  base_section_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section_name)
}
#endif
void ReorderInfo_FixupInfo_FixupTuple::set_base_section_name(const char* value) {
  set_has_base_section_name();
  base_section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section_name)
}
void ReorderInfo_FixupInfo_FixupTuple::set_base_section_name(const char* value, size_t size) {
  set_has_base_section_name();
  base_section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section_name)
}
::std::string* ReorderInfo_FixupInfo_FixupTuple::mutable_base_section_name() {
  set_has_base_section_name();
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section_name)
  return base_section_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReorderInfo_FixupInfo_FixupTuple::release_base_section_name() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section_name)
  clear_has_base_section_name();
  return base_section_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReorderInfo_FixupInfo_FixupTuple::set_allocated_base_section_name(::std::string* base_section_name) {
  if (base_section_name != NULL) {
    set_has_base_section_name();
  } else {
    clear_has_base_section_name();
  }
  base_section_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_section_name);
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section_name)
}

// optional uint64 target_bbl_sym = 6;
bool ReorderInfo_FixupInfo_FixupTuple::has_target_bbl_sym() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ReorderInfo_FixupInfo_FixupTuple::set_has_target_bbl_sym() {
  _has_bits_[0] |= 0x00000040u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_has_target_bbl_sym() {
  _has_bits_[0] &= ~0x00000040u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_target_bbl_sym() {
  target_bbl_sym_ = GOOGLE_ULONGLONG(0);
  clear_has_target_bbl_sym();
}
::google::protobuf::uint64 ReorderInfo_FixupInfo_FixupTuple::target_bbl_sym() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_bbl_sym)
  return target_bbl_sym_;
}
void ReorderInfo_FixupInfo_FixupTuple::set_target_bbl_sym(::google::protobuf::uint64 value) {
  set_has_target_bbl_sym();
  target_bbl_sym_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_bbl_sym)
}

// optional string target_section_name = 7;
bool ReorderInfo_FixupInfo_FixupTuple::has_target_section_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReorderInfo_FixupInfo_FixupTuple::set_has_target_section_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_has_target_section_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_target_section_name() {
  target_section_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_section_name();
}
const ::std::string& ReorderInfo_FixupInfo_FixupTuple::target_section_name() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section_name)
  return target_section_name_.GetNoArena();
}
void ReorderInfo_FixupInfo_FixupTuple::set_target_section_name(const ::std::string& value) {
  set_has_target_section_name();
  target_section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section_name)
}
#if LANG_CXX11
void ReorderInfo_FixupInfo_FixupTuple::set_target_section_name(::std::string&& value) {
  set_has_target_section_name();
  target_section_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section_name)
}
#endif
void ReorderInfo_FixupInfo_FixupTuple::set_target_section_name(const char* value) {
  set_has_target_section_name();
  target_section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section_name)
}
void ReorderInfo_FixupInfo_FixupTuple::set_target_section_name(const char* value, size_t size) {
  set_has_target_section_name();
  target_section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section_name)
}
::std::string* ReorderInfo_FixupInfo_FixupTuple::mutable_target_section_name() {
  set_has_target_section_name();
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section_name)
  return target_section_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReorderInfo_FixupInfo_FixupTuple::release_target_section_name() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section_name)
  clear_has_target_section_name();
  return target_section_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReorderInfo_FixupInfo_FixupTuple::set_allocated_target_section_name(::std::string* target_section_name) {
  if (target_section_name != NULL) {
    set_has_target_section_name();
  } else {
    clear_has_target_section_name();
  }
  target_section_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_section_name);
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section_name)
}

// optional string section_name = 8;
bool ReorderInfo_FixupInfo_FixupTuple::has_section_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReorderInfo_FixupInfo_FixupTuple::set_has_section_name() {
  _has_bits_[0] |= 0x00000004u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_has_section_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_section_name() {
  section_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_section_name();
}
const ::std::string& ReorderInfo_FixupInfo_FixupTuple::section_name() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
  return section_name_.GetNoArena();
}
void ReorderInfo_FixupInfo_FixupTuple::set_section_name(const ::std::string& value) {
  set_has_section_name();
  section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}
#if LANG_CXX11
void ReorderInfo_FixupInfo_FixupTuple::set_section_name(::std::string&& value) {
  set_has_section_name();
  section_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}
#endif
void ReorderInfo_FixupInfo_FixupTuple::set_section_name(const char* value) {
  set_has_section_name();
  section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}
void ReorderInfo_FixupInfo_FixupTuple::set_section_name(const char* value, size_t size) {
  set_has_section_name();
  section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}
::std::string* ReorderInfo_FixupInfo_FixupTuple::mutable_section_name() {
  set_has_section_name();
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
  return section_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReorderInfo_FixupInfo_FixupTuple::release_section_name() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
  clear_has_section_name();
  return section_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReorderInfo_FixupInfo_FixupTuple::set_allocated_section_name(::std::string* section_name) {
  if (section_name != NULL) {
    set_has_section_name();
  } else {
    clear_has_section_name();
  }
  section_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), section_name);
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}

// optional bool is_rela = 9;
bool ReorderInfo_FixupInfo_FixupTuple::has_is_rela() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ReorderInfo_FixupInfo_FixupTuple::set_has_is_rela() {
  _has_bits_[0] |= 0x00000100u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_has_is_rela() {
  _has_bits_[0] &= ~0x00000100u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_is_rela() {
  is_rela_ = false;
  clear_has_is_rela();
}
bool ReorderInfo_FixupInfo_FixupTuple::is_rela() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.is_rela)
  return is_rela_;
}
void ReorderInfo_FixupInfo_FixupTuple::set_is_rela(bool value) {
  set_has_is_rela();
  is_rela_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.is_rela)
}

// optional uint32 num_jt_entries = 10;
bool ReorderInfo_FixupInfo_FixupTuple::has_num_jt_entries() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ReorderInfo_FixupInfo_FixupTuple::set_has_num_jt_entries() {
  _has_bits_[0] |= 0x00000200u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_has_num_jt_entries() {
  _has_bits_[0] &= ~0x00000200u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_num_jt_entries() {
  num_jt_entries_ = 0u;
  clear_has_num_jt_entries();
}
::google::protobuf::uint32 ReorderInfo_FixupInfo_FixupTuple::num_jt_entries() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.num_jt_entries)
  return num_jt_entries_;
}
void ReorderInfo_FixupInfo_FixupTuple::set_num_jt_entries(::google::protobuf::uint32 value) {
  set_has_num_jt_entries();
  num_jt_entries_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.num_jt_entries)
}

// optional uint32 jt_entry_sz = 11;
bool ReorderInfo_FixupInfo_FixupTuple::has_jt_entry_sz() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ReorderInfo_FixupInfo_FixupTuple::set_has_jt_entry_sz() {
  _has_bits_[0] |= 0x00000400u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_has_jt_entry_sz() {
  _has_bits_[0] &= ~0x00000400u;
}
void ReorderInfo_FixupInfo_FixupTuple::clear_jt_entry_sz() {
  jt_entry_sz_ = 0u;
  clear_has_jt_entry_sz();
}
::google::protobuf::uint32 ReorderInfo_FixupInfo_FixupTuple::jt_entry_sz() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.jt_entry_sz)
  return jt_entry_sz_;
}
void ReorderInfo_FixupInfo_FixupTuple::set_jt_entry_sz(::google::protobuf::uint32 value) {
  set_has_jt_entry_sz();
  jt_entry_sz_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.jt_entry_sz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReorderInfo_FixupInfo::kTextFieldNumber;
const int ReorderInfo_FixupInfo::kRodataFieldNumber;
const int ReorderInfo_FixupInfo::kDataFieldNumber;
const int ReorderInfo_FixupInfo::kDatarelFieldNumber;
const int ReorderInfo_FixupInfo::kInitarrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReorderInfo_FixupInfo::ReorderInfo_FixupInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_shuffleInfo_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShuffleInfo.ReorderInfo.FixupInfo)
}
ReorderInfo_FixupInfo::ReorderInfo_FixupInfo(const ReorderInfo_FixupInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      text_(from.text_),
      rodata_(from.rodata_),
      data_(from.data_),
      datarel_(from.datarel_),
      initarray_(from.initarray_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.FixupInfo)
}

void ReorderInfo_FixupInfo::SharedCtor() {
  _cached_size_ = 0;
}

ReorderInfo_FixupInfo::~ReorderInfo_FixupInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.FixupInfo)
  SharedDtor();
}

void ReorderInfo_FixupInfo::SharedDtor() {
}

void ReorderInfo_FixupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReorderInfo_FixupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3].descriptor;
}

const ReorderInfo_FixupInfo& ReorderInfo_FixupInfo::default_instance() {
  protobuf_InitDefaults_shuffleInfo_2eproto();
  return *internal_default_instance();
}

ReorderInfo_FixupInfo* ReorderInfo_FixupInfo::New(::google::protobuf::Arena* arena) const {
  ReorderInfo_FixupInfo* n = new ReorderInfo_FixupInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReorderInfo_FixupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.FixupInfo)
  text_.Clear();
  rodata_.Clear();
  data_.Clear();
  datarel_.Clear();
  initarray_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReorderInfo_FixupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShuffleInfo.ReorderInfo.FixupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_text()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rodata()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datarel()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_initarray()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShuffleInfo.ReorderInfo.FixupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShuffleInfo.ReorderInfo.FixupInfo)
  return false;
#undef DO_
}

void ReorderInfo_FixupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShuffleInfo.ReorderInfo.FixupInfo)
  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
  for (unsigned int i = 0, n = this->text_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->text(i), output);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
  for (unsigned int i = 0, n = this->rodata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rodata(i), output);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
  for (unsigned int i = 0, n = this->datarel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->datarel(i), output);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
  for (unsigned int i = 0, n = this->initarray_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->initarray(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShuffleInfo.ReorderInfo.FixupInfo)
}

::google::protobuf::uint8* ReorderInfo_FixupInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.FixupInfo)
  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
  for (unsigned int i = 0, n = this->text_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->text(i), false, target);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
  for (unsigned int i = 0, n = this->rodata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->rodata(i), false, target);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->data(i), false, target);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
  for (unsigned int i = 0, n = this->datarel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->datarel(i), false, target);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
  for (unsigned int i = 0, n = this->initarray_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->initarray(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.FixupInfo)
  return target;
}

size_t ReorderInfo_FixupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.FixupInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
  {
    unsigned int count = this->text_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text(i));
    }
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
  {
    unsigned int count = this->rodata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rodata(i));
    }
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
  {
    unsigned int count = this->datarel_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datarel(i));
    }
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
  {
    unsigned int count = this->initarray_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initarray(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReorderInfo_FixupInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShuffleInfo.ReorderInfo.FixupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReorderInfo_FixupInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReorderInfo_FixupInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShuffleInfo.ReorderInfo.FixupInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShuffleInfo.ReorderInfo.FixupInfo)
    MergeFrom(*source);
  }
}

void ReorderInfo_FixupInfo::MergeFrom(const ReorderInfo_FixupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.FixupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.MergeFrom(from.text_);
  rodata_.MergeFrom(from.rodata_);
  data_.MergeFrom(from.data_);
  datarel_.MergeFrom(from.datarel_);
  initarray_.MergeFrom(from.initarray_);
}

void ReorderInfo_FixupInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShuffleInfo.ReorderInfo.FixupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReorderInfo_FixupInfo::CopyFrom(const ReorderInfo_FixupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.FixupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_FixupInfo::IsInitialized() const {
  return true;
}

void ReorderInfo_FixupInfo::Swap(ReorderInfo_FixupInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReorderInfo_FixupInfo::InternalSwap(ReorderInfo_FixupInfo* other) {
  text_.UnsafeArenaSwap(&other->text_);
  rodata_.UnsafeArenaSwap(&other->rodata_);
  data_.UnsafeArenaSwap(&other->data_);
  datarel_.UnsafeArenaSwap(&other->datarel_);
  initarray_.UnsafeArenaSwap(&other->initarray_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReorderInfo_FixupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReorderInfo_FixupInfo

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
int ReorderInfo_FixupInfo::text_size() const {
  return text_.size();
}
void ReorderInfo_FixupInfo::clear_text() {
  text_.Clear();
}
const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::text(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return text_.Get(index);
}
::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return text_.Mutable(index);
}
::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_text() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return text_.Add();
}
::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return &text_;
}
const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::text() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return text_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
int ReorderInfo_FixupInfo::rodata_size() const {
  return rodata_.size();
}
void ReorderInfo_FixupInfo::clear_rodata() {
  rodata_.Clear();
}
const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::rodata(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return rodata_.Get(index);
}
::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_rodata(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return rodata_.Mutable(index);
}
::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_rodata() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return rodata_.Add();
}
::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_rodata() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return &rodata_;
}
const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::rodata() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return rodata_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
int ReorderInfo_FixupInfo::data_size() const {
  return data_.size();
}
void ReorderInfo_FixupInfo::clear_data() {
  data_.Clear();
}
const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return data_.Get(index);
}
::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return data_.Mutable(index);
}
::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_data() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::data() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return data_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
int ReorderInfo_FixupInfo::datarel_size() const {
  return datarel_.size();
}
void ReorderInfo_FixupInfo::clear_datarel() {
  datarel_.Clear();
}
const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::datarel(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return datarel_.Get(index);
}
::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_datarel(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return datarel_.Mutable(index);
}
::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_datarel() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return datarel_.Add();
}
::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_datarel() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return &datarel_;
}
const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::datarel() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return datarel_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
int ReorderInfo_FixupInfo::initarray_size() const {
  return initarray_.size();
}
void ReorderInfo_FixupInfo::clear_initarray() {
  initarray_.Clear();
}
const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::initarray(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return initarray_.Get(index);
}
::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_initarray(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return initarray_.Mutable(index);
}
::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_initarray() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return initarray_.Add();
}
::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_initarray() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return &initarray_;
}
const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::initarray() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return initarray_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReorderInfo_SourceInfo::kSrcTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReorderInfo_SourceInfo::ReorderInfo_SourceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_shuffleInfo_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShuffleInfo.ReorderInfo.SourceInfo)
}
ReorderInfo_SourceInfo::ReorderInfo_SourceInfo(const ReorderInfo_SourceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      src_type_(from.src_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.SourceInfo)
}

void ReorderInfo_SourceInfo::SharedCtor() {
  _cached_size_ = 0;
}

ReorderInfo_SourceInfo::~ReorderInfo_SourceInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.SourceInfo)
  SharedDtor();
}

void ReorderInfo_SourceInfo::SharedDtor() {
}

void ReorderInfo_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReorderInfo_SourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4].descriptor;
}

const ReorderInfo_SourceInfo& ReorderInfo_SourceInfo::default_instance() {
  protobuf_InitDefaults_shuffleInfo_2eproto();
  return *internal_default_instance();
}

ReorderInfo_SourceInfo* ReorderInfo_SourceInfo::New(::google::protobuf::Arena* arena) const {
  ReorderInfo_SourceInfo* n = new ReorderInfo_SourceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReorderInfo_SourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.SourceInfo)
  src_type_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReorderInfo_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShuffleInfo.ReorderInfo.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 src_type = 1;
      case 1: {
        if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_src_type())));
        } else if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_src_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShuffleInfo.ReorderInfo.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShuffleInfo.ReorderInfo.SourceInfo)
  return false;
#undef DO_
}

void ReorderInfo_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShuffleInfo.ReorderInfo.SourceInfo)
  // repeated uint32 src_type = 1;
  for (int i = 0; i < this->src_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->src_type(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShuffleInfo.ReorderInfo.SourceInfo)
}

::google::protobuf::uint8* ReorderInfo_SourceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.SourceInfo)
  // repeated uint32 src_type = 1;
  for (int i = 0; i < this->src_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->src_type(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.SourceInfo)
  return target;
}

size_t ReorderInfo_SourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.SourceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 src_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->src_type_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->src_type(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->src_type_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReorderInfo_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShuffleInfo.ReorderInfo.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReorderInfo_SourceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReorderInfo_SourceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShuffleInfo.ReorderInfo.SourceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShuffleInfo.ReorderInfo.SourceInfo)
    MergeFrom(*source);
  }
}

void ReorderInfo_SourceInfo::MergeFrom(const ReorderInfo_SourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_type_.MergeFrom(from.src_type_);
}

void ReorderInfo_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShuffleInfo.ReorderInfo.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReorderInfo_SourceInfo::CopyFrom(const ReorderInfo_SourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_SourceInfo::IsInitialized() const {
  return true;
}

void ReorderInfo_SourceInfo::Swap(ReorderInfo_SourceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReorderInfo_SourceInfo::InternalSwap(ReorderInfo_SourceInfo* other) {
  src_type_.UnsafeArenaSwap(&other->src_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReorderInfo_SourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReorderInfo_SourceInfo

// repeated uint32 src_type = 1;
int ReorderInfo_SourceInfo::src_type_size() const {
  return src_type_.size();
}
void ReorderInfo_SourceInfo::clear_src_type() {
  src_type_.Clear();
}
::google::protobuf::uint32 ReorderInfo_SourceInfo::src_type(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
  return src_type_.Get(index);
}
void ReorderInfo_SourceInfo::set_src_type(int index, ::google::protobuf::uint32 value) {
  src_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
}
void ReorderInfo_SourceInfo::add_src_type(::google::protobuf::uint32 value) {
  src_type_.Add(value);
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ReorderInfo_SourceInfo::src_type() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
  return src_type_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ReorderInfo_SourceInfo::mutable_src_type() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
  return &src_type_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReorderInfo::kBinFieldNumber;
const int ReorderInfo::kLayoutFieldNumber;
const int ReorderInfo::kFixupFieldNumber;
const int ReorderInfo::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReorderInfo::ReorderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_shuffleInfo_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShuffleInfo.ReorderInfo)
}
ReorderInfo::ReorderInfo(const ReorderInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      layout_(from.layout_),
      fixup_(from.fixup_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bin()) {
    bin_ = new ::ShuffleInfo::ReorderInfo_BinaryInfo(*from.bin_);
  } else {
    bin_ = NULL;
  }
  if (from.has_source()) {
    source_ = new ::ShuffleInfo::ReorderInfo_SourceInfo(*from.source_);
  } else {
    source_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo)
}

void ReorderInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bin_, 0, reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&bin_) + sizeof(source_));
}

ReorderInfo::~ReorderInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo)
  SharedDtor();
}

void ReorderInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete bin_;
  }
  if (this != internal_default_instance()) {
    delete source_;
  }
}

void ReorderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReorderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[5].descriptor;
}

const ReorderInfo& ReorderInfo::default_instance() {
  protobuf_InitDefaults_shuffleInfo_2eproto();
  return *internal_default_instance();
}

ReorderInfo* ReorderInfo::New(::google::protobuf::Arena* arena) const {
  ReorderInfo* n = new ReorderInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReorderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo)
  layout_.Clear();
  fixup_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_bin()) {
      GOOGLE_DCHECK(bin_ != NULL);
      bin_->::ShuffleInfo::ReorderInfo_BinaryInfo::Clear();
    }
    if (has_source()) {
      GOOGLE_DCHECK(source_ != NULL);
      source_->::ShuffleInfo::ReorderInfo_SourceInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReorderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShuffleInfo.ReorderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layout()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fixup()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional .ShuffleInfo.ReorderInfo.SourceInfo source = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShuffleInfo.ReorderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShuffleInfo.ReorderInfo)
  return false;
#undef DO_
}

void ReorderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShuffleInfo.ReorderInfo)
  // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
  if (has_bin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->bin_, output);
  }

  // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
  for (unsigned int i = 0, n = this->layout_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layout(i), output);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
  for (unsigned int i = 0, n = this->fixup_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fixup(i), output);
  }

  // optional .ShuffleInfo.ReorderInfo.SourceInfo source = 4;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->source_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShuffleInfo.ReorderInfo)
}

::google::protobuf::uint8* ReorderInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo)
  // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
  if (has_bin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->bin_, false, target);
  }

  // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
  for (unsigned int i = 0, n = this->layout_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->layout(i), false, target);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
  for (unsigned int i = 0, n = this->fixup_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->fixup(i), false, target);
  }

  // optional .ShuffleInfo.ReorderInfo.SourceInfo source = 4;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->source_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo)
  return target;
}

size_t ReorderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
  {
    unsigned int count = this->layout_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layout(i));
    }
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
  {
    unsigned int count = this->fixup_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixup(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
    if (has_bin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bin_);
    }

    // optional .ShuffleInfo.ReorderInfo.SourceInfo source = 4;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReorderInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShuffleInfo.ReorderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReorderInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReorderInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShuffleInfo.ReorderInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShuffleInfo.ReorderInfo)
    MergeFrom(*source);
  }
}

void ReorderInfo::MergeFrom(const ReorderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layout_.MergeFrom(from.layout_);
  fixup_.MergeFrom(from.fixup_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_bin()) {
      mutable_bin()->::ShuffleInfo::ReorderInfo_BinaryInfo::MergeFrom(from.bin());
    }
    if (from.has_source()) {
      mutable_source()->::ShuffleInfo::ReorderInfo_SourceInfo::MergeFrom(from.source());
    }
  }
}

void ReorderInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShuffleInfo.ReorderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReorderInfo::CopyFrom(const ReorderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo::IsInitialized() const {
  return true;
}

void ReorderInfo::Swap(ReorderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReorderInfo::InternalSwap(ReorderInfo* other) {
  layout_.UnsafeArenaSwap(&other->layout_);
  fixup_.UnsafeArenaSwap(&other->fixup_);
  std::swap(bin_, other->bin_);
  std::swap(source_, other->source_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReorderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReorderInfo

// optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
bool ReorderInfo::has_bin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReorderInfo::set_has_bin() {
  _has_bits_[0] |= 0x00000001u;
}
void ReorderInfo::clear_has_bin() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReorderInfo::clear_bin() {
  if (bin_ != NULL) bin_->::ShuffleInfo::ReorderInfo_BinaryInfo::Clear();
  clear_has_bin();
}
const ::ShuffleInfo::ReorderInfo_BinaryInfo& ReorderInfo::bin() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.bin)
  return bin_ != NULL ? *bin_
                         : *::ShuffleInfo::ReorderInfo_BinaryInfo::internal_default_instance();
}
::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::mutable_bin() {
  set_has_bin();
  if (bin_ == NULL) {
    bin_ = new ::ShuffleInfo::ReorderInfo_BinaryInfo;
  }
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.bin)
  return bin_;
}
::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::release_bin() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.bin)
  clear_has_bin();
  ::ShuffleInfo::ReorderInfo_BinaryInfo* temp = bin_;
  bin_ = NULL;
  return temp;
}
void ReorderInfo::set_allocated_bin(::ShuffleInfo::ReorderInfo_BinaryInfo* bin) {
  delete bin_;
  bin_ = bin;
  if (bin) {
    set_has_bin();
  } else {
    clear_has_bin();
  }
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.bin)
}

// repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
int ReorderInfo::layout_size() const {
  return layout_.size();
}
void ReorderInfo::clear_layout() {
  layout_.Clear();
}
const ::ShuffleInfo::ReorderInfo_LayoutInfo& ReorderInfo::layout(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.layout)
  return layout_.Get(index);
}
::ShuffleInfo::ReorderInfo_LayoutInfo* ReorderInfo::mutable_layout(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.layout)
  return layout_.Mutable(index);
}
::ShuffleInfo::ReorderInfo_LayoutInfo* ReorderInfo::add_layout() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.layout)
  return layout_.Add();
}
::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >*
ReorderInfo::mutable_layout() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.layout)
  return &layout_;
}
const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >&
ReorderInfo::layout() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.layout)
  return layout_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
int ReorderInfo::fixup_size() const {
  return fixup_.size();
}
void ReorderInfo::clear_fixup() {
  fixup_.Clear();
}
const ::ShuffleInfo::ReorderInfo_FixupInfo& ReorderInfo::fixup(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.fixup)
  return fixup_.Get(index);
}
::ShuffleInfo::ReorderInfo_FixupInfo* ReorderInfo::mutable_fixup(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.fixup)
  return fixup_.Mutable(index);
}
::ShuffleInfo::ReorderInfo_FixupInfo* ReorderInfo::add_fixup() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.fixup)
  return fixup_.Add();
}
::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >*
ReorderInfo::mutable_fixup() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.fixup)
  return &fixup_;
}
const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >&
ReorderInfo::fixup() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.fixup)
  return fixup_;
}

// optional .ShuffleInfo.ReorderInfo.SourceInfo source = 4;
bool ReorderInfo::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReorderInfo::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
void ReorderInfo::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReorderInfo::clear_source() {
  if (source_ != NULL) source_->::ShuffleInfo::ReorderInfo_SourceInfo::Clear();
  clear_has_source();
}
const ::ShuffleInfo::ReorderInfo_SourceInfo& ReorderInfo::source() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.source)
  return source_ != NULL ? *source_
                         : *::ShuffleInfo::ReorderInfo_SourceInfo::internal_default_instance();
}
::ShuffleInfo::ReorderInfo_SourceInfo* ReorderInfo::mutable_source() {
  set_has_source();
  if (source_ == NULL) {
    source_ = new ::ShuffleInfo::ReorderInfo_SourceInfo;
  }
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.source)
  return source_;
}
::ShuffleInfo::ReorderInfo_SourceInfo* ReorderInfo::release_source() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.source)
  clear_has_source();
  ::ShuffleInfo::ReorderInfo_SourceInfo* temp = source_;
  source_ = NULL;
  return temp;
}
void ReorderInfo::set_allocated_source(::ShuffleInfo::ReorderInfo_SourceInfo* source) {
  delete source_;
  source_ = source;
  if (source) {
    set_has_source();
  } else {
    clear_has_source();
  }
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ShuffleInfo

// @@protoc_insertion_point(global_scope)
