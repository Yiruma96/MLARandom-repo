// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shuffleInfo.proto

#include "shuffleInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ShuffleInfo {
PROTOBUF_CONSTEXPR ReorderInfo_BinaryInfo::ReorderInfo_BinaryInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rand_obj_offset_)*/uint64_t{0u}} {}
struct ReorderInfo_BinaryInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReorderInfo_BinaryInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReorderInfo_BinaryInfoDefaultTypeInternal() {}
  union {
    ReorderInfo_BinaryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReorderInfo_BinaryInfoDefaultTypeInternal _ReorderInfo_BinaryInfo_default_instance_;
PROTOBUF_CONSTEXPR ReorderInfo_LayoutInfo::ReorderInfo_LayoutInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bb_size_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.bb_fallthrough_)*/false
  , /*decltype(_impl_.section_)*/0u
  , /*decltype(_impl_.src_type_)*/0u} {}
struct ReorderInfo_LayoutInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReorderInfo_LayoutInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReorderInfo_LayoutInfoDefaultTypeInternal() {}
  union {
    ReorderInfo_LayoutInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReorderInfo_LayoutInfoDefaultTypeInternal _ReorderInfo_LayoutInfo_default_instance_;
PROTOBUF_CONSTEXPR ReorderInfo_FixupInfo_FixupTuple::ReorderInfo_FixupInfo_FixupTuple(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.base_bbl_sym_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.base_section_)*/0u
  , /*decltype(_impl_.target_bbl_sym_)*/uint64_t{0u}
  , /*decltype(_impl_.target_section_)*/0u
  , /*decltype(_impl_.section_)*/0u
  , /*decltype(_impl_.add_)*/int64_t{0}
  , /*decltype(_impl_.step_)*/0u} {}
struct ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal() {}
  union {
    ReorderInfo_FixupInfo_FixupTuple _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal _ReorderInfo_FixupInfo_FixupTuple_default_instance_;
PROTOBUF_CONSTEXPR ReorderInfo_FixupInfo::ReorderInfo_FixupInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{}
  , /*decltype(_impl_.rodata_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.datarel_)*/{}
  , /*decltype(_impl_.initarray_)*/{}
  , /*decltype(_impl_.got_)*/{}
  , /*decltype(_impl_.init_)*/{}
  , /*decltype(_impl_.fini_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReorderInfo_FixupInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReorderInfo_FixupInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReorderInfo_FixupInfoDefaultTypeInternal() {}
  union {
    ReorderInfo_FixupInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReorderInfo_FixupInfoDefaultTypeInternal _ReorderInfo_FixupInfo_default_instance_;
PROTOBUF_CONSTEXPR ReorderInfo_CCRLimitation::ReorderInfo_CCRLimitation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.missrandfile_)*/{}
  , /*decltype(_impl_.all_obj_)*/uint64_t{0u}
  , /*decltype(_impl_.hybrid_obj_)*/uint64_t{0u}
  , /*decltype(_impl_.static_got_)*/uint64_t{0u}
  , /*decltype(_impl_.silicon_errata_)*/uint64_t{0u}
  , /*decltype(_impl_.tls_opt_)*/uint64_t{0u}
  , /*decltype(_impl_.got_opt_)*/uint64_t{0u}
  , /*decltype(_impl_.got_target_)*/uint64_t{0u}
  , /*decltype(_impl_.tls_got_target_)*/uint64_t{0u}
  , /*decltype(_impl_.plt_target_)*/uint64_t{0u}
  , /*decltype(_impl_.merged_target_)*/uint64_t{0u}
  , /*decltype(_impl_.ifunc_target_)*/uint64_t{0u}} {}
struct ReorderInfo_CCRLimitationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReorderInfo_CCRLimitationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReorderInfo_CCRLimitationDefaultTypeInternal() {}
  union {
    ReorderInfo_CCRLimitation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReorderInfo_CCRLimitationDefaultTypeInternal _ReorderInfo_CCRLimitation_default_instance_;
PROTOBUF_CONSTEXPR ReorderInfo::ReorderInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.layout_)*/{}
  , /*decltype(_impl_.fixup_)*/{}
  , /*decltype(_impl_.bin_)*/nullptr
  , /*decltype(_impl_.ccr_limitation_)*/nullptr} {}
struct ReorderInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReorderInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReorderInfoDefaultTypeInternal() {}
  union {
    ReorderInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReorderInfoDefaultTypeInternal _ReorderInfo_default_instance_;
PROTOBUF_CONSTEXPR Metadata_InstInfo::Metadata_InstInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.offset_)*/0u
  , /*decltype(_impl_.size_)*/0u} {}
struct Metadata_InstInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Metadata_InstInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Metadata_InstInfoDefaultTypeInternal() {}
  union {
    Metadata_InstInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Metadata_InstInfoDefaultTypeInternal _Metadata_InstInfo_default_instance_;
PROTOBUF_CONSTEXPR Metadata_FunInfo::Metadata_FunInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.insts_)*/{}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.section_)*/0u
  , /*decltype(_impl_.offset_)*/0u} {}
struct Metadata_FunInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Metadata_FunInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Metadata_FunInfoDefaultTypeInternal() {}
  union {
    Metadata_FunInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Metadata_FunInfoDefaultTypeInternal _Metadata_FunInfo_default_instance_;
PROTOBUF_CONSTEXPR Metadata_FixupInfo::Metadata_FixupInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.section_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.base_bbl_sym_)*/uint64_t{0u}
  , /*decltype(_impl_.target_bbl_sym_)*/uint64_t{0u}
  , /*decltype(_impl_.base_section_)*/0u
  , /*decltype(_impl_.target_section_)*/0u
  , /*decltype(_impl_.add_)*/int64_t{0}
  , /*decltype(_impl_.step_)*/0u} {}
struct Metadata_FixupInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Metadata_FixupInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Metadata_FixupInfoDefaultTypeInternal() {}
  union {
    Metadata_FixupInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Metadata_FixupInfoDefaultTypeInternal _Metadata_FixupInfo_default_instance_;
PROTOBUF_CONSTEXPR Metadata_GoldInfo::Metadata_GoldInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.missrandfile_)*/{}
  , /*decltype(_impl_.all_obj_)*/uint64_t{0u}
  , /*decltype(_impl_.norand_obj_)*/uint64_t{0u}
  , /*decltype(_impl_.static_got_)*/uint64_t{0u}
  , /*decltype(_impl_.silicon_errata_)*/uint64_t{0u}
  , /*decltype(_impl_.tls_opt_)*/uint64_t{0u}
  , /*decltype(_impl_.got_opt_)*/uint64_t{0u}
  , /*decltype(_impl_.got_target_)*/uint64_t{0u}
  , /*decltype(_impl_.tls_got_target_)*/uint64_t{0u}
  , /*decltype(_impl_.plt_target_)*/uint64_t{0u}
  , /*decltype(_impl_.merged_target_)*/uint64_t{0u}
  , /*decltype(_impl_.ifunc_target_)*/uint64_t{0u}
  , /*decltype(_impl_.c_fun_)*/uint64_t{0u}} {}
struct Metadata_GoldInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Metadata_GoldInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Metadata_GoldInfoDefaultTypeInternal() {}
  union {
    Metadata_GoldInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Metadata_GoldInfoDefaultTypeInternal _Metadata_GoldInfo_default_instance_;
PROTOBUF_CONSTEXPR Metadata::Metadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.funs_)*/{}
  , /*decltype(_impl_.fixups_)*/{}
  , /*decltype(_impl_.otherfixups_)*/{}
  , /*decltype(_impl_.goldinfo_)*/nullptr} {}
struct MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataDefaultTypeInternal _Metadata_default_instance_;
}  // namespace ShuffleInfo
static ::_pb::Metadata file_level_metadata_shuffleInfo_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_shuffleInfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_shuffleInfo_2eproto = nullptr;

const uint32_t TableStruct_shuffleInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_BinaryInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_BinaryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_BinaryInfo, _impl_.rand_obj_offset_),
  0,
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, _impl_.bb_size_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, _impl_.bb_fallthrough_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, _impl_.section_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, _impl_.src_type_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, _impl_.info_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _impl_.base_bbl_sym_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _impl_.base_section_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _impl_.target_bbl_sym_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _impl_.target_section_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _impl_.section_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _impl_.add_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _impl_.step_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _impl_.info_),
  1,
  3,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, _impl_.rodata_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, _impl_.datarel_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, _impl_.initarray_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, _impl_.got_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, _impl_.init_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, _impl_.fini_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _impl_.all_obj_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _impl_.hybrid_obj_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _impl_.static_got_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _impl_.silicon_errata_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _impl_.tls_opt_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _impl_.got_opt_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _impl_.got_target_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _impl_.tls_got_target_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _impl_.plt_target_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _impl_.merged_target_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _impl_.ifunc_target_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_CCRLimitation, _impl_.missrandfile_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo, _impl_.bin_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo, _impl_.layout_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo, _impl_.fixup_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo, _impl_.ccr_limitation_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_InstInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_InstInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_InstInfo, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_InstInfo, _impl_.size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FunInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FunInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FunInfo, _impl_.section_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FunInfo, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FunInfo, _impl_.insts_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FunInfo, _impl_.info_),
  1,
  2,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FixupInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FixupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FixupInfo, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FixupInfo, _impl_.section_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FixupInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FixupInfo, _impl_.base_bbl_sym_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FixupInfo, _impl_.base_section_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FixupInfo, _impl_.target_bbl_sym_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FixupInfo, _impl_.target_section_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FixupInfo, _impl_.add_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FixupInfo, _impl_.step_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_FixupInfo, _impl_.info_),
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  8,
  9,
  0,
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_.all_obj_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_.norand_obj_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_.static_got_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_.silicon_errata_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_.tls_opt_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_.got_opt_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_.got_target_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_.tls_got_target_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_.plt_target_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_.merged_target_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_.ifunc_target_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_.missrandfile_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata_GoldInfo, _impl_.c_fun_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  11,
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata, _impl_.funs_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata, _impl_.fixups_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata, _impl_.otherfixups_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::Metadata, _impl_.goldinfo_),
  ~0u,
  ~0u,
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::ShuffleInfo::ReorderInfo_BinaryInfo)},
  { 8, 20, -1, sizeof(::ShuffleInfo::ReorderInfo_LayoutInfo)},
  { 26, 42, -1, sizeof(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple)},
  { 52, -1, -1, sizeof(::ShuffleInfo::ReorderInfo_FixupInfo)},
  { 66, 84, -1, sizeof(::ShuffleInfo::ReorderInfo_CCRLimitation)},
  { 96, 106, -1, sizeof(::ShuffleInfo::ReorderInfo)},
  { 110, 118, -1, sizeof(::ShuffleInfo::Metadata_InstInfo)},
  { 120, 130, -1, sizeof(::ShuffleInfo::Metadata_FunInfo)},
  { 134, 150, -1, sizeof(::ShuffleInfo::Metadata_FixupInfo)},
  { 160, 179, -1, sizeof(::ShuffleInfo::Metadata_GoldInfo)},
  { 192, 202, -1, sizeof(::ShuffleInfo::Metadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ShuffleInfo::_ReorderInfo_BinaryInfo_default_instance_._instance,
  &::ShuffleInfo::_ReorderInfo_LayoutInfo_default_instance_._instance,
  &::ShuffleInfo::_ReorderInfo_FixupInfo_FixupTuple_default_instance_._instance,
  &::ShuffleInfo::_ReorderInfo_FixupInfo_default_instance_._instance,
  &::ShuffleInfo::_ReorderInfo_CCRLimitation_default_instance_._instance,
  &::ShuffleInfo::_ReorderInfo_default_instance_._instance,
  &::ShuffleInfo::_Metadata_InstInfo_default_instance_._instance,
  &::ShuffleInfo::_Metadata_FunInfo_default_instance_._instance,
  &::ShuffleInfo::_Metadata_FixupInfo_default_instance_._instance,
  &::ShuffleInfo::_Metadata_GoldInfo_default_instance_._instance,
  &::ShuffleInfo::_Metadata_default_instance_._instance,
};

const char descriptor_table_protodef_shuffleInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021shuffleInfo.proto\022\013ShuffleInfo\"\316\n\n\013Reo"
  "rderInfo\0220\n\003bin\030\001 \001(\0132#.ShuffleInfo.Reor"
  "derInfo.BinaryInfo\0223\n\006layout\030\002 \003(\0132#.Shu"
  "ffleInfo.ReorderInfo.LayoutInfo\0221\n\005fixup"
  "\030\003 \003(\0132\".ShuffleInfo.ReorderInfo.FixupIn"
  "fo\022>\n\016ccr_limitation\030\004 \001(\0132&.ShuffleInfo"
  ".ReorderInfo.CCRLimitation\032%\n\nBinaryInfo"
  "\022\027\n\017rand_obj_offset\030\001 \001(\004\032t\n\nLayoutInfo\022"
  "\017\n\007bb_size\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\026\n\016bb_fal"
  "lthrough\030\003 \001(\010\022\017\n\007section\030\004 \001(\r\022\020\n\010src_t"
  "ype\030\005 \001(\r\022\014\n\004info\030\006 \001(\t\032\277\005\n\tFixupInfo\022;\n"
  "\004text\030\001 \003(\0132-.ShuffleInfo.ReorderInfo.Fi"
  "xupInfo.FixupTuple\022=\n\006rodata\030\002 \003(\0132-.Shu"
  "ffleInfo.ReorderInfo.FixupInfo.FixupTupl"
  "e\022;\n\004data\030\003 \003(\0132-.ShuffleInfo.ReorderInf"
  "o.FixupInfo.FixupTuple\022>\n\007datarel\030\004 \003(\0132"
  "-.ShuffleInfo.ReorderInfo.FixupInfo.Fixu"
  "pTuple\022@\n\tinitarray\030\005 \003(\0132-.ShuffleInfo."
  "ReorderInfo.FixupInfo.FixupTuple\022:\n\003got\030"
  "\006 \003(\0132-.ShuffleInfo.ReorderInfo.FixupInf"
  "o.FixupTuple\022;\n\004init\030\007 \003(\0132-.ShuffleInfo"
  ".ReorderInfo.FixupInfo.FixupTuple\022;\n\004fin"
  "i\030\010 \003(\0132-.ShuffleInfo.ReorderInfo.FixupI"
  "nfo.FixupTuple\032\300\001\n\nFixupTuple\022\016\n\006offset\030"
  "\001 \001(\004\022\014\n\004type\030\002 \001(\r\022\024\n\014base_bbl_sym\030\003 \001("
  "\004\022\024\n\014base_section\030\004 \001(\r\022\026\n\016target_bbl_sy"
  "m\030\005 \001(\004\022\026\n\016target_section\030\006 \001(\r\022\017\n\007secti"
  "on\030\007 \001(\r\022\013\n\003add\030\010 \001(\003\022\014\n\004step\030\t \001(\r\022\014\n\004i"
  "nfo\030\n \001(\t\032\205\002\n\rCCRLimitation\022\017\n\007all_obj\030\001"
  " \001(\004\022\022\n\nhybrid_obj\030\002 \001(\004\022\022\n\nstatic_got\030\003"
  " \001(\004\022\026\n\016silicon_errata\030\004 \001(\004\022\017\n\007tls_opt\030"
  "\005 \001(\004\022\017\n\007got_opt\030\006 \001(\004\022\022\n\ngot_target\030\007 \001"
  "(\004\022\026\n\016tls_got_target\030\010 \001(\004\022\022\n\nplt_target"
  "\030\t \001(\004\022\025\n\rmerged_target\030\n \001(\004\022\024\n\014ifunc_t"
  "arget\030\013 \001(\004\022\024\n\014missrandfile\030\014 \003(\t\"\267\006\n\010Me"
  "tadata\022+\n\004funs\030\001 \003(\0132\035.ShuffleInfo.Metad"
  "ata.FunInfo\022/\n\006fixups\030\002 \003(\0132\037.ShuffleInf"
  "o.Metadata.FixupInfo\0224\n\013otherfixups\030\003 \003("
  "\0132\037.ShuffleInfo.Metadata.FixupInfo\0220\n\010go"
  "ldinfo\030\004 \001(\0132\036.ShuffleInfo.Metadata.Gold"
  "Info\032(\n\010InstInfo\022\016\n\006offset\030\001 \002(\r\022\014\n\004size"
  "\030\002 \002(\r\032g\n\007FunInfo\022\017\n\007section\030\001 \002(\r\022\016\n\006of"
  "fset\030\002 \002(\r\022-\n\005insts\030\003 \003(\0132\036.ShuffleInfo."
  "Metadata.InstInfo\022\014\n\004info\030\004 \001(\t\032\277\001\n\tFixu"
  "pInfo\022\016\n\006offset\030\001 \002(\004\022\017\n\007section\030\002 \002(\r\022\014"
  "\n\004type\030\003 \002(\r\022\024\n\014base_bbl_sym\030\004 \002(\004\022\024\n\014ba"
  "se_section\030\005 \002(\r\022\026\n\016target_bbl_sym\030\006 \002(\004"
  "\022\026\n\016target_section\030\007 \002(\r\022\013\n\003add\030\010 \001(\003\022\014\n"
  "\004step\030\t \001(\r\022\014\n\004info\030\n \001(\t\032\217\002\n\010GoldInfo\022\017"
  "\n\007all_obj\030\001 \001(\004\022\022\n\nnorand_obj\030\002 \001(\004\022\022\n\ns"
  "tatic_got\030\003 \001(\004\022\026\n\016silicon_errata\030\004 \001(\004\022"
  "\017\n\007tls_opt\030\005 \001(\004\022\017\n\007got_opt\030\006 \001(\004\022\022\n\ngot"
  "_target\030\007 \001(\004\022\026\n\016tls_got_target\030\010 \001(\004\022\022\n"
  "\nplt_target\030\t \001(\004\022\025\n\rmerged_target\030\n \001(\004"
  "\022\024\n\014ifunc_target\030\013 \001(\004\022\024\n\014missrandfile\030\014"
  " \003(\t\022\r\n\005c_fun\030\r \001(\004"
  ;
static ::_pbi::once_flag descriptor_table_shuffleInfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_shuffleInfo_2eproto = {
    false, false, 2219, descriptor_table_protodef_shuffleInfo_2eproto,
    "shuffleInfo.proto",
    &descriptor_table_shuffleInfo_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_shuffleInfo_2eproto::offsets,
    file_level_metadata_shuffleInfo_2eproto, file_level_enum_descriptors_shuffleInfo_2eproto,
    file_level_service_descriptors_shuffleInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_shuffleInfo_2eproto_getter() {
  return &descriptor_table_shuffleInfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_shuffleInfo_2eproto(&descriptor_table_shuffleInfo_2eproto);
namespace ShuffleInfo {

// ===================================================================

class ReorderInfo_BinaryInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ReorderInfo_BinaryInfo>()._impl_._has_bits_);
  static void set_has_rand_obj_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReorderInfo_BinaryInfo::ReorderInfo_BinaryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.ReorderInfo.BinaryInfo)
}
ReorderInfo_BinaryInfo::ReorderInfo_BinaryInfo(const ReorderInfo_BinaryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReorderInfo_BinaryInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rand_obj_offset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rand_obj_offset_ = from._impl_.rand_obj_offset_;
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.BinaryInfo)
}

inline void ReorderInfo_BinaryInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rand_obj_offset_){uint64_t{0u}}
  };
}

ReorderInfo_BinaryInfo::~ReorderInfo_BinaryInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.BinaryInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReorderInfo_BinaryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReorderInfo_BinaryInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReorderInfo_BinaryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rand_obj_offset_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderInfo_BinaryInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 rand_obj_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rand_obj_offset(&has_bits);
          _impl_.rand_obj_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderInfo_BinaryInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 rand_obj_offset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rand_obj_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.BinaryInfo)
  return target;
}

size_t ReorderInfo_BinaryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 rand_obj_offset = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rand_obj_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderInfo_BinaryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReorderInfo_BinaryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderInfo_BinaryInfo::GetClassData() const { return &_class_data_; }


void ReorderInfo_BinaryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReorderInfo_BinaryInfo*>(&to_msg);
  auto& from = static_cast<const ReorderInfo_BinaryInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rand_obj_offset()) {
    _this->_internal_set_rand_obj_offset(from._internal_rand_obj_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderInfo_BinaryInfo::CopyFrom(const ReorderInfo_BinaryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_BinaryInfo::IsInitialized() const {
  return true;
}

void ReorderInfo_BinaryInfo::InternalSwap(ReorderInfo_BinaryInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.rand_obj_offset_, other->_impl_.rand_obj_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderInfo_BinaryInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[0]);
}

// ===================================================================

class ReorderInfo_LayoutInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ReorderInfo_LayoutInfo>()._impl_._has_bits_);
  static void set_has_bb_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bb_fallthrough(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_section(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_src_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReorderInfo_LayoutInfo::ReorderInfo_LayoutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.ReorderInfo.LayoutInfo)
}
ReorderInfo_LayoutInfo::ReorderInfo_LayoutInfo(const ReorderInfo_LayoutInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReorderInfo_LayoutInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){}
    , decltype(_impl_.bb_size_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.bb_fallthrough_){}
    , decltype(_impl_.section_){}
    , decltype(_impl_.src_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_info()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bb_size_, &from._impl_.bb_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.src_type_) -
    reinterpret_cast<char*>(&_impl_.bb_size_)) + sizeof(_impl_.src_type_));
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.LayoutInfo)
}

inline void ReorderInfo_LayoutInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){}
    , decltype(_impl_.bb_size_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.bb_fallthrough_){false}
    , decltype(_impl_.section_){0u}
    , decltype(_impl_.src_type_){0u}
  };
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReorderInfo_LayoutInfo::~ReorderInfo_LayoutInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.LayoutInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReorderInfo_LayoutInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.Destroy();
}

void ReorderInfo_LayoutInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReorderInfo_LayoutInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.info_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.bb_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.src_type_) -
        reinterpret_cast<char*>(&_impl_.bb_size_)) + sizeof(_impl_.src_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderInfo_LayoutInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 bb_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bb_size(&has_bits);
          _impl_.bb_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bb_fallthrough = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bb_fallthrough(&has_bits);
          _impl_.bb_fallthrough_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 section = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_section(&has_bits);
          _impl_.section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 src_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_src_type(&has_bits);
          _impl_.src_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ShuffleInfo.ReorderInfo.LayoutInfo.info");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderInfo_LayoutInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 bb_size = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bb_size(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // optional bool bb_fallthrough = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bb_fallthrough(), target);
  }

  // optional uint32 section = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_section(), target);
  }

  // optional uint32 src_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_src_type(), target);
  }

  // optional string info = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.ReorderInfo.LayoutInfo.info");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.LayoutInfo)
  return target;
}

size_t ReorderInfo_LayoutInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string info = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_info());
    }

    // optional uint32 bb_size = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bb_size());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional bool bb_fallthrough = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 section = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_section());
    }

    // optional uint32 src_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderInfo_LayoutInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReorderInfo_LayoutInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderInfo_LayoutInfo::GetClassData() const { return &_class_data_; }


void ReorderInfo_LayoutInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReorderInfo_LayoutInfo*>(&to_msg);
  auto& from = static_cast<const ReorderInfo_LayoutInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_info(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bb_size_ = from._impl_.bb_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bb_fallthrough_ = from._impl_.bb_fallthrough_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.section_ = from._impl_.section_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.src_type_ = from._impl_.src_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderInfo_LayoutInfo::CopyFrom(const ReorderInfo_LayoutInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_LayoutInfo::IsInitialized() const {
  return true;
}

void ReorderInfo_LayoutInfo::InternalSwap(ReorderInfo_LayoutInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReorderInfo_LayoutInfo, _impl_.src_type_)
      + sizeof(ReorderInfo_LayoutInfo::_impl_.src_type_)
      - PROTOBUF_FIELD_OFFSET(ReorderInfo_LayoutInfo, _impl_.bb_size_)>(
          reinterpret_cast<char*>(&_impl_.bb_size_),
          reinterpret_cast<char*>(&other->_impl_.bb_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderInfo_LayoutInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[1]);
}

// ===================================================================

class ReorderInfo_FixupInfo_FixupTuple::_Internal {
 public:
  using HasBits = decltype(std::declval<ReorderInfo_FixupInfo_FixupTuple>()._impl_._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_base_bbl_sym(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_base_section(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target_bbl_sym(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_target_section(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_section(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_add(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReorderInfo_FixupInfo_FixupTuple::ReorderInfo_FixupInfo_FixupTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
}
ReorderInfo_FixupInfo_FixupTuple::ReorderInfo_FixupInfo_FixupTuple(const ReorderInfo_FixupInfo_FixupTuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReorderInfo_FixupInfo_FixupTuple* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.base_bbl_sym_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.base_section_){}
    , decltype(_impl_.target_bbl_sym_){}
    , decltype(_impl_.target_section_){}
    , decltype(_impl_.section_){}
    , decltype(_impl_.add_){}
    , decltype(_impl_.step_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_info()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.step_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.step_));
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
}

inline void ReorderInfo_FixupInfo_FixupTuple::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.base_bbl_sym_){uint64_t{0u}}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.base_section_){0u}
    , decltype(_impl_.target_bbl_sym_){uint64_t{0u}}
    , decltype(_impl_.target_section_){0u}
    , decltype(_impl_.section_){0u}
    , decltype(_impl_.add_){int64_t{0}}
    , decltype(_impl_.step_){0u}
  };
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReorderInfo_FixupInfo_FixupTuple::~ReorderInfo_FixupInfo_FixupTuple() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReorderInfo_FixupInfo_FixupTuple::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.Destroy();
}

void ReorderInfo_FixupInfo_FixupTuple::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReorderInfo_FixupInfo_FixupTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.info_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.section_) -
        reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.section_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.add_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.step_) -
        reinterpret_cast<char*>(&_impl_.add_)) + sizeof(_impl_.step_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderInfo_FixupInfo_FixupTuple::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 base_bbl_sym = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_base_bbl_sym(&has_bits);
          _impl_.base_bbl_sym_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 base_section = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_base_section(&has_bits);
          _impl_.base_section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 target_bbl_sym = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_target_bbl_sym(&has_bits);
          _impl_.target_bbl_sym_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_section = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_target_section(&has_bits);
          _impl_.target_section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 section = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_section(&has_bits);
          _impl_.section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 add = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_add(&has_bits);
          _impl_.add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 step = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_step(&has_bits);
          _impl_.step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.info");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderInfo_FixupInfo_FixupTuple::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 offset = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_offset(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // optional uint64 base_bbl_sym = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_base_bbl_sym(), target);
  }

  // optional uint32 base_section = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_base_section(), target);
  }

  // optional uint64 target_bbl_sym = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_target_bbl_sym(), target);
  }

  // optional uint32 target_section = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_target_section(), target);
  }

  // optional uint32 section = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_section(), target);
  }

  // optional int64 add = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_add(), target);
  }

  // optional uint32 step = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_step(), target);
  }

  // optional string info = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.info");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  return target;
}

size_t ReorderInfo_FixupInfo_FixupTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string info = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_info());
    }

    // optional uint64 offset = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
    }

    // optional uint64 base_bbl_sym = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_base_bbl_sym());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional uint32 base_section = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_section());
    }

    // optional uint64 target_bbl_sym = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_target_bbl_sym());
    }

    // optional uint32 target_section = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_section());
    }

    // optional uint32 section = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_section());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 add = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_add());
    }

    // optional uint32 step = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_step());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderInfo_FixupInfo_FixupTuple::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReorderInfo_FixupInfo_FixupTuple::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderInfo_FixupInfo_FixupTuple::GetClassData() const { return &_class_data_; }


void ReorderInfo_FixupInfo_FixupTuple::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReorderInfo_FixupInfo_FixupTuple*>(&to_msg);
  auto& from = static_cast<const ReorderInfo_FixupInfo_FixupTuple&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_info(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.base_bbl_sym_ = from._impl_.base_bbl_sym_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.base_section_ = from._impl_.base_section_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.target_bbl_sym_ = from._impl_.target_bbl_sym_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.target_section_ = from._impl_.target_section_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.section_ = from._impl_.section_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.add_ = from._impl_.add_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.step_ = from._impl_.step_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderInfo_FixupInfo_FixupTuple::CopyFrom(const ReorderInfo_FixupInfo_FixupTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_FixupInfo_FixupTuple::IsInitialized() const {
  return true;
}

void ReorderInfo_FixupInfo_FixupTuple::InternalSwap(ReorderInfo_FixupInfo_FixupTuple* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, _impl_.step_)
      + sizeof(ReorderInfo_FixupInfo_FixupTuple::_impl_.step_)
      - PROTOBUF_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderInfo_FixupInfo_FixupTuple::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[2]);
}

// ===================================================================

class ReorderInfo_FixupInfo::_Internal {
 public:
};

ReorderInfo_FixupInfo::ReorderInfo_FixupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.ReorderInfo.FixupInfo)
}
ReorderInfo_FixupInfo::ReorderInfo_FixupInfo(const ReorderInfo_FixupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReorderInfo_FixupInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){from._impl_.text_}
    , decltype(_impl_.rodata_){from._impl_.rodata_}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.datarel_){from._impl_.datarel_}
    , decltype(_impl_.initarray_){from._impl_.initarray_}
    , decltype(_impl_.got_){from._impl_.got_}
    , decltype(_impl_.init_){from._impl_.init_}
    , decltype(_impl_.fini_){from._impl_.fini_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.FixupInfo)
}

inline void ReorderInfo_FixupInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){arena}
    , decltype(_impl_.rodata_){arena}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.datarel_){arena}
    , decltype(_impl_.initarray_){arena}
    , decltype(_impl_.got_){arena}
    , decltype(_impl_.init_){arena}
    , decltype(_impl_.fini_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReorderInfo_FixupInfo::~ReorderInfo_FixupInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.FixupInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReorderInfo_FixupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.~RepeatedPtrField();
  _impl_.rodata_.~RepeatedPtrField();
  _impl_.data_.~RepeatedPtrField();
  _impl_.datarel_.~RepeatedPtrField();
  _impl_.initarray_.~RepeatedPtrField();
  _impl_.got_.~RepeatedPtrField();
  _impl_.init_.~RepeatedPtrField();
  _impl_.fini_.~RepeatedPtrField();
}

void ReorderInfo_FixupInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReorderInfo_FixupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.FixupInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.Clear();
  _impl_.rodata_.Clear();
  _impl_.data_.Clear();
  _impl_.datarel_.Clear();
  _impl_.initarray_.Clear();
  _impl_.got_.Clear();
  _impl_.init_.Clear();
  _impl_.fini_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderInfo_FixupInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rodata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datarel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_initarray(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple got = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_got(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple init = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_init(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple fini = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fini(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderInfo_FixupInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.FixupInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_text_size()); i < n; i++) {
    const auto& repfield = this->_internal_text(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rodata_size()); i < n; i++) {
    const auto& repfield = this->_internal_rodata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datarel_size()); i < n; i++) {
    const auto& repfield = this->_internal_datarel(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_initarray_size()); i < n; i++) {
    const auto& repfield = this->_internal_initarray(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple got = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_got_size()); i < n; i++) {
    const auto& repfield = this->_internal_got(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple init = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_init_size()); i < n; i++) {
    const auto& repfield = this->_internal_init(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple fini = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fini_size()); i < n; i++) {
    const auto& repfield = this->_internal_fini(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.FixupInfo)
  return target;
}

size_t ReorderInfo_FixupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.FixupInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
  total_size += 1UL * this->_internal_text_size();
  for (const auto& msg : this->_impl_.text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
  total_size += 1UL * this->_internal_rodata_size();
  for (const auto& msg : this->_impl_.rodata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
  total_size += 1UL * this->_internal_datarel_size();
  for (const auto& msg : this->_impl_.datarel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
  total_size += 1UL * this->_internal_initarray_size();
  for (const auto& msg : this->_impl_.initarray_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple got = 6;
  total_size += 1UL * this->_internal_got_size();
  for (const auto& msg : this->_impl_.got_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple init = 7;
  total_size += 1UL * this->_internal_init_size();
  for (const auto& msg : this->_impl_.init_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple fini = 8;
  total_size += 1UL * this->_internal_fini_size();
  for (const auto& msg : this->_impl_.fini_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderInfo_FixupInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReorderInfo_FixupInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderInfo_FixupInfo::GetClassData() const { return &_class_data_; }


void ReorderInfo_FixupInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReorderInfo_FixupInfo*>(&to_msg);
  auto& from = static_cast<const ReorderInfo_FixupInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.FixupInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.text_.MergeFrom(from._impl_.text_);
  _this->_impl_.rodata_.MergeFrom(from._impl_.rodata_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.datarel_.MergeFrom(from._impl_.datarel_);
  _this->_impl_.initarray_.MergeFrom(from._impl_.initarray_);
  _this->_impl_.got_.MergeFrom(from._impl_.got_);
  _this->_impl_.init_.MergeFrom(from._impl_.init_);
  _this->_impl_.fini_.MergeFrom(from._impl_.fini_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderInfo_FixupInfo::CopyFrom(const ReorderInfo_FixupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.FixupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_FixupInfo::IsInitialized() const {
  return true;
}

void ReorderInfo_FixupInfo::InternalSwap(ReorderInfo_FixupInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.text_.InternalSwap(&other->_impl_.text_);
  _impl_.rodata_.InternalSwap(&other->_impl_.rodata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.datarel_.InternalSwap(&other->_impl_.datarel_);
  _impl_.initarray_.InternalSwap(&other->_impl_.initarray_);
  _impl_.got_.InternalSwap(&other->_impl_.got_);
  _impl_.init_.InternalSwap(&other->_impl_.init_);
  _impl_.fini_.InternalSwap(&other->_impl_.fini_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderInfo_FixupInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[3]);
}

// ===================================================================

class ReorderInfo_CCRLimitation::_Internal {
 public:
  using HasBits = decltype(std::declval<ReorderInfo_CCRLimitation>()._impl_._has_bits_);
  static void set_has_all_obj(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hybrid_obj(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_static_got(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_silicon_errata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tls_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_got_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_got_target(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tls_got_target(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_plt_target(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_merged_target(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ifunc_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

ReorderInfo_CCRLimitation::ReorderInfo_CCRLimitation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.ReorderInfo.CCRLimitation)
}
ReorderInfo_CCRLimitation::ReorderInfo_CCRLimitation(const ReorderInfo_CCRLimitation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReorderInfo_CCRLimitation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.missrandfile_){from._impl_.missrandfile_}
    , decltype(_impl_.all_obj_){}
    , decltype(_impl_.hybrid_obj_){}
    , decltype(_impl_.static_got_){}
    , decltype(_impl_.silicon_errata_){}
    , decltype(_impl_.tls_opt_){}
    , decltype(_impl_.got_opt_){}
    , decltype(_impl_.got_target_){}
    , decltype(_impl_.tls_got_target_){}
    , decltype(_impl_.plt_target_){}
    , decltype(_impl_.merged_target_){}
    , decltype(_impl_.ifunc_target_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.all_obj_, &from._impl_.all_obj_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ifunc_target_) -
    reinterpret_cast<char*>(&_impl_.all_obj_)) + sizeof(_impl_.ifunc_target_));
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.CCRLimitation)
}

inline void ReorderInfo_CCRLimitation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.missrandfile_){arena}
    , decltype(_impl_.all_obj_){uint64_t{0u}}
    , decltype(_impl_.hybrid_obj_){uint64_t{0u}}
    , decltype(_impl_.static_got_){uint64_t{0u}}
    , decltype(_impl_.silicon_errata_){uint64_t{0u}}
    , decltype(_impl_.tls_opt_){uint64_t{0u}}
    , decltype(_impl_.got_opt_){uint64_t{0u}}
    , decltype(_impl_.got_target_){uint64_t{0u}}
    , decltype(_impl_.tls_got_target_){uint64_t{0u}}
    , decltype(_impl_.plt_target_){uint64_t{0u}}
    , decltype(_impl_.merged_target_){uint64_t{0u}}
    , decltype(_impl_.ifunc_target_){uint64_t{0u}}
  };
}

ReorderInfo_CCRLimitation::~ReorderInfo_CCRLimitation() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.CCRLimitation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReorderInfo_CCRLimitation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.missrandfile_.~RepeatedPtrField();
}

void ReorderInfo_CCRLimitation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReorderInfo_CCRLimitation::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.CCRLimitation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.missrandfile_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.all_obj_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tls_got_target_) -
        reinterpret_cast<char*>(&_impl_.all_obj_)) + sizeof(_impl_.tls_got_target_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.plt_target_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ifunc_target_) -
        reinterpret_cast<char*>(&_impl_.plt_target_)) + sizeof(_impl_.ifunc_target_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderInfo_CCRLimitation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 all_obj = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_all_obj(&has_bits);
          _impl_.all_obj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 hybrid_obj = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hybrid_obj(&has_bits);
          _impl_.hybrid_obj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 static_got = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_static_got(&has_bits);
          _impl_.static_got_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 silicon_errata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_silicon_errata(&has_bits);
          _impl_.silicon_errata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tls_opt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tls_opt(&has_bits);
          _impl_.tls_opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 got_opt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_got_opt(&has_bits);
          _impl_.got_opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 got_target = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_got_target(&has_bits);
          _impl_.got_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tls_got_target = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tls_got_target(&has_bits);
          _impl_.tls_got_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 plt_target = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_plt_target(&has_bits);
          _impl_.plt_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 merged_target = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_merged_target(&has_bits);
          _impl_.merged_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ifunc_target = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_ifunc_target(&has_bits);
          _impl_.ifunc_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string missrandfile = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_missrandfile();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderInfo_CCRLimitation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.CCRLimitation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 all_obj = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_all_obj(), target);
  }

  // optional uint64 hybrid_obj = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_hybrid_obj(), target);
  }

  // optional uint64 static_got = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_static_got(), target);
  }

  // optional uint64 silicon_errata = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_silicon_errata(), target);
  }

  // optional uint64 tls_opt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_tls_opt(), target);
  }

  // optional uint64 got_opt = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_got_opt(), target);
  }

  // optional uint64 got_target = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_got_target(), target);
  }

  // optional uint64 tls_got_target = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tls_got_target(), target);
  }

  // optional uint64 plt_target = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_plt_target(), target);
  }

  // optional uint64 merged_target = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_merged_target(), target);
  }

  // optional uint64 ifunc_target = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_ifunc_target(), target);
  }

  // repeated string missrandfile = 12;
  for (int i = 0, n = this->_internal_missrandfile_size(); i < n; i++) {
    const auto& s = this->_internal_missrandfile(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.CCRLimitation)
  return target;
}

size_t ReorderInfo_CCRLimitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.CCRLimitation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string missrandfile = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.missrandfile_.size());
  for (int i = 0, n = _impl_.missrandfile_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.missrandfile_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 all_obj = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_all_obj());
    }

    // optional uint64 hybrid_obj = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hybrid_obj());
    }

    // optional uint64 static_got = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_static_got());
    }

    // optional uint64 silicon_errata = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_silicon_errata());
    }

    // optional uint64 tls_opt = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tls_opt());
    }

    // optional uint64 got_opt = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_got_opt());
    }

    // optional uint64 got_target = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_got_target());
    }

    // optional uint64 tls_got_target = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tls_got_target());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint64 plt_target = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_plt_target());
    }

    // optional uint64 merged_target = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_merged_target());
    }

    // optional uint64 ifunc_target = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ifunc_target());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderInfo_CCRLimitation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReorderInfo_CCRLimitation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderInfo_CCRLimitation::GetClassData() const { return &_class_data_; }


void ReorderInfo_CCRLimitation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReorderInfo_CCRLimitation*>(&to_msg);
  auto& from = static_cast<const ReorderInfo_CCRLimitation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.CCRLimitation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.missrandfile_.MergeFrom(from._impl_.missrandfile_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.all_obj_ = from._impl_.all_obj_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hybrid_obj_ = from._impl_.hybrid_obj_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.static_got_ = from._impl_.static_got_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.silicon_errata_ = from._impl_.silicon_errata_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tls_opt_ = from._impl_.tls_opt_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.got_opt_ = from._impl_.got_opt_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.got_target_ = from._impl_.got_target_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tls_got_target_ = from._impl_.tls_got_target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.plt_target_ = from._impl_.plt_target_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.merged_target_ = from._impl_.merged_target_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ifunc_target_ = from._impl_.ifunc_target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderInfo_CCRLimitation::CopyFrom(const ReorderInfo_CCRLimitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.CCRLimitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_CCRLimitation::IsInitialized() const {
  return true;
}

void ReorderInfo_CCRLimitation::InternalSwap(ReorderInfo_CCRLimitation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.missrandfile_.InternalSwap(&other->_impl_.missrandfile_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReorderInfo_CCRLimitation, _impl_.ifunc_target_)
      + sizeof(ReorderInfo_CCRLimitation::_impl_.ifunc_target_)
      - PROTOBUF_FIELD_OFFSET(ReorderInfo_CCRLimitation, _impl_.all_obj_)>(
          reinterpret_cast<char*>(&_impl_.all_obj_),
          reinterpret_cast<char*>(&other->_impl_.all_obj_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderInfo_CCRLimitation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[4]);
}

// ===================================================================

class ReorderInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ReorderInfo>()._impl_._has_bits_);
  static const ::ShuffleInfo::ReorderInfo_BinaryInfo& bin(const ReorderInfo* msg);
  static void set_has_bin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ShuffleInfo::ReorderInfo_CCRLimitation& ccr_limitation(const ReorderInfo* msg);
  static void set_has_ccr_limitation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ShuffleInfo::ReorderInfo_BinaryInfo&
ReorderInfo::_Internal::bin(const ReorderInfo* msg) {
  return *msg->_impl_.bin_;
}
const ::ShuffleInfo::ReorderInfo_CCRLimitation&
ReorderInfo::_Internal::ccr_limitation(const ReorderInfo* msg) {
  return *msg->_impl_.ccr_limitation_;
}
ReorderInfo::ReorderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.ReorderInfo)
}
ReorderInfo::ReorderInfo(const ReorderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReorderInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layout_){from._impl_.layout_}
    , decltype(_impl_.fixup_){from._impl_.fixup_}
    , decltype(_impl_.bin_){nullptr}
    , decltype(_impl_.ccr_limitation_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bin()) {
    _this->_impl_.bin_ = new ::ShuffleInfo::ReorderInfo_BinaryInfo(*from._impl_.bin_);
  }
  if (from._internal_has_ccr_limitation()) {
    _this->_impl_.ccr_limitation_ = new ::ShuffleInfo::ReorderInfo_CCRLimitation(*from._impl_.ccr_limitation_);
  }
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo)
}

inline void ReorderInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layout_){arena}
    , decltype(_impl_.fixup_){arena}
    , decltype(_impl_.bin_){nullptr}
    , decltype(_impl_.ccr_limitation_){nullptr}
  };
}

ReorderInfo::~ReorderInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReorderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layout_.~RepeatedPtrField();
  _impl_.fixup_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.bin_;
  if (this != internal_default_instance()) delete _impl_.ccr_limitation_;
}

void ReorderInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReorderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layout_.Clear();
  _impl_.fixup_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.bin_ != nullptr);
      _impl_.bin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ccr_limitation_ != nullptr);
      _impl_.ccr_limitation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layout(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fixup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .ShuffleInfo.ReorderInfo.CCRLimitation ccr_limitation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ccr_limitation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bin(this),
        _Internal::bin(this).GetCachedSize(), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layout_size()); i < n; i++) {
    const auto& repfield = this->_internal_layout(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fixup_size()); i < n; i++) {
    const auto& repfield = this->_internal_fixup(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .ShuffleInfo.ReorderInfo.CCRLimitation ccr_limitation = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ccr_limitation(this),
        _Internal::ccr_limitation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo)
  return target;
}

size_t ReorderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
  total_size += 1UL * this->_internal_layout_size();
  for (const auto& msg : this->_impl_.layout_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
  total_size += 1UL * this->_internal_fixup_size();
  for (const auto& msg : this->_impl_.fixup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bin_);
    }

    // optional .ShuffleInfo.ReorderInfo.CCRLimitation ccr_limitation = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ccr_limitation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReorderInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderInfo::GetClassData() const { return &_class_data_; }


void ReorderInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReorderInfo*>(&to_msg);
  auto& from = static_cast<const ReorderInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.layout_.MergeFrom(from._impl_.layout_);
  _this->_impl_.fixup_.MergeFrom(from._impl_.fixup_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_bin()->::ShuffleInfo::ReorderInfo_BinaryInfo::MergeFrom(
          from._internal_bin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ccr_limitation()->::ShuffleInfo::ReorderInfo_CCRLimitation::MergeFrom(
          from._internal_ccr_limitation());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderInfo::CopyFrom(const ReorderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo::IsInitialized() const {
  return true;
}

void ReorderInfo::InternalSwap(ReorderInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.layout_.InternalSwap(&other->_impl_.layout_);
  _impl_.fixup_.InternalSwap(&other->_impl_.fixup_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReorderInfo, _impl_.ccr_limitation_)
      + sizeof(ReorderInfo::_impl_.ccr_limitation_)
      - PROTOBUF_FIELD_OFFSET(ReorderInfo, _impl_.bin_)>(
          reinterpret_cast<char*>(&_impl_.bin_),
          reinterpret_cast<char*>(&other->_impl_.bin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[5]);
}

// ===================================================================

class Metadata_InstInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<Metadata_InstInfo>()._impl_._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Metadata_InstInfo::Metadata_InstInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.Metadata.InstInfo)
}
Metadata_InstInfo::Metadata_InstInfo(const Metadata_InstInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metadata_InstInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.Metadata.InstInfo)
}

inline void Metadata_InstInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.offset_){0u}
    , decltype(_impl_.size_){0u}
  };
}

Metadata_InstInfo::~Metadata_InstInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.Metadata.InstInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metadata_InstInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Metadata_InstInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metadata_InstInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.Metadata.InstInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.size_) -
        reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata_InstInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metadata_InstInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.Metadata.InstInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 offset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_offset(), target);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.Metadata.InstInfo)
  return target;
}

size_t Metadata_InstInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ShuffleInfo.Metadata.InstInfo)
  size_t total_size = 0;

  if (_internal_has_offset()) {
    // required uint32 offset = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  if (_internal_has_size()) {
    // required uint32 size = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return total_size;
}
size_t Metadata_InstInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.Metadata.InstInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 offset = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());

    // required uint32 size = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata_InstInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metadata_InstInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata_InstInfo::GetClassData() const { return &_class_data_; }


void Metadata_InstInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metadata_InstInfo*>(&to_msg);
  auto& from = static_cast<const Metadata_InstInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.Metadata.InstInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata_InstInfo::CopyFrom(const Metadata_InstInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.Metadata.InstInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata_InstInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Metadata_InstInfo::InternalSwap(Metadata_InstInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metadata_InstInfo, _impl_.size_)
      + sizeof(Metadata_InstInfo::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(Metadata_InstInfo, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata_InstInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[6]);
}

// ===================================================================

class Metadata_FunInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<Metadata_FunInfo>()._impl_._has_bits_);
  static void set_has_section(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

Metadata_FunInfo::Metadata_FunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.Metadata.FunInfo)
}
Metadata_FunInfo::Metadata_FunInfo(const Metadata_FunInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metadata_FunInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.insts_){from._impl_.insts_}
    , decltype(_impl_.info_){}
    , decltype(_impl_.section_){}
    , decltype(_impl_.offset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_info()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.section_, &from._impl_.section_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.section_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.Metadata.FunInfo)
}

inline void Metadata_FunInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.insts_){arena}
    , decltype(_impl_.info_){}
    , decltype(_impl_.section_){0u}
    , decltype(_impl_.offset_){0u}
  };
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Metadata_FunInfo::~Metadata_FunInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.Metadata.FunInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metadata_FunInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.insts_.~RepeatedPtrField();
  _impl_.info_.Destroy();
}

void Metadata_FunInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metadata_FunInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.Metadata.FunInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.insts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.info_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.section_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.offset_) -
        reinterpret_cast<char*>(&_impl_.section_)) + sizeof(_impl_.offset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata_FunInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 section = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_section(&has_bits);
          _impl_.section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.Metadata.InstInfo insts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ShuffleInfo.Metadata.FunInfo.info");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metadata_FunInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.Metadata.FunInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 section = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_section(), target);
  }

  // required uint32 offset = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // repeated .ShuffleInfo.Metadata.InstInfo insts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_insts_size()); i < n; i++) {
    const auto& repfield = this->_internal_insts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string info = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.Metadata.FunInfo.info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.Metadata.FunInfo)
  return target;
}

size_t Metadata_FunInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ShuffleInfo.Metadata.FunInfo)
  size_t total_size = 0;

  if (_internal_has_section()) {
    // required uint32 section = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_section());
  }

  if (_internal_has_offset()) {
    // required uint32 offset = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  return total_size;
}
size_t Metadata_FunInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.Metadata.FunInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 section = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_section());

    // required uint32 offset = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ShuffleInfo.Metadata.InstInfo insts = 3;
  total_size += 1UL * this->_internal_insts_size();
  for (const auto& msg : this->_impl_.insts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string info = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata_FunInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metadata_FunInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata_FunInfo::GetClassData() const { return &_class_data_; }


void Metadata_FunInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metadata_FunInfo*>(&to_msg);
  auto& from = static_cast<const Metadata_FunInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.Metadata.FunInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.insts_.MergeFrom(from._impl_.insts_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_info(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.section_ = from._impl_.section_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata_FunInfo::CopyFrom(const Metadata_FunInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.Metadata.FunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata_FunInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.insts_))
    return false;
  return true;
}

void Metadata_FunInfo::InternalSwap(Metadata_FunInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.insts_.InternalSwap(&other->_impl_.insts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metadata_FunInfo, _impl_.offset_)
      + sizeof(Metadata_FunInfo::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(Metadata_FunInfo, _impl_.section_)>(
          reinterpret_cast<char*>(&_impl_.section_),
          reinterpret_cast<char*>(&other->_impl_.section_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata_FunInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[7]);
}

// ===================================================================

class Metadata_FixupInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<Metadata_FixupInfo>()._impl_._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_section(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_base_bbl_sym(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_base_section(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_target_bbl_sym(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_target_section(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_add(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000fe) ^ 0x000000fe) != 0;
  }
};

Metadata_FixupInfo::Metadata_FixupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.Metadata.FixupInfo)
}
Metadata_FixupInfo::Metadata_FixupInfo(const Metadata_FixupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metadata_FixupInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.section_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.base_bbl_sym_){}
    , decltype(_impl_.target_bbl_sym_){}
    , decltype(_impl_.base_section_){}
    , decltype(_impl_.target_section_){}
    , decltype(_impl_.add_){}
    , decltype(_impl_.step_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_info()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.step_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.step_));
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.Metadata.FixupInfo)
}

inline void Metadata_FixupInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.section_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.base_bbl_sym_){uint64_t{0u}}
    , decltype(_impl_.target_bbl_sym_){uint64_t{0u}}
    , decltype(_impl_.base_section_){0u}
    , decltype(_impl_.target_section_){0u}
    , decltype(_impl_.add_){int64_t{0}}
    , decltype(_impl_.step_){0u}
  };
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Metadata_FixupInfo::~Metadata_FixupInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.Metadata.FixupInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metadata_FixupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.Destroy();
}

void Metadata_FixupInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metadata_FixupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.Metadata.FixupInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.info_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.target_section_) -
        reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.target_section_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.add_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.step_) -
        reinterpret_cast<char*>(&_impl_.add_)) + sizeof(_impl_.step_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata_FixupInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 section = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_section(&has_bits);
          _impl_.section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 base_bbl_sym = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_base_bbl_sym(&has_bits);
          _impl_.base_bbl_sym_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 base_section = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_base_section(&has_bits);
          _impl_.base_section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 target_bbl_sym = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_target_bbl_sym(&has_bits);
          _impl_.target_bbl_sym_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 target_section = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_target_section(&has_bits);
          _impl_.target_section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 add = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_add(&has_bits);
          _impl_.add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 step = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_step(&has_bits);
          _impl_.step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ShuffleInfo.Metadata.FixupInfo.info");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metadata_FixupInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.Metadata.FixupInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 offset = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_offset(), target);
  }

  // required uint32 section = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_section(), target);
  }

  // required uint32 type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // required uint64 base_bbl_sym = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_base_bbl_sym(), target);
  }

  // required uint32 base_section = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_base_section(), target);
  }

  // required uint64 target_bbl_sym = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_target_bbl_sym(), target);
  }

  // required uint32 target_section = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_target_section(), target);
  }

  // optional int64 add = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_add(), target);
  }

  // optional uint32 step = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_step(), target);
  }

  // optional string info = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.Metadata.FixupInfo.info");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.Metadata.FixupInfo)
  return target;
}

size_t Metadata_FixupInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ShuffleInfo.Metadata.FixupInfo)
  size_t total_size = 0;

  if (_internal_has_offset()) {
    // required uint64 offset = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  if (_internal_has_section()) {
    // required uint32 section = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_section());
  }

  if (_internal_has_type()) {
    // required uint32 type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  if (_internal_has_base_bbl_sym()) {
    // required uint64 base_bbl_sym = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_base_bbl_sym());
  }

  if (_internal_has_target_bbl_sym()) {
    // required uint64 target_bbl_sym = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_target_bbl_sym());
  }

  if (_internal_has_base_section()) {
    // required uint32 base_section = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_section());
  }

  if (_internal_has_target_section()) {
    // required uint32 target_section = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_section());
  }

  return total_size;
}
size_t Metadata_FixupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.Metadata.FixupInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000fe) ^ 0x000000fe) == 0) {  // All required fields are present.
    // required uint64 offset = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());

    // required uint32 section = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_section());

    // required uint32 type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());

    // required uint64 base_bbl_sym = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_base_bbl_sym());

    // required uint64 target_bbl_sym = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_target_bbl_sym());

    // required uint32 base_section = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_section());

    // required uint32 target_section = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_section());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string info = 10;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  if (cached_has_bits & 0x00000300u) {
    // optional int64 add = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_add());
    }

    // optional uint32 step = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_step());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata_FixupInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metadata_FixupInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata_FixupInfo::GetClassData() const { return &_class_data_; }


void Metadata_FixupInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metadata_FixupInfo*>(&to_msg);
  auto& from = static_cast<const Metadata_FixupInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.Metadata.FixupInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_info(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.section_ = from._impl_.section_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.base_bbl_sym_ = from._impl_.base_bbl_sym_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.target_bbl_sym_ = from._impl_.target_bbl_sym_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.base_section_ = from._impl_.base_section_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.target_section_ = from._impl_.target_section_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.add_ = from._impl_.add_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.step_ = from._impl_.step_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata_FixupInfo::CopyFrom(const Metadata_FixupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.Metadata.FixupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata_FixupInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Metadata_FixupInfo::InternalSwap(Metadata_FixupInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metadata_FixupInfo, _impl_.step_)
      + sizeof(Metadata_FixupInfo::_impl_.step_)
      - PROTOBUF_FIELD_OFFSET(Metadata_FixupInfo, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata_FixupInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[8]);
}

// ===================================================================

class Metadata_GoldInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<Metadata_GoldInfo>()._impl_._has_bits_);
  static void set_has_all_obj(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_norand_obj(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_static_got(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_silicon_errata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tls_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_got_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_got_target(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tls_got_target(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_plt_target(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_merged_target(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ifunc_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_c_fun(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

Metadata_GoldInfo::Metadata_GoldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.Metadata.GoldInfo)
}
Metadata_GoldInfo::Metadata_GoldInfo(const Metadata_GoldInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metadata_GoldInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.missrandfile_){from._impl_.missrandfile_}
    , decltype(_impl_.all_obj_){}
    , decltype(_impl_.norand_obj_){}
    , decltype(_impl_.static_got_){}
    , decltype(_impl_.silicon_errata_){}
    , decltype(_impl_.tls_opt_){}
    , decltype(_impl_.got_opt_){}
    , decltype(_impl_.got_target_){}
    , decltype(_impl_.tls_got_target_){}
    , decltype(_impl_.plt_target_){}
    , decltype(_impl_.merged_target_){}
    , decltype(_impl_.ifunc_target_){}
    , decltype(_impl_.c_fun_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.all_obj_, &from._impl_.all_obj_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.c_fun_) -
    reinterpret_cast<char*>(&_impl_.all_obj_)) + sizeof(_impl_.c_fun_));
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.Metadata.GoldInfo)
}

inline void Metadata_GoldInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.missrandfile_){arena}
    , decltype(_impl_.all_obj_){uint64_t{0u}}
    , decltype(_impl_.norand_obj_){uint64_t{0u}}
    , decltype(_impl_.static_got_){uint64_t{0u}}
    , decltype(_impl_.silicon_errata_){uint64_t{0u}}
    , decltype(_impl_.tls_opt_){uint64_t{0u}}
    , decltype(_impl_.got_opt_){uint64_t{0u}}
    , decltype(_impl_.got_target_){uint64_t{0u}}
    , decltype(_impl_.tls_got_target_){uint64_t{0u}}
    , decltype(_impl_.plt_target_){uint64_t{0u}}
    , decltype(_impl_.merged_target_){uint64_t{0u}}
    , decltype(_impl_.ifunc_target_){uint64_t{0u}}
    , decltype(_impl_.c_fun_){uint64_t{0u}}
  };
}

Metadata_GoldInfo::~Metadata_GoldInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.Metadata.GoldInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metadata_GoldInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.missrandfile_.~RepeatedPtrField();
}

void Metadata_GoldInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metadata_GoldInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.Metadata.GoldInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.missrandfile_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.all_obj_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tls_got_target_) -
        reinterpret_cast<char*>(&_impl_.all_obj_)) + sizeof(_impl_.tls_got_target_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.plt_target_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.c_fun_) -
        reinterpret_cast<char*>(&_impl_.plt_target_)) + sizeof(_impl_.c_fun_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata_GoldInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 all_obj = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_all_obj(&has_bits);
          _impl_.all_obj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 norand_obj = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_norand_obj(&has_bits);
          _impl_.norand_obj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 static_got = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_static_got(&has_bits);
          _impl_.static_got_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 silicon_errata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_silicon_errata(&has_bits);
          _impl_.silicon_errata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tls_opt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tls_opt(&has_bits);
          _impl_.tls_opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 got_opt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_got_opt(&has_bits);
          _impl_.got_opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 got_target = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_got_target(&has_bits);
          _impl_.got_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tls_got_target = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tls_got_target(&has_bits);
          _impl_.tls_got_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 plt_target = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_plt_target(&has_bits);
          _impl_.plt_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 merged_target = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_merged_target(&has_bits);
          _impl_.merged_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ifunc_target = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_ifunc_target(&has_bits);
          _impl_.ifunc_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string missrandfile = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_missrandfile();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "ShuffleInfo.Metadata.GoldInfo.missrandfile");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 c_fun = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_c_fun(&has_bits);
          _impl_.c_fun_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metadata_GoldInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.Metadata.GoldInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 all_obj = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_all_obj(), target);
  }

  // optional uint64 norand_obj = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_norand_obj(), target);
  }

  // optional uint64 static_got = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_static_got(), target);
  }

  // optional uint64 silicon_errata = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_silicon_errata(), target);
  }

  // optional uint64 tls_opt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_tls_opt(), target);
  }

  // optional uint64 got_opt = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_got_opt(), target);
  }

  // optional uint64 got_target = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_got_target(), target);
  }

  // optional uint64 tls_got_target = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tls_got_target(), target);
  }

  // optional uint64 plt_target = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_plt_target(), target);
  }

  // optional uint64 merged_target = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_merged_target(), target);
  }

  // optional uint64 ifunc_target = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_ifunc_target(), target);
  }

  // repeated string missrandfile = 12;
  for (int i = 0, n = this->_internal_missrandfile_size(); i < n; i++) {
    const auto& s = this->_internal_missrandfile(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.Metadata.GoldInfo.missrandfile");
    target = stream->WriteString(12, s, target);
  }

  // optional uint64 c_fun = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_c_fun(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.Metadata.GoldInfo)
  return target;
}

size_t Metadata_GoldInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.Metadata.GoldInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string missrandfile = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.missrandfile_.size());
  for (int i = 0, n = _impl_.missrandfile_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.missrandfile_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 all_obj = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_all_obj());
    }

    // optional uint64 norand_obj = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_norand_obj());
    }

    // optional uint64 static_got = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_static_got());
    }

    // optional uint64 silicon_errata = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_silicon_errata());
    }

    // optional uint64 tls_opt = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tls_opt());
    }

    // optional uint64 got_opt = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_got_opt());
    }

    // optional uint64 got_target = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_got_target());
    }

    // optional uint64 tls_got_target = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tls_got_target());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint64 plt_target = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_plt_target());
    }

    // optional uint64 merged_target = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_merged_target());
    }

    // optional uint64 ifunc_target = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ifunc_target());
    }

    // optional uint64 c_fun = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_c_fun());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata_GoldInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metadata_GoldInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata_GoldInfo::GetClassData() const { return &_class_data_; }


void Metadata_GoldInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metadata_GoldInfo*>(&to_msg);
  auto& from = static_cast<const Metadata_GoldInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.Metadata.GoldInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.missrandfile_.MergeFrom(from._impl_.missrandfile_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.all_obj_ = from._impl_.all_obj_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.norand_obj_ = from._impl_.norand_obj_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.static_got_ = from._impl_.static_got_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.silicon_errata_ = from._impl_.silicon_errata_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tls_opt_ = from._impl_.tls_opt_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.got_opt_ = from._impl_.got_opt_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.got_target_ = from._impl_.got_target_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tls_got_target_ = from._impl_.tls_got_target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.plt_target_ = from._impl_.plt_target_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.merged_target_ = from._impl_.merged_target_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ifunc_target_ = from._impl_.ifunc_target_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.c_fun_ = from._impl_.c_fun_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata_GoldInfo::CopyFrom(const Metadata_GoldInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.Metadata.GoldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata_GoldInfo::IsInitialized() const {
  return true;
}

void Metadata_GoldInfo::InternalSwap(Metadata_GoldInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.missrandfile_.InternalSwap(&other->_impl_.missrandfile_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metadata_GoldInfo, _impl_.c_fun_)
      + sizeof(Metadata_GoldInfo::_impl_.c_fun_)
      - PROTOBUF_FIELD_OFFSET(Metadata_GoldInfo, _impl_.all_obj_)>(
          reinterpret_cast<char*>(&_impl_.all_obj_),
          reinterpret_cast<char*>(&other->_impl_.all_obj_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata_GoldInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[9]);
}

// ===================================================================

class Metadata::_Internal {
 public:
  using HasBits = decltype(std::declval<Metadata>()._impl_._has_bits_);
  static const ::ShuffleInfo::Metadata_GoldInfo& goldinfo(const Metadata* msg);
  static void set_has_goldinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ShuffleInfo::Metadata_GoldInfo&
Metadata::_Internal::goldinfo(const Metadata* msg) {
  return *msg->_impl_.goldinfo_;
}
Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funs_){from._impl_.funs_}
    , decltype(_impl_.fixups_){from._impl_.fixups_}
    , decltype(_impl_.otherfixups_){from._impl_.otherfixups_}
    , decltype(_impl_.goldinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_goldinfo()) {
    _this->_impl_.goldinfo_ = new ::ShuffleInfo::Metadata_GoldInfo(*from._impl_.goldinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.Metadata)
}

inline void Metadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funs_){arena}
    , decltype(_impl_.fixups_){arena}
    , decltype(_impl_.otherfixups_){arena}
    , decltype(_impl_.goldinfo_){nullptr}
  };
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.Metadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.funs_.~RepeatedPtrField();
  _impl_.fixups_.~RepeatedPtrField();
  _impl_.otherfixups_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.goldinfo_;
}

void Metadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.Metadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.funs_.Clear();
  _impl_.fixups_.Clear();
  _impl_.otherfixups_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.goldinfo_ != nullptr);
    _impl_.goldinfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ShuffleInfo.Metadata.FunInfo funs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_funs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.Metadata.FixupInfo fixups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fixups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.Metadata.FixupInfo otherfixups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_otherfixups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .ShuffleInfo.Metadata.GoldInfo goldinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_goldinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.Metadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ShuffleInfo.Metadata.FunInfo funs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_funs_size()); i < n; i++) {
    const auto& repfield = this->_internal_funs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ShuffleInfo.Metadata.FixupInfo fixups = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fixups_size()); i < n; i++) {
    const auto& repfield = this->_internal_fixups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ShuffleInfo.Metadata.FixupInfo otherfixups = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_otherfixups_size()); i < n; i++) {
    const auto& repfield = this->_internal_otherfixups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ShuffleInfo.Metadata.GoldInfo goldinfo = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::goldinfo(this),
        _Internal::goldinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.Metadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ShuffleInfo.Metadata.FunInfo funs = 1;
  total_size += 1UL * this->_internal_funs_size();
  for (const auto& msg : this->_impl_.funs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.Metadata.FixupInfo fixups = 2;
  total_size += 1UL * this->_internal_fixups_size();
  for (const auto& msg : this->_impl_.fixups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.Metadata.FixupInfo otherfixups = 3;
  total_size += 1UL * this->_internal_otherfixups_size();
  for (const auto& msg : this->_impl_.otherfixups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ShuffleInfo.Metadata.GoldInfo goldinfo = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.goldinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }


void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metadata*>(&to_msg);
  auto& from = static_cast<const Metadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.Metadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.funs_.MergeFrom(from._impl_.funs_);
  _this->_impl_.fixups_.MergeFrom(from._impl_.fixups_);
  _this->_impl_.otherfixups_.MergeFrom(from._impl_.otherfixups_);
  if (from._internal_has_goldinfo()) {
    _this->_internal_mutable_goldinfo()->::ShuffleInfo::Metadata_GoldInfo::MergeFrom(
        from._internal_goldinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.funs_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.fixups_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.otherfixups_))
    return false;
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.funs_.InternalSwap(&other->_impl_.funs_);
  _impl_.fixups_.InternalSwap(&other->_impl_.fixups_);
  _impl_.otherfixups_.InternalSwap(&other->_impl_.otherfixups_);
  swap(_impl_.goldinfo_, other->_impl_.goldinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ShuffleInfo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ShuffleInfo::ReorderInfo_BinaryInfo*
Arena::CreateMaybeMessage< ::ShuffleInfo::ReorderInfo_BinaryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::ReorderInfo_BinaryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::ReorderInfo_LayoutInfo*
Arena::CreateMaybeMessage< ::ShuffleInfo::ReorderInfo_LayoutInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::ReorderInfo_LayoutInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple*
Arena::CreateMaybeMessage< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::ReorderInfo_FixupInfo*
Arena::CreateMaybeMessage< ::ShuffleInfo::ReorderInfo_FixupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::ReorderInfo_FixupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::ReorderInfo_CCRLimitation*
Arena::CreateMaybeMessage< ::ShuffleInfo::ReorderInfo_CCRLimitation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::ReorderInfo_CCRLimitation >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::ReorderInfo*
Arena::CreateMaybeMessage< ::ShuffleInfo::ReorderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::ReorderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::Metadata_InstInfo*
Arena::CreateMaybeMessage< ::ShuffleInfo::Metadata_InstInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::Metadata_InstInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::Metadata_FunInfo*
Arena::CreateMaybeMessage< ::ShuffleInfo::Metadata_FunInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::Metadata_FunInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::Metadata_FixupInfo*
Arena::CreateMaybeMessage< ::ShuffleInfo::Metadata_FixupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::Metadata_FixupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::Metadata_GoldInfo*
Arena::CreateMaybeMessage< ::ShuffleInfo::Metadata_GoldInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::Metadata_GoldInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::Metadata*
Arena::CreateMaybeMessage< ::ShuffleInfo::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::Metadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
