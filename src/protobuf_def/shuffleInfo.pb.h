// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shuffleInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shuffleInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shuffleInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shuffleInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shuffleInfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shuffleInfo_2eproto;
namespace ShuffleInfo {
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Metadata_FixupInfo;
struct Metadata_FixupInfoDefaultTypeInternal;
extern Metadata_FixupInfoDefaultTypeInternal _Metadata_FixupInfo_default_instance_;
class Metadata_FunInfo;
struct Metadata_FunInfoDefaultTypeInternal;
extern Metadata_FunInfoDefaultTypeInternal _Metadata_FunInfo_default_instance_;
class Metadata_GoldInfo;
struct Metadata_GoldInfoDefaultTypeInternal;
extern Metadata_GoldInfoDefaultTypeInternal _Metadata_GoldInfo_default_instance_;
class Metadata_InstInfo;
struct Metadata_InstInfoDefaultTypeInternal;
extern Metadata_InstInfoDefaultTypeInternal _Metadata_InstInfo_default_instance_;
class ReorderInfo;
struct ReorderInfoDefaultTypeInternal;
extern ReorderInfoDefaultTypeInternal _ReorderInfo_default_instance_;
class ReorderInfo_BinaryInfo;
struct ReorderInfo_BinaryInfoDefaultTypeInternal;
extern ReorderInfo_BinaryInfoDefaultTypeInternal _ReorderInfo_BinaryInfo_default_instance_;
class ReorderInfo_CCRLimitation;
struct ReorderInfo_CCRLimitationDefaultTypeInternal;
extern ReorderInfo_CCRLimitationDefaultTypeInternal _ReorderInfo_CCRLimitation_default_instance_;
class ReorderInfo_FixupInfo;
struct ReorderInfo_FixupInfoDefaultTypeInternal;
extern ReorderInfo_FixupInfoDefaultTypeInternal _ReorderInfo_FixupInfo_default_instance_;
class ReorderInfo_FixupInfo_FixupTuple;
struct ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal;
extern ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal _ReorderInfo_FixupInfo_FixupTuple_default_instance_;
class ReorderInfo_LayoutInfo;
struct ReorderInfo_LayoutInfoDefaultTypeInternal;
extern ReorderInfo_LayoutInfoDefaultTypeInternal _ReorderInfo_LayoutInfo_default_instance_;
}  // namespace ShuffleInfo
PROTOBUF_NAMESPACE_OPEN
template<> ::ShuffleInfo::Metadata* Arena::CreateMaybeMessage<::ShuffleInfo::Metadata>(Arena*);
template<> ::ShuffleInfo::Metadata_FixupInfo* Arena::CreateMaybeMessage<::ShuffleInfo::Metadata_FixupInfo>(Arena*);
template<> ::ShuffleInfo::Metadata_FunInfo* Arena::CreateMaybeMessage<::ShuffleInfo::Metadata_FunInfo>(Arena*);
template<> ::ShuffleInfo::Metadata_GoldInfo* Arena::CreateMaybeMessage<::ShuffleInfo::Metadata_GoldInfo>(Arena*);
template<> ::ShuffleInfo::Metadata_InstInfo* Arena::CreateMaybeMessage<::ShuffleInfo::Metadata_InstInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_BinaryInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_BinaryInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_CCRLimitation* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_CCRLimitation>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_FixupInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_FixupInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_LayoutInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_LayoutInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ShuffleInfo {

// ===================================================================

class ReorderInfo_BinaryInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.BinaryInfo) */ {
 public:
  inline ReorderInfo_BinaryInfo() : ReorderInfo_BinaryInfo(nullptr) {}
  ~ReorderInfo_BinaryInfo() override;
  explicit PROTOBUF_CONSTEXPR ReorderInfo_BinaryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_BinaryInfo(const ReorderInfo_BinaryInfo& from);
  ReorderInfo_BinaryInfo(ReorderInfo_BinaryInfo&& from) noexcept
    : ReorderInfo_BinaryInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_BinaryInfo& operator=(const ReorderInfo_BinaryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_BinaryInfo& operator=(ReorderInfo_BinaryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderInfo_BinaryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_BinaryInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_BinaryInfo*>(
               &_ReorderInfo_BinaryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReorderInfo_BinaryInfo& a, ReorderInfo_BinaryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_BinaryInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_BinaryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReorderInfo_BinaryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReorderInfo_BinaryInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReorderInfo_BinaryInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReorderInfo_BinaryInfo& from) {
    ReorderInfo_BinaryInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_BinaryInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.BinaryInfo";
  }
  protected:
  explicit ReorderInfo_BinaryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRandObjOffsetFieldNumber = 1,
  };
  // optional uint64 rand_obj_offset = 1;
  bool has_rand_obj_offset() const;
  private:
  bool _internal_has_rand_obj_offset() const;
  public:
  void clear_rand_obj_offset();
  uint64_t rand_obj_offset() const;
  void set_rand_obj_offset(uint64_t value);
  private:
  uint64_t _internal_rand_obj_offset() const;
  void _internal_set_rand_obj_offset(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.BinaryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t rand_obj_offset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo_LayoutInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.LayoutInfo) */ {
 public:
  inline ReorderInfo_LayoutInfo() : ReorderInfo_LayoutInfo(nullptr) {}
  ~ReorderInfo_LayoutInfo() override;
  explicit PROTOBUF_CONSTEXPR ReorderInfo_LayoutInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_LayoutInfo(const ReorderInfo_LayoutInfo& from);
  ReorderInfo_LayoutInfo(ReorderInfo_LayoutInfo&& from) noexcept
    : ReorderInfo_LayoutInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_LayoutInfo& operator=(const ReorderInfo_LayoutInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_LayoutInfo& operator=(ReorderInfo_LayoutInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderInfo_LayoutInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_LayoutInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_LayoutInfo*>(
               &_ReorderInfo_LayoutInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReorderInfo_LayoutInfo& a, ReorderInfo_LayoutInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_LayoutInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_LayoutInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReorderInfo_LayoutInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReorderInfo_LayoutInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReorderInfo_LayoutInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReorderInfo_LayoutInfo& from) {
    ReorderInfo_LayoutInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_LayoutInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.LayoutInfo";
  }
  protected:
  explicit ReorderInfo_LayoutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 6,
    kBbSizeFieldNumber = 1,
    kTypeFieldNumber = 2,
    kBbFallthroughFieldNumber = 3,
    kSectionFieldNumber = 4,
    kSrcTypeFieldNumber = 5,
  };
  // optional string info = 6;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // optional uint32 bb_size = 1;
  bool has_bb_size() const;
  private:
  bool _internal_has_bb_size() const;
  public:
  void clear_bb_size();
  uint32_t bb_size() const;
  void set_bb_size(uint32_t value);
  private:
  uint32_t _internal_bb_size() const;
  void _internal_set_bb_size(uint32_t value);
  public:

  // optional uint32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional bool bb_fallthrough = 3;
  bool has_bb_fallthrough() const;
  private:
  bool _internal_has_bb_fallthrough() const;
  public:
  void clear_bb_fallthrough();
  bool bb_fallthrough() const;
  void set_bb_fallthrough(bool value);
  private:
  bool _internal_bb_fallthrough() const;
  void _internal_set_bb_fallthrough(bool value);
  public:

  // optional uint32 section = 4;
  bool has_section() const;
  private:
  bool _internal_has_section() const;
  public:
  void clear_section();
  uint32_t section() const;
  void set_section(uint32_t value);
  private:
  uint32_t _internal_section() const;
  void _internal_set_section(uint32_t value);
  public:

  // optional uint32 src_type = 5;
  bool has_src_type() const;
  private:
  bool _internal_has_src_type() const;
  public:
  void clear_src_type();
  uint32_t src_type() const;
  void set_src_type(uint32_t value);
  private:
  uint32_t _internal_src_type() const;
  void _internal_set_src_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.LayoutInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    uint32_t bb_size_;
    uint32_t type_;
    bool bb_fallthrough_;
    uint32_t section_;
    uint32_t src_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo_FixupInfo_FixupTuple final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple) */ {
 public:
  inline ReorderInfo_FixupInfo_FixupTuple() : ReorderInfo_FixupInfo_FixupTuple(nullptr) {}
  ~ReorderInfo_FixupInfo_FixupTuple() override;
  explicit PROTOBUF_CONSTEXPR ReorderInfo_FixupInfo_FixupTuple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_FixupInfo_FixupTuple(const ReorderInfo_FixupInfo_FixupTuple& from);
  ReorderInfo_FixupInfo_FixupTuple(ReorderInfo_FixupInfo_FixupTuple&& from) noexcept
    : ReorderInfo_FixupInfo_FixupTuple() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_FixupInfo_FixupTuple& operator=(const ReorderInfo_FixupInfo_FixupTuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_FixupInfo_FixupTuple& operator=(ReorderInfo_FixupInfo_FixupTuple&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderInfo_FixupInfo_FixupTuple& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_FixupInfo_FixupTuple* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_FixupInfo_FixupTuple*>(
               &_ReorderInfo_FixupInfo_FixupTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReorderInfo_FixupInfo_FixupTuple& a, ReorderInfo_FixupInfo_FixupTuple& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_FixupInfo_FixupTuple* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_FixupInfo_FixupTuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReorderInfo_FixupInfo_FixupTuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo_FixupTuple>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReorderInfo_FixupInfo_FixupTuple& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReorderInfo_FixupInfo_FixupTuple& from) {
    ReorderInfo_FixupInfo_FixupTuple::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_FixupInfo_FixupTuple* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple";
  }
  protected:
  explicit ReorderInfo_FixupInfo_FixupTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 10,
    kOffsetFieldNumber = 1,
    kBaseBblSymFieldNumber = 3,
    kTypeFieldNumber = 2,
    kBaseSectionFieldNumber = 4,
    kTargetBblSymFieldNumber = 5,
    kTargetSectionFieldNumber = 6,
    kSectionFieldNumber = 7,
    kAddFieldNumber = 8,
    kStepFieldNumber = 9,
  };
  // optional string info = 10;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // optional uint64 offset = 1;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // optional uint64 base_bbl_sym = 3;
  bool has_base_bbl_sym() const;
  private:
  bool _internal_has_base_bbl_sym() const;
  public:
  void clear_base_bbl_sym();
  uint64_t base_bbl_sym() const;
  void set_base_bbl_sym(uint64_t value);
  private:
  uint64_t _internal_base_bbl_sym() const;
  void _internal_set_base_bbl_sym(uint64_t value);
  public:

  // optional uint32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional uint32 base_section = 4;
  bool has_base_section() const;
  private:
  bool _internal_has_base_section() const;
  public:
  void clear_base_section();
  uint32_t base_section() const;
  void set_base_section(uint32_t value);
  private:
  uint32_t _internal_base_section() const;
  void _internal_set_base_section(uint32_t value);
  public:

  // optional uint64 target_bbl_sym = 5;
  bool has_target_bbl_sym() const;
  private:
  bool _internal_has_target_bbl_sym() const;
  public:
  void clear_target_bbl_sym();
  uint64_t target_bbl_sym() const;
  void set_target_bbl_sym(uint64_t value);
  private:
  uint64_t _internal_target_bbl_sym() const;
  void _internal_set_target_bbl_sym(uint64_t value);
  public:

  // optional uint32 target_section = 6;
  bool has_target_section() const;
  private:
  bool _internal_has_target_section() const;
  public:
  void clear_target_section();
  uint32_t target_section() const;
  void set_target_section(uint32_t value);
  private:
  uint32_t _internal_target_section() const;
  void _internal_set_target_section(uint32_t value);
  public:

  // optional uint32 section = 7;
  bool has_section() const;
  private:
  bool _internal_has_section() const;
  public:
  void clear_section();
  uint32_t section() const;
  void set_section(uint32_t value);
  private:
  uint32_t _internal_section() const;
  void _internal_set_section(uint32_t value);
  public:

  // optional int64 add = 8;
  bool has_add() const;
  private:
  bool _internal_has_add() const;
  public:
  void clear_add();
  int64_t add() const;
  void set_add(int64_t value);
  private:
  int64_t _internal_add() const;
  void _internal_set_add(int64_t value);
  public:

  // optional uint32 step = 9;
  bool has_step() const;
  private:
  bool _internal_has_step() const;
  public:
  void clear_step();
  uint32_t step() const;
  void set_step(uint32_t value);
  private:
  uint32_t _internal_step() const;
  void _internal_set_step(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    uint64_t offset_;
    uint64_t base_bbl_sym_;
    uint32_t type_;
    uint32_t base_section_;
    uint64_t target_bbl_sym_;
    uint32_t target_section_;
    uint32_t section_;
    int64_t add_;
    uint32_t step_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo_FixupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.FixupInfo) */ {
 public:
  inline ReorderInfo_FixupInfo() : ReorderInfo_FixupInfo(nullptr) {}
  ~ReorderInfo_FixupInfo() override;
  explicit PROTOBUF_CONSTEXPR ReorderInfo_FixupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_FixupInfo(const ReorderInfo_FixupInfo& from);
  ReorderInfo_FixupInfo(ReorderInfo_FixupInfo&& from) noexcept
    : ReorderInfo_FixupInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_FixupInfo& operator=(const ReorderInfo_FixupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_FixupInfo& operator=(ReorderInfo_FixupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderInfo_FixupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_FixupInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_FixupInfo*>(
               &_ReorderInfo_FixupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReorderInfo_FixupInfo& a, ReorderInfo_FixupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_FixupInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_FixupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReorderInfo_FixupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReorderInfo_FixupInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReorderInfo_FixupInfo& from) {
    ReorderInfo_FixupInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_FixupInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.FixupInfo";
  }
  protected:
  explicit ReorderInfo_FixupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReorderInfo_FixupInfo_FixupTuple FixupTuple;

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kRodataFieldNumber = 2,
    kDataFieldNumber = 3,
    kDatarelFieldNumber = 4,
    kInitarrayFieldNumber = 5,
    kGotFieldNumber = 6,
    kInitFieldNumber = 7,
    kFiniFieldNumber = 8,
  };
  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_text(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_text();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_text(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_text();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& text(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_text();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      text() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
  int rodata_size() const;
  private:
  int _internal_rodata_size() const;
  public:
  void clear_rodata();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_rodata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_rodata();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_rodata(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_rodata();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& rodata(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_rodata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      rodata() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_data();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_data(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_data();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& data(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      data() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
  int datarel_size() const;
  private:
  int _internal_datarel_size() const;
  public:
  void clear_datarel();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_datarel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_datarel();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_datarel(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_datarel();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& datarel(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_datarel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      datarel() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
  int initarray_size() const;
  private:
  int _internal_initarray_size() const;
  public:
  void clear_initarray();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_initarray(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_initarray();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_initarray(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_initarray();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& initarray(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_initarray();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      initarray() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple got = 6;
  int got_size() const;
  private:
  int _internal_got_size() const;
  public:
  void clear_got();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_got(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_got();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_got(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_got();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& got(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_got();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      got() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple init = 7;
  int init_size() const;
  private:
  int _internal_init_size() const;
  public:
  void clear_init();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_init(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_init();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_init(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_init();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& init(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_init();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      init() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple fini = 8;
  int fini_size() const;
  private:
  int _internal_fini_size() const;
  public:
  void clear_fini();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_fini(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_fini();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_fini(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_fini();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& fini(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_fini();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      fini() const;

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.FixupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > text_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > rodata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > datarel_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > initarray_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > got_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > init_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > fini_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo_CCRLimitation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.CCRLimitation) */ {
 public:
  inline ReorderInfo_CCRLimitation() : ReorderInfo_CCRLimitation(nullptr) {}
  ~ReorderInfo_CCRLimitation() override;
  explicit PROTOBUF_CONSTEXPR ReorderInfo_CCRLimitation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_CCRLimitation(const ReorderInfo_CCRLimitation& from);
  ReorderInfo_CCRLimitation(ReorderInfo_CCRLimitation&& from) noexcept
    : ReorderInfo_CCRLimitation() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_CCRLimitation& operator=(const ReorderInfo_CCRLimitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_CCRLimitation& operator=(ReorderInfo_CCRLimitation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderInfo_CCRLimitation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_CCRLimitation* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_CCRLimitation*>(
               &_ReorderInfo_CCRLimitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReorderInfo_CCRLimitation& a, ReorderInfo_CCRLimitation& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_CCRLimitation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_CCRLimitation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReorderInfo_CCRLimitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReorderInfo_CCRLimitation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReorderInfo_CCRLimitation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReorderInfo_CCRLimitation& from) {
    ReorderInfo_CCRLimitation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_CCRLimitation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.CCRLimitation";
  }
  protected:
  explicit ReorderInfo_CCRLimitation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissrandfileFieldNumber = 12,
    kAllObjFieldNumber = 1,
    kHybridObjFieldNumber = 2,
    kStaticGotFieldNumber = 3,
    kSiliconErrataFieldNumber = 4,
    kTlsOptFieldNumber = 5,
    kGotOptFieldNumber = 6,
    kGotTargetFieldNumber = 7,
    kTlsGotTargetFieldNumber = 8,
    kPltTargetFieldNumber = 9,
    kMergedTargetFieldNumber = 10,
    kIfuncTargetFieldNumber = 11,
  };
  // repeated string missrandfile = 12;
  int missrandfile_size() const;
  private:
  int _internal_missrandfile_size() const;
  public:
  void clear_missrandfile();
  const std::string& missrandfile(int index) const;
  std::string* mutable_missrandfile(int index);
  void set_missrandfile(int index, const std::string& value);
  void set_missrandfile(int index, std::string&& value);
  void set_missrandfile(int index, const char* value);
  void set_missrandfile(int index, const char* value, size_t size);
  std::string* add_missrandfile();
  void add_missrandfile(const std::string& value);
  void add_missrandfile(std::string&& value);
  void add_missrandfile(const char* value);
  void add_missrandfile(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& missrandfile() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_missrandfile();
  private:
  const std::string& _internal_missrandfile(int index) const;
  std::string* _internal_add_missrandfile();
  public:

  // optional uint64 all_obj = 1;
  bool has_all_obj() const;
  private:
  bool _internal_has_all_obj() const;
  public:
  void clear_all_obj();
  uint64_t all_obj() const;
  void set_all_obj(uint64_t value);
  private:
  uint64_t _internal_all_obj() const;
  void _internal_set_all_obj(uint64_t value);
  public:

  // optional uint64 hybrid_obj = 2;
  bool has_hybrid_obj() const;
  private:
  bool _internal_has_hybrid_obj() const;
  public:
  void clear_hybrid_obj();
  uint64_t hybrid_obj() const;
  void set_hybrid_obj(uint64_t value);
  private:
  uint64_t _internal_hybrid_obj() const;
  void _internal_set_hybrid_obj(uint64_t value);
  public:

  // optional uint64 static_got = 3;
  bool has_static_got() const;
  private:
  bool _internal_has_static_got() const;
  public:
  void clear_static_got();
  uint64_t static_got() const;
  void set_static_got(uint64_t value);
  private:
  uint64_t _internal_static_got() const;
  void _internal_set_static_got(uint64_t value);
  public:

  // optional uint64 silicon_errata = 4;
  bool has_silicon_errata() const;
  private:
  bool _internal_has_silicon_errata() const;
  public:
  void clear_silicon_errata();
  uint64_t silicon_errata() const;
  void set_silicon_errata(uint64_t value);
  private:
  uint64_t _internal_silicon_errata() const;
  void _internal_set_silicon_errata(uint64_t value);
  public:

  // optional uint64 tls_opt = 5;
  bool has_tls_opt() const;
  private:
  bool _internal_has_tls_opt() const;
  public:
  void clear_tls_opt();
  uint64_t tls_opt() const;
  void set_tls_opt(uint64_t value);
  private:
  uint64_t _internal_tls_opt() const;
  void _internal_set_tls_opt(uint64_t value);
  public:

  // optional uint64 got_opt = 6;
  bool has_got_opt() const;
  private:
  bool _internal_has_got_opt() const;
  public:
  void clear_got_opt();
  uint64_t got_opt() const;
  void set_got_opt(uint64_t value);
  private:
  uint64_t _internal_got_opt() const;
  void _internal_set_got_opt(uint64_t value);
  public:

  // optional uint64 got_target = 7;
  bool has_got_target() const;
  private:
  bool _internal_has_got_target() const;
  public:
  void clear_got_target();
  uint64_t got_target() const;
  void set_got_target(uint64_t value);
  private:
  uint64_t _internal_got_target() const;
  void _internal_set_got_target(uint64_t value);
  public:

  // optional uint64 tls_got_target = 8;
  bool has_tls_got_target() const;
  private:
  bool _internal_has_tls_got_target() const;
  public:
  void clear_tls_got_target();
  uint64_t tls_got_target() const;
  void set_tls_got_target(uint64_t value);
  private:
  uint64_t _internal_tls_got_target() const;
  void _internal_set_tls_got_target(uint64_t value);
  public:

  // optional uint64 plt_target = 9;
  bool has_plt_target() const;
  private:
  bool _internal_has_plt_target() const;
  public:
  void clear_plt_target();
  uint64_t plt_target() const;
  void set_plt_target(uint64_t value);
  private:
  uint64_t _internal_plt_target() const;
  void _internal_set_plt_target(uint64_t value);
  public:

  // optional uint64 merged_target = 10;
  bool has_merged_target() const;
  private:
  bool _internal_has_merged_target() const;
  public:
  void clear_merged_target();
  uint64_t merged_target() const;
  void set_merged_target(uint64_t value);
  private:
  uint64_t _internal_merged_target() const;
  void _internal_set_merged_target(uint64_t value);
  public:

  // optional uint64 ifunc_target = 11;
  bool has_ifunc_target() const;
  private:
  bool _internal_has_ifunc_target() const;
  public:
  void clear_ifunc_target();
  uint64_t ifunc_target() const;
  void set_ifunc_target(uint64_t value);
  private:
  uint64_t _internal_ifunc_target() const;
  void _internal_set_ifunc_target(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.CCRLimitation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> missrandfile_;
    uint64_t all_obj_;
    uint64_t hybrid_obj_;
    uint64_t static_got_;
    uint64_t silicon_errata_;
    uint64_t tls_opt_;
    uint64_t got_opt_;
    uint64_t got_target_;
    uint64_t tls_got_target_;
    uint64_t plt_target_;
    uint64_t merged_target_;
    uint64_t ifunc_target_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo) */ {
 public:
  inline ReorderInfo() : ReorderInfo(nullptr) {}
  ~ReorderInfo() override;
  explicit PROTOBUF_CONSTEXPR ReorderInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo(const ReorderInfo& from);
  ReorderInfo(ReorderInfo&& from) noexcept
    : ReorderInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo& operator=(const ReorderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo& operator=(ReorderInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo*>(
               &_ReorderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReorderInfo& a, ReorderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReorderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReorderInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReorderInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReorderInfo& from) {
    ReorderInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo";
  }
  protected:
  explicit ReorderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReorderInfo_BinaryInfo BinaryInfo;
  typedef ReorderInfo_LayoutInfo LayoutInfo;
  typedef ReorderInfo_FixupInfo FixupInfo;
  typedef ReorderInfo_CCRLimitation CCRLimitation;

  // accessors -------------------------------------------------------

  enum : int {
    kLayoutFieldNumber = 2,
    kFixupFieldNumber = 3,
    kBinFieldNumber = 1,
    kCcrLimitationFieldNumber = 4,
  };
  // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
  int layout_size() const;
  private:
  int _internal_layout_size() const;
  public:
  void clear_layout();
  ::ShuffleInfo::ReorderInfo_LayoutInfo* mutable_layout(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >*
      mutable_layout();
  private:
  const ::ShuffleInfo::ReorderInfo_LayoutInfo& _internal_layout(int index) const;
  ::ShuffleInfo::ReorderInfo_LayoutInfo* _internal_add_layout();
  public:
  const ::ShuffleInfo::ReorderInfo_LayoutInfo& layout(int index) const;
  ::ShuffleInfo::ReorderInfo_LayoutInfo* add_layout();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >&
      layout() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
  int fixup_size() const;
  private:
  int _internal_fixup_size() const;
  public:
  void clear_fixup();
  ::ShuffleInfo::ReorderInfo_FixupInfo* mutable_fixup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >*
      mutable_fixup();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo& _internal_fixup(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo* _internal_add_fixup();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo& fixup(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo* add_fixup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >&
      fixup() const;

  // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
  bool has_bin() const;
  private:
  bool _internal_has_bin() const;
  public:
  void clear_bin();
  const ::ShuffleInfo::ReorderInfo_BinaryInfo& bin() const;
  PROTOBUF_NODISCARD ::ShuffleInfo::ReorderInfo_BinaryInfo* release_bin();
  ::ShuffleInfo::ReorderInfo_BinaryInfo* mutable_bin();
  void set_allocated_bin(::ShuffleInfo::ReorderInfo_BinaryInfo* bin);
  private:
  const ::ShuffleInfo::ReorderInfo_BinaryInfo& _internal_bin() const;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* _internal_mutable_bin();
  public:
  void unsafe_arena_set_allocated_bin(
      ::ShuffleInfo::ReorderInfo_BinaryInfo* bin);
  ::ShuffleInfo::ReorderInfo_BinaryInfo* unsafe_arena_release_bin();

  // optional .ShuffleInfo.ReorderInfo.CCRLimitation ccr_limitation = 4;
  bool has_ccr_limitation() const;
  private:
  bool _internal_has_ccr_limitation() const;
  public:
  void clear_ccr_limitation();
  const ::ShuffleInfo::ReorderInfo_CCRLimitation& ccr_limitation() const;
  PROTOBUF_NODISCARD ::ShuffleInfo::ReorderInfo_CCRLimitation* release_ccr_limitation();
  ::ShuffleInfo::ReorderInfo_CCRLimitation* mutable_ccr_limitation();
  void set_allocated_ccr_limitation(::ShuffleInfo::ReorderInfo_CCRLimitation* ccr_limitation);
  private:
  const ::ShuffleInfo::ReorderInfo_CCRLimitation& _internal_ccr_limitation() const;
  ::ShuffleInfo::ReorderInfo_CCRLimitation* _internal_mutable_ccr_limitation();
  public:
  void unsafe_arena_set_allocated_ccr_limitation(
      ::ShuffleInfo::ReorderInfo_CCRLimitation* ccr_limitation);
  ::ShuffleInfo::ReorderInfo_CCRLimitation* unsafe_arena_release_ccr_limitation();

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo > layout_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo > fixup_;
    ::ShuffleInfo::ReorderInfo_BinaryInfo* bin_;
    ::ShuffleInfo::ReorderInfo_CCRLimitation* ccr_limitation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class Metadata_InstInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.Metadata.InstInfo) */ {
 public:
  inline Metadata_InstInfo() : Metadata_InstInfo(nullptr) {}
  ~Metadata_InstInfo() override;
  explicit PROTOBUF_CONSTEXPR Metadata_InstInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata_InstInfo(const Metadata_InstInfo& from);
  Metadata_InstInfo(Metadata_InstInfo&& from) noexcept
    : Metadata_InstInfo() {
    *this = ::std::move(from);
  }

  inline Metadata_InstInfo& operator=(const Metadata_InstInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata_InstInfo& operator=(Metadata_InstInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata_InstInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata_InstInfo* internal_default_instance() {
    return reinterpret_cast<const Metadata_InstInfo*>(
               &_Metadata_InstInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Metadata_InstInfo& a, Metadata_InstInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata_InstInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata_InstInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata_InstInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata_InstInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata_InstInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metadata_InstInfo& from) {
    Metadata_InstInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata_InstInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.Metadata.InstInfo";
  }
  protected:
  explicit Metadata_InstInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // required uint32 offset = 1;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  uint32_t offset() const;
  void set_offset(uint32_t value);
  private:
  uint32_t _internal_offset() const;
  void _internal_set_offset(uint32_t value);
  public:

  // required uint32 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.Metadata.InstInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t offset_;
    uint32_t size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class Metadata_FunInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.Metadata.FunInfo) */ {
 public:
  inline Metadata_FunInfo() : Metadata_FunInfo(nullptr) {}
  ~Metadata_FunInfo() override;
  explicit PROTOBUF_CONSTEXPR Metadata_FunInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata_FunInfo(const Metadata_FunInfo& from);
  Metadata_FunInfo(Metadata_FunInfo&& from) noexcept
    : Metadata_FunInfo() {
    *this = ::std::move(from);
  }

  inline Metadata_FunInfo& operator=(const Metadata_FunInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata_FunInfo& operator=(Metadata_FunInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata_FunInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata_FunInfo* internal_default_instance() {
    return reinterpret_cast<const Metadata_FunInfo*>(
               &_Metadata_FunInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Metadata_FunInfo& a, Metadata_FunInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata_FunInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata_FunInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata_FunInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata_FunInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata_FunInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metadata_FunInfo& from) {
    Metadata_FunInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata_FunInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.Metadata.FunInfo";
  }
  protected:
  explicit Metadata_FunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstsFieldNumber = 3,
    kInfoFieldNumber = 4,
    kSectionFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // repeated .ShuffleInfo.Metadata.InstInfo insts = 3;
  int insts_size() const;
  private:
  int _internal_insts_size() const;
  public:
  void clear_insts();
  ::ShuffleInfo::Metadata_InstInfo* mutable_insts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_InstInfo >*
      mutable_insts();
  private:
  const ::ShuffleInfo::Metadata_InstInfo& _internal_insts(int index) const;
  ::ShuffleInfo::Metadata_InstInfo* _internal_add_insts();
  public:
  const ::ShuffleInfo::Metadata_InstInfo& insts(int index) const;
  ::ShuffleInfo::Metadata_InstInfo* add_insts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_InstInfo >&
      insts() const;

  // optional string info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // required uint32 section = 1;
  bool has_section() const;
  private:
  bool _internal_has_section() const;
  public:
  void clear_section();
  uint32_t section() const;
  void set_section(uint32_t value);
  private:
  uint32_t _internal_section() const;
  void _internal_set_section(uint32_t value);
  public:

  // required uint32 offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  uint32_t offset() const;
  void set_offset(uint32_t value);
  private:
  uint32_t _internal_offset() const;
  void _internal_set_offset(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.Metadata.FunInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_InstInfo > insts_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    uint32_t section_;
    uint32_t offset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class Metadata_FixupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.Metadata.FixupInfo) */ {
 public:
  inline Metadata_FixupInfo() : Metadata_FixupInfo(nullptr) {}
  ~Metadata_FixupInfo() override;
  explicit PROTOBUF_CONSTEXPR Metadata_FixupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata_FixupInfo(const Metadata_FixupInfo& from);
  Metadata_FixupInfo(Metadata_FixupInfo&& from) noexcept
    : Metadata_FixupInfo() {
    *this = ::std::move(from);
  }

  inline Metadata_FixupInfo& operator=(const Metadata_FixupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata_FixupInfo& operator=(Metadata_FixupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata_FixupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata_FixupInfo* internal_default_instance() {
    return reinterpret_cast<const Metadata_FixupInfo*>(
               &_Metadata_FixupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Metadata_FixupInfo& a, Metadata_FixupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata_FixupInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata_FixupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata_FixupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata_FixupInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata_FixupInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metadata_FixupInfo& from) {
    Metadata_FixupInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata_FixupInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.Metadata.FixupInfo";
  }
  protected:
  explicit Metadata_FixupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 10,
    kOffsetFieldNumber = 1,
    kSectionFieldNumber = 2,
    kTypeFieldNumber = 3,
    kBaseBblSymFieldNumber = 4,
    kTargetBblSymFieldNumber = 6,
    kBaseSectionFieldNumber = 5,
    kTargetSectionFieldNumber = 7,
    kAddFieldNumber = 8,
    kStepFieldNumber = 9,
  };
  // optional string info = 10;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // required uint64 offset = 1;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // required uint32 section = 2;
  bool has_section() const;
  private:
  bool _internal_has_section() const;
  public:
  void clear_section();
  uint32_t section() const;
  void set_section(uint32_t value);
  private:
  uint32_t _internal_section() const;
  void _internal_set_section(uint32_t value);
  public:

  // required uint32 type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // required uint64 base_bbl_sym = 4;
  bool has_base_bbl_sym() const;
  private:
  bool _internal_has_base_bbl_sym() const;
  public:
  void clear_base_bbl_sym();
  uint64_t base_bbl_sym() const;
  void set_base_bbl_sym(uint64_t value);
  private:
  uint64_t _internal_base_bbl_sym() const;
  void _internal_set_base_bbl_sym(uint64_t value);
  public:

  // required uint64 target_bbl_sym = 6;
  bool has_target_bbl_sym() const;
  private:
  bool _internal_has_target_bbl_sym() const;
  public:
  void clear_target_bbl_sym();
  uint64_t target_bbl_sym() const;
  void set_target_bbl_sym(uint64_t value);
  private:
  uint64_t _internal_target_bbl_sym() const;
  void _internal_set_target_bbl_sym(uint64_t value);
  public:

  // required uint32 base_section = 5;
  bool has_base_section() const;
  private:
  bool _internal_has_base_section() const;
  public:
  void clear_base_section();
  uint32_t base_section() const;
  void set_base_section(uint32_t value);
  private:
  uint32_t _internal_base_section() const;
  void _internal_set_base_section(uint32_t value);
  public:

  // required uint32 target_section = 7;
  bool has_target_section() const;
  private:
  bool _internal_has_target_section() const;
  public:
  void clear_target_section();
  uint32_t target_section() const;
  void set_target_section(uint32_t value);
  private:
  uint32_t _internal_target_section() const;
  void _internal_set_target_section(uint32_t value);
  public:

  // optional int64 add = 8;
  bool has_add() const;
  private:
  bool _internal_has_add() const;
  public:
  void clear_add();
  int64_t add() const;
  void set_add(int64_t value);
  private:
  int64_t _internal_add() const;
  void _internal_set_add(int64_t value);
  public:

  // optional uint32 step = 9;
  bool has_step() const;
  private:
  bool _internal_has_step() const;
  public:
  void clear_step();
  uint32_t step() const;
  void set_step(uint32_t value);
  private:
  uint32_t _internal_step() const;
  void _internal_set_step(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.Metadata.FixupInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    uint64_t offset_;
    uint32_t section_;
    uint32_t type_;
    uint64_t base_bbl_sym_;
    uint64_t target_bbl_sym_;
    uint32_t base_section_;
    uint32_t target_section_;
    int64_t add_;
    uint32_t step_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class Metadata_GoldInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.Metadata.GoldInfo) */ {
 public:
  inline Metadata_GoldInfo() : Metadata_GoldInfo(nullptr) {}
  ~Metadata_GoldInfo() override;
  explicit PROTOBUF_CONSTEXPR Metadata_GoldInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata_GoldInfo(const Metadata_GoldInfo& from);
  Metadata_GoldInfo(Metadata_GoldInfo&& from) noexcept
    : Metadata_GoldInfo() {
    *this = ::std::move(from);
  }

  inline Metadata_GoldInfo& operator=(const Metadata_GoldInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata_GoldInfo& operator=(Metadata_GoldInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata_GoldInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata_GoldInfo* internal_default_instance() {
    return reinterpret_cast<const Metadata_GoldInfo*>(
               &_Metadata_GoldInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Metadata_GoldInfo& a, Metadata_GoldInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata_GoldInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata_GoldInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata_GoldInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata_GoldInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata_GoldInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metadata_GoldInfo& from) {
    Metadata_GoldInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata_GoldInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.Metadata.GoldInfo";
  }
  protected:
  explicit Metadata_GoldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissrandfileFieldNumber = 12,
    kAllObjFieldNumber = 1,
    kNorandObjFieldNumber = 2,
    kStaticGotFieldNumber = 3,
    kSiliconErrataFieldNumber = 4,
    kTlsOptFieldNumber = 5,
    kGotOptFieldNumber = 6,
    kGotTargetFieldNumber = 7,
    kTlsGotTargetFieldNumber = 8,
    kPltTargetFieldNumber = 9,
    kMergedTargetFieldNumber = 10,
    kIfuncTargetFieldNumber = 11,
    kCFunFieldNumber = 13,
  };
  // repeated string missrandfile = 12;
  int missrandfile_size() const;
  private:
  int _internal_missrandfile_size() const;
  public:
  void clear_missrandfile();
  const std::string& missrandfile(int index) const;
  std::string* mutable_missrandfile(int index);
  void set_missrandfile(int index, const std::string& value);
  void set_missrandfile(int index, std::string&& value);
  void set_missrandfile(int index, const char* value);
  void set_missrandfile(int index, const char* value, size_t size);
  std::string* add_missrandfile();
  void add_missrandfile(const std::string& value);
  void add_missrandfile(std::string&& value);
  void add_missrandfile(const char* value);
  void add_missrandfile(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& missrandfile() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_missrandfile();
  private:
  const std::string& _internal_missrandfile(int index) const;
  std::string* _internal_add_missrandfile();
  public:

  // optional uint64 all_obj = 1;
  bool has_all_obj() const;
  private:
  bool _internal_has_all_obj() const;
  public:
  void clear_all_obj();
  uint64_t all_obj() const;
  void set_all_obj(uint64_t value);
  private:
  uint64_t _internal_all_obj() const;
  void _internal_set_all_obj(uint64_t value);
  public:

  // optional uint64 norand_obj = 2;
  bool has_norand_obj() const;
  private:
  bool _internal_has_norand_obj() const;
  public:
  void clear_norand_obj();
  uint64_t norand_obj() const;
  void set_norand_obj(uint64_t value);
  private:
  uint64_t _internal_norand_obj() const;
  void _internal_set_norand_obj(uint64_t value);
  public:

  // optional uint64 static_got = 3;
  bool has_static_got() const;
  private:
  bool _internal_has_static_got() const;
  public:
  void clear_static_got();
  uint64_t static_got() const;
  void set_static_got(uint64_t value);
  private:
  uint64_t _internal_static_got() const;
  void _internal_set_static_got(uint64_t value);
  public:

  // optional uint64 silicon_errata = 4;
  bool has_silicon_errata() const;
  private:
  bool _internal_has_silicon_errata() const;
  public:
  void clear_silicon_errata();
  uint64_t silicon_errata() const;
  void set_silicon_errata(uint64_t value);
  private:
  uint64_t _internal_silicon_errata() const;
  void _internal_set_silicon_errata(uint64_t value);
  public:

  // optional uint64 tls_opt = 5;
  bool has_tls_opt() const;
  private:
  bool _internal_has_tls_opt() const;
  public:
  void clear_tls_opt();
  uint64_t tls_opt() const;
  void set_tls_opt(uint64_t value);
  private:
  uint64_t _internal_tls_opt() const;
  void _internal_set_tls_opt(uint64_t value);
  public:

  // optional uint64 got_opt = 6;
  bool has_got_opt() const;
  private:
  bool _internal_has_got_opt() const;
  public:
  void clear_got_opt();
  uint64_t got_opt() const;
  void set_got_opt(uint64_t value);
  private:
  uint64_t _internal_got_opt() const;
  void _internal_set_got_opt(uint64_t value);
  public:

  // optional uint64 got_target = 7;
  bool has_got_target() const;
  private:
  bool _internal_has_got_target() const;
  public:
  void clear_got_target();
  uint64_t got_target() const;
  void set_got_target(uint64_t value);
  private:
  uint64_t _internal_got_target() const;
  void _internal_set_got_target(uint64_t value);
  public:

  // optional uint64 tls_got_target = 8;
  bool has_tls_got_target() const;
  private:
  bool _internal_has_tls_got_target() const;
  public:
  void clear_tls_got_target();
  uint64_t tls_got_target() const;
  void set_tls_got_target(uint64_t value);
  private:
  uint64_t _internal_tls_got_target() const;
  void _internal_set_tls_got_target(uint64_t value);
  public:

  // optional uint64 plt_target = 9;
  bool has_plt_target() const;
  private:
  bool _internal_has_plt_target() const;
  public:
  void clear_plt_target();
  uint64_t plt_target() const;
  void set_plt_target(uint64_t value);
  private:
  uint64_t _internal_plt_target() const;
  void _internal_set_plt_target(uint64_t value);
  public:

  // optional uint64 merged_target = 10;
  bool has_merged_target() const;
  private:
  bool _internal_has_merged_target() const;
  public:
  void clear_merged_target();
  uint64_t merged_target() const;
  void set_merged_target(uint64_t value);
  private:
  uint64_t _internal_merged_target() const;
  void _internal_set_merged_target(uint64_t value);
  public:

  // optional uint64 ifunc_target = 11;
  bool has_ifunc_target() const;
  private:
  bool _internal_has_ifunc_target() const;
  public:
  void clear_ifunc_target();
  uint64_t ifunc_target() const;
  void set_ifunc_target(uint64_t value);
  private:
  uint64_t _internal_ifunc_target() const;
  void _internal_set_ifunc_target(uint64_t value);
  public:

  // optional uint64 c_fun = 13;
  bool has_c_fun() const;
  private:
  bool _internal_has_c_fun() const;
  public:
  void clear_c_fun();
  uint64_t c_fun() const;
  void set_c_fun(uint64_t value);
  private:
  uint64_t _internal_c_fun() const;
  void _internal_set_c_fun(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.Metadata.GoldInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> missrandfile_;
    uint64_t all_obj_;
    uint64_t norand_obj_;
    uint64_t static_got_;
    uint64_t silicon_errata_;
    uint64_t tls_opt_;
    uint64_t got_opt_;
    uint64_t got_target_;
    uint64_t tls_got_target_;
    uint64_t plt_target_;
    uint64_t merged_target_;
    uint64_t ifunc_target_;
    uint64_t c_fun_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit PROTOBUF_CONSTEXPR Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metadata& from) {
    Metadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Metadata_InstInfo InstInfo;
  typedef Metadata_FunInfo FunInfo;
  typedef Metadata_FixupInfo FixupInfo;
  typedef Metadata_GoldInfo GoldInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kFunsFieldNumber = 1,
    kFixupsFieldNumber = 2,
    kOtherfixupsFieldNumber = 3,
    kGoldinfoFieldNumber = 4,
  };
  // repeated .ShuffleInfo.Metadata.FunInfo funs = 1;
  int funs_size() const;
  private:
  int _internal_funs_size() const;
  public:
  void clear_funs();
  ::ShuffleInfo::Metadata_FunInfo* mutable_funs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FunInfo >*
      mutable_funs();
  private:
  const ::ShuffleInfo::Metadata_FunInfo& _internal_funs(int index) const;
  ::ShuffleInfo::Metadata_FunInfo* _internal_add_funs();
  public:
  const ::ShuffleInfo::Metadata_FunInfo& funs(int index) const;
  ::ShuffleInfo::Metadata_FunInfo* add_funs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FunInfo >&
      funs() const;

  // repeated .ShuffleInfo.Metadata.FixupInfo fixups = 2;
  int fixups_size() const;
  private:
  int _internal_fixups_size() const;
  public:
  void clear_fixups();
  ::ShuffleInfo::Metadata_FixupInfo* mutable_fixups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FixupInfo >*
      mutable_fixups();
  private:
  const ::ShuffleInfo::Metadata_FixupInfo& _internal_fixups(int index) const;
  ::ShuffleInfo::Metadata_FixupInfo* _internal_add_fixups();
  public:
  const ::ShuffleInfo::Metadata_FixupInfo& fixups(int index) const;
  ::ShuffleInfo::Metadata_FixupInfo* add_fixups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FixupInfo >&
      fixups() const;

  // repeated .ShuffleInfo.Metadata.FixupInfo otherfixups = 3;
  int otherfixups_size() const;
  private:
  int _internal_otherfixups_size() const;
  public:
  void clear_otherfixups();
  ::ShuffleInfo::Metadata_FixupInfo* mutable_otherfixups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FixupInfo >*
      mutable_otherfixups();
  private:
  const ::ShuffleInfo::Metadata_FixupInfo& _internal_otherfixups(int index) const;
  ::ShuffleInfo::Metadata_FixupInfo* _internal_add_otherfixups();
  public:
  const ::ShuffleInfo::Metadata_FixupInfo& otherfixups(int index) const;
  ::ShuffleInfo::Metadata_FixupInfo* add_otherfixups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FixupInfo >&
      otherfixups() const;

  // optional .ShuffleInfo.Metadata.GoldInfo goldinfo = 4;
  bool has_goldinfo() const;
  private:
  bool _internal_has_goldinfo() const;
  public:
  void clear_goldinfo();
  const ::ShuffleInfo::Metadata_GoldInfo& goldinfo() const;
  PROTOBUF_NODISCARD ::ShuffleInfo::Metadata_GoldInfo* release_goldinfo();
  ::ShuffleInfo::Metadata_GoldInfo* mutable_goldinfo();
  void set_allocated_goldinfo(::ShuffleInfo::Metadata_GoldInfo* goldinfo);
  private:
  const ::ShuffleInfo::Metadata_GoldInfo& _internal_goldinfo() const;
  ::ShuffleInfo::Metadata_GoldInfo* _internal_mutable_goldinfo();
  public:
  void unsafe_arena_set_allocated_goldinfo(
      ::ShuffleInfo::Metadata_GoldInfo* goldinfo);
  ::ShuffleInfo::Metadata_GoldInfo* unsafe_arena_release_goldinfo();

  // @@protoc_insertion_point(class_scope:ShuffleInfo.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FunInfo > funs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FixupInfo > fixups_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FixupInfo > otherfixups_;
    ::ShuffleInfo::Metadata_GoldInfo* goldinfo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReorderInfo_BinaryInfo

// optional uint64 rand_obj_offset = 1;
inline bool ReorderInfo_BinaryInfo::_internal_has_rand_obj_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorderInfo_BinaryInfo::has_rand_obj_offset() const {
  return _internal_has_rand_obj_offset();
}
inline void ReorderInfo_BinaryInfo::clear_rand_obj_offset() {
  _impl_.rand_obj_offset_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ReorderInfo_BinaryInfo::_internal_rand_obj_offset() const {
  return _impl_.rand_obj_offset_;
}
inline uint64_t ReorderInfo_BinaryInfo::rand_obj_offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.rand_obj_offset)
  return _internal_rand_obj_offset();
}
inline void ReorderInfo_BinaryInfo::_internal_set_rand_obj_offset(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rand_obj_offset_ = value;
}
inline void ReorderInfo_BinaryInfo::set_rand_obj_offset(uint64_t value) {
  _internal_set_rand_obj_offset(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.rand_obj_offset)
}

// -------------------------------------------------------------------

// ReorderInfo_LayoutInfo

// optional uint32 bb_size = 1;
inline bool ReorderInfo_LayoutInfo::_internal_has_bb_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_bb_size() const {
  return _internal_has_bb_size();
}
inline void ReorderInfo_LayoutInfo::clear_bb_size() {
  _impl_.bb_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ReorderInfo_LayoutInfo::_internal_bb_size() const {
  return _impl_.bb_size_;
}
inline uint32_t ReorderInfo_LayoutInfo::bb_size() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.bb_size)
  return _internal_bb_size();
}
inline void ReorderInfo_LayoutInfo::_internal_set_bb_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bb_size_ = value;
}
inline void ReorderInfo_LayoutInfo::set_bb_size(uint32_t value) {
  _internal_set_bb_size(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.bb_size)
}

// optional uint32 type = 2;
inline bool ReorderInfo_LayoutInfo::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_type() const {
  return _internal_has_type();
}
inline void ReorderInfo_LayoutInfo::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ReorderInfo_LayoutInfo::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t ReorderInfo_LayoutInfo::type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.type)
  return _internal_type();
}
inline void ReorderInfo_LayoutInfo::_internal_set_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void ReorderInfo_LayoutInfo::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.type)
}

// optional bool bb_fallthrough = 3;
inline bool ReorderInfo_LayoutInfo::_internal_has_bb_fallthrough() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_bb_fallthrough() const {
  return _internal_has_bb_fallthrough();
}
inline void ReorderInfo_LayoutInfo::clear_bb_fallthrough() {
  _impl_.bb_fallthrough_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ReorderInfo_LayoutInfo::_internal_bb_fallthrough() const {
  return _impl_.bb_fallthrough_;
}
inline bool ReorderInfo_LayoutInfo::bb_fallthrough() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.bb_fallthrough)
  return _internal_bb_fallthrough();
}
inline void ReorderInfo_LayoutInfo::_internal_set_bb_fallthrough(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bb_fallthrough_ = value;
}
inline void ReorderInfo_LayoutInfo::set_bb_fallthrough(bool value) {
  _internal_set_bb_fallthrough(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.bb_fallthrough)
}

// optional uint32 section = 4;
inline bool ReorderInfo_LayoutInfo::_internal_has_section() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_section() const {
  return _internal_has_section();
}
inline void ReorderInfo_LayoutInfo::clear_section() {
  _impl_.section_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ReorderInfo_LayoutInfo::_internal_section() const {
  return _impl_.section_;
}
inline uint32_t ReorderInfo_LayoutInfo::section() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.section)
  return _internal_section();
}
inline void ReorderInfo_LayoutInfo::_internal_set_section(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.section_ = value;
}
inline void ReorderInfo_LayoutInfo::set_section(uint32_t value) {
  _internal_set_section(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.section)
}

// optional uint32 src_type = 5;
inline bool ReorderInfo_LayoutInfo::_internal_has_src_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_src_type() const {
  return _internal_has_src_type();
}
inline void ReorderInfo_LayoutInfo::clear_src_type() {
  _impl_.src_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ReorderInfo_LayoutInfo::_internal_src_type() const {
  return _impl_.src_type_;
}
inline uint32_t ReorderInfo_LayoutInfo::src_type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.src_type)
  return _internal_src_type();
}
inline void ReorderInfo_LayoutInfo::_internal_set_src_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.src_type_ = value;
}
inline void ReorderInfo_LayoutInfo::set_src_type(uint32_t value) {
  _internal_set_src_type(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.src_type)
}

// optional string info = 6;
inline bool ReorderInfo_LayoutInfo::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_info() const {
  return _internal_has_info();
}
inline void ReorderInfo_LayoutInfo::clear_info() {
  _impl_.info_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReorderInfo_LayoutInfo::info() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReorderInfo_LayoutInfo::set_info(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.info)
}
inline std::string* ReorderInfo_LayoutInfo::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.LayoutInfo.info)
  return _s;
}
inline const std::string& ReorderInfo_LayoutInfo::_internal_info() const {
  return _impl_.info_.Get();
}
inline void ReorderInfo_LayoutInfo::_internal_set_info(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* ReorderInfo_LayoutInfo::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* ReorderInfo_LayoutInfo::release_info() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.LayoutInfo.info)
  if (!_internal_has_info()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.info_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReorderInfo_LayoutInfo::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.LayoutInfo.info)
}

// -------------------------------------------------------------------

// ReorderInfo_FixupInfo_FixupTuple

// optional uint64 offset = 1;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_offset() const {
  return _internal_has_offset();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_offset() {
  _impl_.offset_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ReorderInfo_FixupInfo_FixupTuple::_internal_offset() const {
  return _impl_.offset_;
}
inline uint64_t ReorderInfo_FixupInfo_FixupTuple::offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.offset)
  return _internal_offset();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_offset(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.offset_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.offset)
}

// optional uint32 type = 2;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_type() const {
  return _internal_has_type();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ReorderInfo_FixupInfo_FixupTuple::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t ReorderInfo_FixupInfo_FixupTuple::type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.type)
  return _internal_type();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.type)
}

// optional uint64 base_bbl_sym = 3;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_base_bbl_sym() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_base_bbl_sym() const {
  return _internal_has_base_bbl_sym();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_base_bbl_sym() {
  _impl_.base_bbl_sym_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ReorderInfo_FixupInfo_FixupTuple::_internal_base_bbl_sym() const {
  return _impl_.base_bbl_sym_;
}
inline uint64_t ReorderInfo_FixupInfo_FixupTuple::base_bbl_sym() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_bbl_sym)
  return _internal_base_bbl_sym();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_base_bbl_sym(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.base_bbl_sym_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_base_bbl_sym(uint64_t value) {
  _internal_set_base_bbl_sym(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_bbl_sym)
}

// optional uint32 base_section = 4;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_base_section() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_base_section() const {
  return _internal_has_base_section();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_base_section() {
  _impl_.base_section_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ReorderInfo_FixupInfo_FixupTuple::_internal_base_section() const {
  return _impl_.base_section_;
}
inline uint32_t ReorderInfo_FixupInfo_FixupTuple::base_section() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section)
  return _internal_base_section();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_base_section(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.base_section_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_base_section(uint32_t value) {
  _internal_set_base_section(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section)
}

// optional uint64 target_bbl_sym = 5;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_target_bbl_sym() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_target_bbl_sym() const {
  return _internal_has_target_bbl_sym();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_target_bbl_sym() {
  _impl_.target_bbl_sym_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t ReorderInfo_FixupInfo_FixupTuple::_internal_target_bbl_sym() const {
  return _impl_.target_bbl_sym_;
}
inline uint64_t ReorderInfo_FixupInfo_FixupTuple::target_bbl_sym() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_bbl_sym)
  return _internal_target_bbl_sym();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_target_bbl_sym(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.target_bbl_sym_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_target_bbl_sym(uint64_t value) {
  _internal_set_target_bbl_sym(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_bbl_sym)
}

// optional uint32 target_section = 6;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_target_section() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_target_section() const {
  return _internal_has_target_section();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_target_section() {
  _impl_.target_section_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t ReorderInfo_FixupInfo_FixupTuple::_internal_target_section() const {
  return _impl_.target_section_;
}
inline uint32_t ReorderInfo_FixupInfo_FixupTuple::target_section() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section)
  return _internal_target_section();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_target_section(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.target_section_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_target_section(uint32_t value) {
  _internal_set_target_section(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section)
}

// optional uint32 section = 7;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_section() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_section() const {
  return _internal_has_section();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_section() {
  _impl_.section_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t ReorderInfo_FixupInfo_FixupTuple::_internal_section() const {
  return _impl_.section_;
}
inline uint32_t ReorderInfo_FixupInfo_FixupTuple::section() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section)
  return _internal_section();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_section(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.section_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_section(uint32_t value) {
  _internal_set_section(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section)
}

// optional int64 add = 8;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_add() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_add() const {
  return _internal_has_add();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_add() {
  _impl_.add_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t ReorderInfo_FixupInfo_FixupTuple::_internal_add() const {
  return _impl_.add_;
}
inline int64_t ReorderInfo_FixupInfo_FixupTuple::add() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.add)
  return _internal_add();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_add(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.add_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_add(int64_t value) {
  _internal_set_add(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.add)
}

// optional uint32 step = 9;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_step() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_step() const {
  return _internal_has_step();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_step() {
  _impl_.step_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t ReorderInfo_FixupInfo_FixupTuple::_internal_step() const {
  return _impl_.step_;
}
inline uint32_t ReorderInfo_FixupInfo_FixupTuple::step() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.step)
  return _internal_step();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_step(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.step_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_step(uint32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.step)
}

// optional string info = 10;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_info() const {
  return _internal_has_info();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_info() {
  _impl_.info_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReorderInfo_FixupInfo_FixupTuple::info() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReorderInfo_FixupInfo_FixupTuple::set_info(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.info)
}
inline std::string* ReorderInfo_FixupInfo_FixupTuple::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.info)
  return _s;
}
inline const std::string& ReorderInfo_FixupInfo_FixupTuple::_internal_info() const {
  return _impl_.info_.Get();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_info(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* ReorderInfo_FixupInfo_FixupTuple::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* ReorderInfo_FixupInfo_FixupTuple::release_info() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.info)
  if (!_internal_has_info()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.info_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.info)
}

// -------------------------------------------------------------------

// ReorderInfo_FixupInfo

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
inline int ReorderInfo_FixupInfo::_internal_text_size() const {
  return _impl_.text_.size();
}
inline int ReorderInfo_FixupInfo::text_size() const {
  return _internal_text_size();
}
inline void ReorderInfo_FixupInfo::clear_text() {
  _impl_.text_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return _impl_.text_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return &_impl_.text_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_text(int index) const {
  return _impl_.text_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::text(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return _internal_text(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_text() {
  return _impl_.text_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_text() {
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _add = _internal_add_text();
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::text() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return _impl_.text_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
inline int ReorderInfo_FixupInfo::_internal_rodata_size() const {
  return _impl_.rodata_.size();
}
inline int ReorderInfo_FixupInfo::rodata_size() const {
  return _internal_rodata_size();
}
inline void ReorderInfo_FixupInfo::clear_rodata() {
  _impl_.rodata_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_rodata(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return _impl_.rodata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_rodata() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return &_impl_.rodata_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_rodata(int index) const {
  return _impl_.rodata_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::rodata(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return _internal_rodata(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_rodata() {
  return _impl_.rodata_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_rodata() {
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _add = _internal_add_rodata();
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::rodata() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return _impl_.rodata_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
inline int ReorderInfo_FixupInfo::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int ReorderInfo_FixupInfo::data_size() const {
  return _internal_data_size();
}
inline void ReorderInfo_FixupInfo::clear_data() {
  _impl_.data_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return &_impl_.data_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return _internal_data(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_data() {
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::data() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return _impl_.data_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
inline int ReorderInfo_FixupInfo::_internal_datarel_size() const {
  return _impl_.datarel_.size();
}
inline int ReorderInfo_FixupInfo::datarel_size() const {
  return _internal_datarel_size();
}
inline void ReorderInfo_FixupInfo::clear_datarel() {
  _impl_.datarel_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_datarel(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return _impl_.datarel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_datarel() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return &_impl_.datarel_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_datarel(int index) const {
  return _impl_.datarel_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::datarel(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return _internal_datarel(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_datarel() {
  return _impl_.datarel_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_datarel() {
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _add = _internal_add_datarel();
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::datarel() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return _impl_.datarel_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
inline int ReorderInfo_FixupInfo::_internal_initarray_size() const {
  return _impl_.initarray_.size();
}
inline int ReorderInfo_FixupInfo::initarray_size() const {
  return _internal_initarray_size();
}
inline void ReorderInfo_FixupInfo::clear_initarray() {
  _impl_.initarray_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_initarray(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return _impl_.initarray_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_initarray() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return &_impl_.initarray_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_initarray(int index) const {
  return _impl_.initarray_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::initarray(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return _internal_initarray(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_initarray() {
  return _impl_.initarray_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_initarray() {
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _add = _internal_add_initarray();
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::initarray() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return _impl_.initarray_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple got = 6;
inline int ReorderInfo_FixupInfo::_internal_got_size() const {
  return _impl_.got_.size();
}
inline int ReorderInfo_FixupInfo::got_size() const {
  return _internal_got_size();
}
inline void ReorderInfo_FixupInfo::clear_got() {
  _impl_.got_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_got(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.got)
  return _impl_.got_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_got() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.got)
  return &_impl_.got_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_got(int index) const {
  return _impl_.got_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::got(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.got)
  return _internal_got(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_got() {
  return _impl_.got_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_got() {
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _add = _internal_add_got();
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.got)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::got() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.got)
  return _impl_.got_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple init = 7;
inline int ReorderInfo_FixupInfo::_internal_init_size() const {
  return _impl_.init_.size();
}
inline int ReorderInfo_FixupInfo::init_size() const {
  return _internal_init_size();
}
inline void ReorderInfo_FixupInfo::clear_init() {
  _impl_.init_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_init(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.init)
  return _impl_.init_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_init() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.init)
  return &_impl_.init_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_init(int index) const {
  return _impl_.init_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::init(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.init)
  return _internal_init(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_init() {
  return _impl_.init_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_init() {
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _add = _internal_add_init();
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.init)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::init() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.init)
  return _impl_.init_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple fini = 8;
inline int ReorderInfo_FixupInfo::_internal_fini_size() const {
  return _impl_.fini_.size();
}
inline int ReorderInfo_FixupInfo::fini_size() const {
  return _internal_fini_size();
}
inline void ReorderInfo_FixupInfo::clear_fini() {
  _impl_.fini_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_fini(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.fini)
  return _impl_.fini_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_fini() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.fini)
  return &_impl_.fini_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_fini(int index) const {
  return _impl_.fini_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::fini(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.fini)
  return _internal_fini(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_fini() {
  return _impl_.fini_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_fini() {
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _add = _internal_add_fini();
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.fini)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::fini() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.fini)
  return _impl_.fini_;
}

// -------------------------------------------------------------------

// ReorderInfo_CCRLimitation

// optional uint64 all_obj = 1;
inline bool ReorderInfo_CCRLimitation::_internal_has_all_obj() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorderInfo_CCRLimitation::has_all_obj() const {
  return _internal_has_all_obj();
}
inline void ReorderInfo_CCRLimitation::clear_all_obj() {
  _impl_.all_obj_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ReorderInfo_CCRLimitation::_internal_all_obj() const {
  return _impl_.all_obj_;
}
inline uint64_t ReorderInfo_CCRLimitation::all_obj() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.CCRLimitation.all_obj)
  return _internal_all_obj();
}
inline void ReorderInfo_CCRLimitation::_internal_set_all_obj(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.all_obj_ = value;
}
inline void ReorderInfo_CCRLimitation::set_all_obj(uint64_t value) {
  _internal_set_all_obj(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.CCRLimitation.all_obj)
}

// optional uint64 hybrid_obj = 2;
inline bool ReorderInfo_CCRLimitation::_internal_has_hybrid_obj() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReorderInfo_CCRLimitation::has_hybrid_obj() const {
  return _internal_has_hybrid_obj();
}
inline void ReorderInfo_CCRLimitation::clear_hybrid_obj() {
  _impl_.hybrid_obj_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ReorderInfo_CCRLimitation::_internal_hybrid_obj() const {
  return _impl_.hybrid_obj_;
}
inline uint64_t ReorderInfo_CCRLimitation::hybrid_obj() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.CCRLimitation.hybrid_obj)
  return _internal_hybrid_obj();
}
inline void ReorderInfo_CCRLimitation::_internal_set_hybrid_obj(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hybrid_obj_ = value;
}
inline void ReorderInfo_CCRLimitation::set_hybrid_obj(uint64_t value) {
  _internal_set_hybrid_obj(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.CCRLimitation.hybrid_obj)
}

// optional uint64 static_got = 3;
inline bool ReorderInfo_CCRLimitation::_internal_has_static_got() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReorderInfo_CCRLimitation::has_static_got() const {
  return _internal_has_static_got();
}
inline void ReorderInfo_CCRLimitation::clear_static_got() {
  _impl_.static_got_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ReorderInfo_CCRLimitation::_internal_static_got() const {
  return _impl_.static_got_;
}
inline uint64_t ReorderInfo_CCRLimitation::static_got() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.CCRLimitation.static_got)
  return _internal_static_got();
}
inline void ReorderInfo_CCRLimitation::_internal_set_static_got(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.static_got_ = value;
}
inline void ReorderInfo_CCRLimitation::set_static_got(uint64_t value) {
  _internal_set_static_got(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.CCRLimitation.static_got)
}

// optional uint64 silicon_errata = 4;
inline bool ReorderInfo_CCRLimitation::_internal_has_silicon_errata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReorderInfo_CCRLimitation::has_silicon_errata() const {
  return _internal_has_silicon_errata();
}
inline void ReorderInfo_CCRLimitation::clear_silicon_errata() {
  _impl_.silicon_errata_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t ReorderInfo_CCRLimitation::_internal_silicon_errata() const {
  return _impl_.silicon_errata_;
}
inline uint64_t ReorderInfo_CCRLimitation::silicon_errata() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.CCRLimitation.silicon_errata)
  return _internal_silicon_errata();
}
inline void ReorderInfo_CCRLimitation::_internal_set_silicon_errata(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.silicon_errata_ = value;
}
inline void ReorderInfo_CCRLimitation::set_silicon_errata(uint64_t value) {
  _internal_set_silicon_errata(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.CCRLimitation.silicon_errata)
}

// optional uint64 tls_opt = 5;
inline bool ReorderInfo_CCRLimitation::_internal_has_tls_opt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReorderInfo_CCRLimitation::has_tls_opt() const {
  return _internal_has_tls_opt();
}
inline void ReorderInfo_CCRLimitation::clear_tls_opt() {
  _impl_.tls_opt_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t ReorderInfo_CCRLimitation::_internal_tls_opt() const {
  return _impl_.tls_opt_;
}
inline uint64_t ReorderInfo_CCRLimitation::tls_opt() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.CCRLimitation.tls_opt)
  return _internal_tls_opt();
}
inline void ReorderInfo_CCRLimitation::_internal_set_tls_opt(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tls_opt_ = value;
}
inline void ReorderInfo_CCRLimitation::set_tls_opt(uint64_t value) {
  _internal_set_tls_opt(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.CCRLimitation.tls_opt)
}

// optional uint64 got_opt = 6;
inline bool ReorderInfo_CCRLimitation::_internal_has_got_opt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReorderInfo_CCRLimitation::has_got_opt() const {
  return _internal_has_got_opt();
}
inline void ReorderInfo_CCRLimitation::clear_got_opt() {
  _impl_.got_opt_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t ReorderInfo_CCRLimitation::_internal_got_opt() const {
  return _impl_.got_opt_;
}
inline uint64_t ReorderInfo_CCRLimitation::got_opt() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.CCRLimitation.got_opt)
  return _internal_got_opt();
}
inline void ReorderInfo_CCRLimitation::_internal_set_got_opt(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.got_opt_ = value;
}
inline void ReorderInfo_CCRLimitation::set_got_opt(uint64_t value) {
  _internal_set_got_opt(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.CCRLimitation.got_opt)
}

// optional uint64 got_target = 7;
inline bool ReorderInfo_CCRLimitation::_internal_has_got_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ReorderInfo_CCRLimitation::has_got_target() const {
  return _internal_has_got_target();
}
inline void ReorderInfo_CCRLimitation::clear_got_target() {
  _impl_.got_target_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t ReorderInfo_CCRLimitation::_internal_got_target() const {
  return _impl_.got_target_;
}
inline uint64_t ReorderInfo_CCRLimitation::got_target() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.CCRLimitation.got_target)
  return _internal_got_target();
}
inline void ReorderInfo_CCRLimitation::_internal_set_got_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.got_target_ = value;
}
inline void ReorderInfo_CCRLimitation::set_got_target(uint64_t value) {
  _internal_set_got_target(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.CCRLimitation.got_target)
}

// optional uint64 tls_got_target = 8;
inline bool ReorderInfo_CCRLimitation::_internal_has_tls_got_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ReorderInfo_CCRLimitation::has_tls_got_target() const {
  return _internal_has_tls_got_target();
}
inline void ReorderInfo_CCRLimitation::clear_tls_got_target() {
  _impl_.tls_got_target_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t ReorderInfo_CCRLimitation::_internal_tls_got_target() const {
  return _impl_.tls_got_target_;
}
inline uint64_t ReorderInfo_CCRLimitation::tls_got_target() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.CCRLimitation.tls_got_target)
  return _internal_tls_got_target();
}
inline void ReorderInfo_CCRLimitation::_internal_set_tls_got_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.tls_got_target_ = value;
}
inline void ReorderInfo_CCRLimitation::set_tls_got_target(uint64_t value) {
  _internal_set_tls_got_target(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.CCRLimitation.tls_got_target)
}

// optional uint64 plt_target = 9;
inline bool ReorderInfo_CCRLimitation::_internal_has_plt_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ReorderInfo_CCRLimitation::has_plt_target() const {
  return _internal_has_plt_target();
}
inline void ReorderInfo_CCRLimitation::clear_plt_target() {
  _impl_.plt_target_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t ReorderInfo_CCRLimitation::_internal_plt_target() const {
  return _impl_.plt_target_;
}
inline uint64_t ReorderInfo_CCRLimitation::plt_target() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.CCRLimitation.plt_target)
  return _internal_plt_target();
}
inline void ReorderInfo_CCRLimitation::_internal_set_plt_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.plt_target_ = value;
}
inline void ReorderInfo_CCRLimitation::set_plt_target(uint64_t value) {
  _internal_set_plt_target(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.CCRLimitation.plt_target)
}

// optional uint64 merged_target = 10;
inline bool ReorderInfo_CCRLimitation::_internal_has_merged_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ReorderInfo_CCRLimitation::has_merged_target() const {
  return _internal_has_merged_target();
}
inline void ReorderInfo_CCRLimitation::clear_merged_target() {
  _impl_.merged_target_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t ReorderInfo_CCRLimitation::_internal_merged_target() const {
  return _impl_.merged_target_;
}
inline uint64_t ReorderInfo_CCRLimitation::merged_target() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.CCRLimitation.merged_target)
  return _internal_merged_target();
}
inline void ReorderInfo_CCRLimitation::_internal_set_merged_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.merged_target_ = value;
}
inline void ReorderInfo_CCRLimitation::set_merged_target(uint64_t value) {
  _internal_set_merged_target(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.CCRLimitation.merged_target)
}

// optional uint64 ifunc_target = 11;
inline bool ReorderInfo_CCRLimitation::_internal_has_ifunc_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ReorderInfo_CCRLimitation::has_ifunc_target() const {
  return _internal_has_ifunc_target();
}
inline void ReorderInfo_CCRLimitation::clear_ifunc_target() {
  _impl_.ifunc_target_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t ReorderInfo_CCRLimitation::_internal_ifunc_target() const {
  return _impl_.ifunc_target_;
}
inline uint64_t ReorderInfo_CCRLimitation::ifunc_target() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.CCRLimitation.ifunc_target)
  return _internal_ifunc_target();
}
inline void ReorderInfo_CCRLimitation::_internal_set_ifunc_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.ifunc_target_ = value;
}
inline void ReorderInfo_CCRLimitation::set_ifunc_target(uint64_t value) {
  _internal_set_ifunc_target(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.CCRLimitation.ifunc_target)
}

// repeated string missrandfile = 12;
inline int ReorderInfo_CCRLimitation::_internal_missrandfile_size() const {
  return _impl_.missrandfile_.size();
}
inline int ReorderInfo_CCRLimitation::missrandfile_size() const {
  return _internal_missrandfile_size();
}
inline void ReorderInfo_CCRLimitation::clear_missrandfile() {
  _impl_.missrandfile_.Clear();
}
inline std::string* ReorderInfo_CCRLimitation::add_missrandfile() {
  std::string* _s = _internal_add_missrandfile();
  // @@protoc_insertion_point(field_add_mutable:ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile)
  return _s;
}
inline const std::string& ReorderInfo_CCRLimitation::_internal_missrandfile(int index) const {
  return _impl_.missrandfile_.Get(index);
}
inline const std::string& ReorderInfo_CCRLimitation::missrandfile(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile)
  return _internal_missrandfile(index);
}
inline std::string* ReorderInfo_CCRLimitation::mutable_missrandfile(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile)
  return _impl_.missrandfile_.Mutable(index);
}
inline void ReorderInfo_CCRLimitation::set_missrandfile(int index, const std::string& value) {
  _impl_.missrandfile_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile)
}
inline void ReorderInfo_CCRLimitation::set_missrandfile(int index, std::string&& value) {
  _impl_.missrandfile_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile)
}
inline void ReorderInfo_CCRLimitation::set_missrandfile(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.missrandfile_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile)
}
inline void ReorderInfo_CCRLimitation::set_missrandfile(int index, const char* value, size_t size) {
  _impl_.missrandfile_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile)
}
inline std::string* ReorderInfo_CCRLimitation::_internal_add_missrandfile() {
  return _impl_.missrandfile_.Add();
}
inline void ReorderInfo_CCRLimitation::add_missrandfile(const std::string& value) {
  _impl_.missrandfile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile)
}
inline void ReorderInfo_CCRLimitation::add_missrandfile(std::string&& value) {
  _impl_.missrandfile_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile)
}
inline void ReorderInfo_CCRLimitation::add_missrandfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.missrandfile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile)
}
inline void ReorderInfo_CCRLimitation::add_missrandfile(const char* value, size_t size) {
  _impl_.missrandfile_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReorderInfo_CCRLimitation::missrandfile() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile)
  return _impl_.missrandfile_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReorderInfo_CCRLimitation::mutable_missrandfile() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.CCRLimitation.missrandfile)
  return &_impl_.missrandfile_;
}

// -------------------------------------------------------------------

// ReorderInfo

// optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
inline bool ReorderInfo::_internal_has_bin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bin_ != nullptr);
  return value;
}
inline bool ReorderInfo::has_bin() const {
  return _internal_has_bin();
}
inline void ReorderInfo::clear_bin() {
  if (_impl_.bin_ != nullptr) _impl_.bin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ShuffleInfo::ReorderInfo_BinaryInfo& ReorderInfo::_internal_bin() const {
  const ::ShuffleInfo::ReorderInfo_BinaryInfo* p = _impl_.bin_;
  return p != nullptr ? *p : reinterpret_cast<const ::ShuffleInfo::ReorderInfo_BinaryInfo&>(
      ::ShuffleInfo::_ReorderInfo_BinaryInfo_default_instance_);
}
inline const ::ShuffleInfo::ReorderInfo_BinaryInfo& ReorderInfo::bin() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.bin)
  return _internal_bin();
}
inline void ReorderInfo::unsafe_arena_set_allocated_bin(
    ::ShuffleInfo::ReorderInfo_BinaryInfo* bin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bin_);
  }
  _impl_.bin_ = bin;
  if (bin) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ShuffleInfo.ReorderInfo.bin)
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::release_bin() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* temp = _impl_.bin_;
  _impl_.bin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::unsafe_arena_release_bin() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.bin)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* temp = _impl_.bin_;
  _impl_.bin_ = nullptr;
  return temp;
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::_internal_mutable_bin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bin_ == nullptr) {
    auto* p = CreateMaybeMessage<::ShuffleInfo::ReorderInfo_BinaryInfo>(GetArenaForAllocation());
    _impl_.bin_ = p;
  }
  return _impl_.bin_;
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::mutable_bin() {
  ::ShuffleInfo::ReorderInfo_BinaryInfo* _msg = _internal_mutable_bin();
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.bin)
  return _msg;
}
inline void ReorderInfo::set_allocated_bin(::ShuffleInfo::ReorderInfo_BinaryInfo* bin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bin_;
  }
  if (bin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bin);
    if (message_arena != submessage_arena) {
      bin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bin_ = bin;
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.bin)
}

// repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
inline int ReorderInfo::_internal_layout_size() const {
  return _impl_.layout_.size();
}
inline int ReorderInfo::layout_size() const {
  return _internal_layout_size();
}
inline void ReorderInfo::clear_layout() {
  _impl_.layout_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_LayoutInfo* ReorderInfo::mutable_layout(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.layout)
  return _impl_.layout_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >*
ReorderInfo::mutable_layout() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.layout)
  return &_impl_.layout_;
}
inline const ::ShuffleInfo::ReorderInfo_LayoutInfo& ReorderInfo::_internal_layout(int index) const {
  return _impl_.layout_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_LayoutInfo& ReorderInfo::layout(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.layout)
  return _internal_layout(index);
}
inline ::ShuffleInfo::ReorderInfo_LayoutInfo* ReorderInfo::_internal_add_layout() {
  return _impl_.layout_.Add();
}
inline ::ShuffleInfo::ReorderInfo_LayoutInfo* ReorderInfo::add_layout() {
  ::ShuffleInfo::ReorderInfo_LayoutInfo* _add = _internal_add_layout();
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.layout)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >&
ReorderInfo::layout() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.layout)
  return _impl_.layout_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
inline int ReorderInfo::_internal_fixup_size() const {
  return _impl_.fixup_.size();
}
inline int ReorderInfo::fixup_size() const {
  return _internal_fixup_size();
}
inline void ReorderInfo::clear_fixup() {
  _impl_.fixup_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo* ReorderInfo::mutable_fixup(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.fixup)
  return _impl_.fixup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >*
ReorderInfo::mutable_fixup() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.fixup)
  return &_impl_.fixup_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo& ReorderInfo::_internal_fixup(int index) const {
  return _impl_.fixup_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo& ReorderInfo::fixup(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.fixup)
  return _internal_fixup(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo* ReorderInfo::_internal_add_fixup() {
  return _impl_.fixup_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo* ReorderInfo::add_fixup() {
  ::ShuffleInfo::ReorderInfo_FixupInfo* _add = _internal_add_fixup();
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.fixup)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >&
ReorderInfo::fixup() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.fixup)
  return _impl_.fixup_;
}

// optional .ShuffleInfo.ReorderInfo.CCRLimitation ccr_limitation = 4;
inline bool ReorderInfo::_internal_has_ccr_limitation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ccr_limitation_ != nullptr);
  return value;
}
inline bool ReorderInfo::has_ccr_limitation() const {
  return _internal_has_ccr_limitation();
}
inline void ReorderInfo::clear_ccr_limitation() {
  if (_impl_.ccr_limitation_ != nullptr) _impl_.ccr_limitation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ShuffleInfo::ReorderInfo_CCRLimitation& ReorderInfo::_internal_ccr_limitation() const {
  const ::ShuffleInfo::ReorderInfo_CCRLimitation* p = _impl_.ccr_limitation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ShuffleInfo::ReorderInfo_CCRLimitation&>(
      ::ShuffleInfo::_ReorderInfo_CCRLimitation_default_instance_);
}
inline const ::ShuffleInfo::ReorderInfo_CCRLimitation& ReorderInfo::ccr_limitation() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.ccr_limitation)
  return _internal_ccr_limitation();
}
inline void ReorderInfo::unsafe_arena_set_allocated_ccr_limitation(
    ::ShuffleInfo::ReorderInfo_CCRLimitation* ccr_limitation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ccr_limitation_);
  }
  _impl_.ccr_limitation_ = ccr_limitation;
  if (ccr_limitation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ShuffleInfo.ReorderInfo.ccr_limitation)
}
inline ::ShuffleInfo::ReorderInfo_CCRLimitation* ReorderInfo::release_ccr_limitation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ShuffleInfo::ReorderInfo_CCRLimitation* temp = _impl_.ccr_limitation_;
  _impl_.ccr_limitation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ShuffleInfo::ReorderInfo_CCRLimitation* ReorderInfo::unsafe_arena_release_ccr_limitation() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.ccr_limitation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ShuffleInfo::ReorderInfo_CCRLimitation* temp = _impl_.ccr_limitation_;
  _impl_.ccr_limitation_ = nullptr;
  return temp;
}
inline ::ShuffleInfo::ReorderInfo_CCRLimitation* ReorderInfo::_internal_mutable_ccr_limitation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.ccr_limitation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ShuffleInfo::ReorderInfo_CCRLimitation>(GetArenaForAllocation());
    _impl_.ccr_limitation_ = p;
  }
  return _impl_.ccr_limitation_;
}
inline ::ShuffleInfo::ReorderInfo_CCRLimitation* ReorderInfo::mutable_ccr_limitation() {
  ::ShuffleInfo::ReorderInfo_CCRLimitation* _msg = _internal_mutable_ccr_limitation();
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.ccr_limitation)
  return _msg;
}
inline void ReorderInfo::set_allocated_ccr_limitation(::ShuffleInfo::ReorderInfo_CCRLimitation* ccr_limitation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ccr_limitation_;
  }
  if (ccr_limitation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ccr_limitation);
    if (message_arena != submessage_arena) {
      ccr_limitation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ccr_limitation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ccr_limitation_ = ccr_limitation;
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.ccr_limitation)
}

// -------------------------------------------------------------------

// Metadata_InstInfo

// required uint32 offset = 1;
inline bool Metadata_InstInfo::_internal_has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Metadata_InstInfo::has_offset() const {
  return _internal_has_offset();
}
inline void Metadata_InstInfo::clear_offset() {
  _impl_.offset_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Metadata_InstInfo::_internal_offset() const {
  return _impl_.offset_;
}
inline uint32_t Metadata_InstInfo::offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.InstInfo.offset)
  return _internal_offset();
}
inline void Metadata_InstInfo::_internal_set_offset(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.offset_ = value;
}
inline void Metadata_InstInfo::set_offset(uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.InstInfo.offset)
}

// required uint32 size = 2;
inline bool Metadata_InstInfo::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Metadata_InstInfo::has_size() const {
  return _internal_has_size();
}
inline void Metadata_InstInfo::clear_size() {
  _impl_.size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Metadata_InstInfo::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t Metadata_InstInfo::size() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.InstInfo.size)
  return _internal_size();
}
inline void Metadata_InstInfo::_internal_set_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.size_ = value;
}
inline void Metadata_InstInfo::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.InstInfo.size)
}

// -------------------------------------------------------------------

// Metadata_FunInfo

// required uint32 section = 1;
inline bool Metadata_FunInfo::_internal_has_section() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Metadata_FunInfo::has_section() const {
  return _internal_has_section();
}
inline void Metadata_FunInfo::clear_section() {
  _impl_.section_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Metadata_FunInfo::_internal_section() const {
  return _impl_.section_;
}
inline uint32_t Metadata_FunInfo::section() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FunInfo.section)
  return _internal_section();
}
inline void Metadata_FunInfo::_internal_set_section(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.section_ = value;
}
inline void Metadata_FunInfo::set_section(uint32_t value) {
  _internal_set_section(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.FunInfo.section)
}

// required uint32 offset = 2;
inline bool Metadata_FunInfo::_internal_has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Metadata_FunInfo::has_offset() const {
  return _internal_has_offset();
}
inline void Metadata_FunInfo::clear_offset() {
  _impl_.offset_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Metadata_FunInfo::_internal_offset() const {
  return _impl_.offset_;
}
inline uint32_t Metadata_FunInfo::offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FunInfo.offset)
  return _internal_offset();
}
inline void Metadata_FunInfo::_internal_set_offset(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.offset_ = value;
}
inline void Metadata_FunInfo::set_offset(uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.FunInfo.offset)
}

// repeated .ShuffleInfo.Metadata.InstInfo insts = 3;
inline int Metadata_FunInfo::_internal_insts_size() const {
  return _impl_.insts_.size();
}
inline int Metadata_FunInfo::insts_size() const {
  return _internal_insts_size();
}
inline void Metadata_FunInfo::clear_insts() {
  _impl_.insts_.Clear();
}
inline ::ShuffleInfo::Metadata_InstInfo* Metadata_FunInfo::mutable_insts(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.Metadata.FunInfo.insts)
  return _impl_.insts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_InstInfo >*
Metadata_FunInfo::mutable_insts() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.Metadata.FunInfo.insts)
  return &_impl_.insts_;
}
inline const ::ShuffleInfo::Metadata_InstInfo& Metadata_FunInfo::_internal_insts(int index) const {
  return _impl_.insts_.Get(index);
}
inline const ::ShuffleInfo::Metadata_InstInfo& Metadata_FunInfo::insts(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FunInfo.insts)
  return _internal_insts(index);
}
inline ::ShuffleInfo::Metadata_InstInfo* Metadata_FunInfo::_internal_add_insts() {
  return _impl_.insts_.Add();
}
inline ::ShuffleInfo::Metadata_InstInfo* Metadata_FunInfo::add_insts() {
  ::ShuffleInfo::Metadata_InstInfo* _add = _internal_add_insts();
  // @@protoc_insertion_point(field_add:ShuffleInfo.Metadata.FunInfo.insts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_InstInfo >&
Metadata_FunInfo::insts() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.Metadata.FunInfo.insts)
  return _impl_.insts_;
}

// optional string info = 4;
inline bool Metadata_FunInfo::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Metadata_FunInfo::has_info() const {
  return _internal_has_info();
}
inline void Metadata_FunInfo::clear_info() {
  _impl_.info_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Metadata_FunInfo::info() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FunInfo.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata_FunInfo::set_info(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.FunInfo.info)
}
inline std::string* Metadata_FunInfo::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.Metadata.FunInfo.info)
  return _s;
}
inline const std::string& Metadata_FunInfo::_internal_info() const {
  return _impl_.info_.Get();
}
inline void Metadata_FunInfo::_internal_set_info(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata_FunInfo::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata_FunInfo::release_info() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.Metadata.FunInfo.info)
  if (!_internal_has_info()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.info_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Metadata_FunInfo::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.Metadata.FunInfo.info)
}

// -------------------------------------------------------------------

// Metadata_FixupInfo

// required uint64 offset = 1;
inline bool Metadata_FixupInfo::_internal_has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Metadata_FixupInfo::has_offset() const {
  return _internal_has_offset();
}
inline void Metadata_FixupInfo::clear_offset() {
  _impl_.offset_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t Metadata_FixupInfo::_internal_offset() const {
  return _impl_.offset_;
}
inline uint64_t Metadata_FixupInfo::offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FixupInfo.offset)
  return _internal_offset();
}
inline void Metadata_FixupInfo::_internal_set_offset(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.offset_ = value;
}
inline void Metadata_FixupInfo::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.FixupInfo.offset)
}

// required uint32 section = 2;
inline bool Metadata_FixupInfo::_internal_has_section() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Metadata_FixupInfo::has_section() const {
  return _internal_has_section();
}
inline void Metadata_FixupInfo::clear_section() {
  _impl_.section_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Metadata_FixupInfo::_internal_section() const {
  return _impl_.section_;
}
inline uint32_t Metadata_FixupInfo::section() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FixupInfo.section)
  return _internal_section();
}
inline void Metadata_FixupInfo::_internal_set_section(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.section_ = value;
}
inline void Metadata_FixupInfo::set_section(uint32_t value) {
  _internal_set_section(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.FixupInfo.section)
}

// required uint32 type = 3;
inline bool Metadata_FixupInfo::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Metadata_FixupInfo::has_type() const {
  return _internal_has_type();
}
inline void Metadata_FixupInfo::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Metadata_FixupInfo::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Metadata_FixupInfo::type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FixupInfo.type)
  return _internal_type();
}
inline void Metadata_FixupInfo::_internal_set_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}
inline void Metadata_FixupInfo::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.FixupInfo.type)
}

// required uint64 base_bbl_sym = 4;
inline bool Metadata_FixupInfo::_internal_has_base_bbl_sym() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Metadata_FixupInfo::has_base_bbl_sym() const {
  return _internal_has_base_bbl_sym();
}
inline void Metadata_FixupInfo::clear_base_bbl_sym() {
  _impl_.base_bbl_sym_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t Metadata_FixupInfo::_internal_base_bbl_sym() const {
  return _impl_.base_bbl_sym_;
}
inline uint64_t Metadata_FixupInfo::base_bbl_sym() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FixupInfo.base_bbl_sym)
  return _internal_base_bbl_sym();
}
inline void Metadata_FixupInfo::_internal_set_base_bbl_sym(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.base_bbl_sym_ = value;
}
inline void Metadata_FixupInfo::set_base_bbl_sym(uint64_t value) {
  _internal_set_base_bbl_sym(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.FixupInfo.base_bbl_sym)
}

// required uint32 base_section = 5;
inline bool Metadata_FixupInfo::_internal_has_base_section() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Metadata_FixupInfo::has_base_section() const {
  return _internal_has_base_section();
}
inline void Metadata_FixupInfo::clear_base_section() {
  _impl_.base_section_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t Metadata_FixupInfo::_internal_base_section() const {
  return _impl_.base_section_;
}
inline uint32_t Metadata_FixupInfo::base_section() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FixupInfo.base_section)
  return _internal_base_section();
}
inline void Metadata_FixupInfo::_internal_set_base_section(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.base_section_ = value;
}
inline void Metadata_FixupInfo::set_base_section(uint32_t value) {
  _internal_set_base_section(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.FixupInfo.base_section)
}

// required uint64 target_bbl_sym = 6;
inline bool Metadata_FixupInfo::_internal_has_target_bbl_sym() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Metadata_FixupInfo::has_target_bbl_sym() const {
  return _internal_has_target_bbl_sym();
}
inline void Metadata_FixupInfo::clear_target_bbl_sym() {
  _impl_.target_bbl_sym_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t Metadata_FixupInfo::_internal_target_bbl_sym() const {
  return _impl_.target_bbl_sym_;
}
inline uint64_t Metadata_FixupInfo::target_bbl_sym() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FixupInfo.target_bbl_sym)
  return _internal_target_bbl_sym();
}
inline void Metadata_FixupInfo::_internal_set_target_bbl_sym(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.target_bbl_sym_ = value;
}
inline void Metadata_FixupInfo::set_target_bbl_sym(uint64_t value) {
  _internal_set_target_bbl_sym(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.FixupInfo.target_bbl_sym)
}

// required uint32 target_section = 7;
inline bool Metadata_FixupInfo::_internal_has_target_section() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Metadata_FixupInfo::has_target_section() const {
  return _internal_has_target_section();
}
inline void Metadata_FixupInfo::clear_target_section() {
  _impl_.target_section_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t Metadata_FixupInfo::_internal_target_section() const {
  return _impl_.target_section_;
}
inline uint32_t Metadata_FixupInfo::target_section() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FixupInfo.target_section)
  return _internal_target_section();
}
inline void Metadata_FixupInfo::_internal_set_target_section(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.target_section_ = value;
}
inline void Metadata_FixupInfo::set_target_section(uint32_t value) {
  _internal_set_target_section(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.FixupInfo.target_section)
}

// optional int64 add = 8;
inline bool Metadata_FixupInfo::_internal_has_add() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Metadata_FixupInfo::has_add() const {
  return _internal_has_add();
}
inline void Metadata_FixupInfo::clear_add() {
  _impl_.add_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t Metadata_FixupInfo::_internal_add() const {
  return _impl_.add_;
}
inline int64_t Metadata_FixupInfo::add() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FixupInfo.add)
  return _internal_add();
}
inline void Metadata_FixupInfo::_internal_set_add(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.add_ = value;
}
inline void Metadata_FixupInfo::set_add(int64_t value) {
  _internal_set_add(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.FixupInfo.add)
}

// optional uint32 step = 9;
inline bool Metadata_FixupInfo::_internal_has_step() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Metadata_FixupInfo::has_step() const {
  return _internal_has_step();
}
inline void Metadata_FixupInfo::clear_step() {
  _impl_.step_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t Metadata_FixupInfo::_internal_step() const {
  return _impl_.step_;
}
inline uint32_t Metadata_FixupInfo::step() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FixupInfo.step)
  return _internal_step();
}
inline void Metadata_FixupInfo::_internal_set_step(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.step_ = value;
}
inline void Metadata_FixupInfo::set_step(uint32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.FixupInfo.step)
}

// optional string info = 10;
inline bool Metadata_FixupInfo::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Metadata_FixupInfo::has_info() const {
  return _internal_has_info();
}
inline void Metadata_FixupInfo::clear_info() {
  _impl_.info_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Metadata_FixupInfo::info() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.FixupInfo.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata_FixupInfo::set_info(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.FixupInfo.info)
}
inline std::string* Metadata_FixupInfo::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.Metadata.FixupInfo.info)
  return _s;
}
inline const std::string& Metadata_FixupInfo::_internal_info() const {
  return _impl_.info_.Get();
}
inline void Metadata_FixupInfo::_internal_set_info(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata_FixupInfo::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata_FixupInfo::release_info() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.Metadata.FixupInfo.info)
  if (!_internal_has_info()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.info_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Metadata_FixupInfo::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.Metadata.FixupInfo.info)
}

// -------------------------------------------------------------------

// Metadata_GoldInfo

// optional uint64 all_obj = 1;
inline bool Metadata_GoldInfo::_internal_has_all_obj() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Metadata_GoldInfo::has_all_obj() const {
  return _internal_has_all_obj();
}
inline void Metadata_GoldInfo::clear_all_obj() {
  _impl_.all_obj_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t Metadata_GoldInfo::_internal_all_obj() const {
  return _impl_.all_obj_;
}
inline uint64_t Metadata_GoldInfo::all_obj() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.GoldInfo.all_obj)
  return _internal_all_obj();
}
inline void Metadata_GoldInfo::_internal_set_all_obj(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.all_obj_ = value;
}
inline void Metadata_GoldInfo::set_all_obj(uint64_t value) {
  _internal_set_all_obj(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.all_obj)
}

// optional uint64 norand_obj = 2;
inline bool Metadata_GoldInfo::_internal_has_norand_obj() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Metadata_GoldInfo::has_norand_obj() const {
  return _internal_has_norand_obj();
}
inline void Metadata_GoldInfo::clear_norand_obj() {
  _impl_.norand_obj_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t Metadata_GoldInfo::_internal_norand_obj() const {
  return _impl_.norand_obj_;
}
inline uint64_t Metadata_GoldInfo::norand_obj() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.GoldInfo.norand_obj)
  return _internal_norand_obj();
}
inline void Metadata_GoldInfo::_internal_set_norand_obj(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.norand_obj_ = value;
}
inline void Metadata_GoldInfo::set_norand_obj(uint64_t value) {
  _internal_set_norand_obj(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.norand_obj)
}

// optional uint64 static_got = 3;
inline bool Metadata_GoldInfo::_internal_has_static_got() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Metadata_GoldInfo::has_static_got() const {
  return _internal_has_static_got();
}
inline void Metadata_GoldInfo::clear_static_got() {
  _impl_.static_got_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t Metadata_GoldInfo::_internal_static_got() const {
  return _impl_.static_got_;
}
inline uint64_t Metadata_GoldInfo::static_got() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.GoldInfo.static_got)
  return _internal_static_got();
}
inline void Metadata_GoldInfo::_internal_set_static_got(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.static_got_ = value;
}
inline void Metadata_GoldInfo::set_static_got(uint64_t value) {
  _internal_set_static_got(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.static_got)
}

// optional uint64 silicon_errata = 4;
inline bool Metadata_GoldInfo::_internal_has_silicon_errata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Metadata_GoldInfo::has_silicon_errata() const {
  return _internal_has_silicon_errata();
}
inline void Metadata_GoldInfo::clear_silicon_errata() {
  _impl_.silicon_errata_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t Metadata_GoldInfo::_internal_silicon_errata() const {
  return _impl_.silicon_errata_;
}
inline uint64_t Metadata_GoldInfo::silicon_errata() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.GoldInfo.silicon_errata)
  return _internal_silicon_errata();
}
inline void Metadata_GoldInfo::_internal_set_silicon_errata(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.silicon_errata_ = value;
}
inline void Metadata_GoldInfo::set_silicon_errata(uint64_t value) {
  _internal_set_silicon_errata(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.silicon_errata)
}

// optional uint64 tls_opt = 5;
inline bool Metadata_GoldInfo::_internal_has_tls_opt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Metadata_GoldInfo::has_tls_opt() const {
  return _internal_has_tls_opt();
}
inline void Metadata_GoldInfo::clear_tls_opt() {
  _impl_.tls_opt_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t Metadata_GoldInfo::_internal_tls_opt() const {
  return _impl_.tls_opt_;
}
inline uint64_t Metadata_GoldInfo::tls_opt() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.GoldInfo.tls_opt)
  return _internal_tls_opt();
}
inline void Metadata_GoldInfo::_internal_set_tls_opt(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tls_opt_ = value;
}
inline void Metadata_GoldInfo::set_tls_opt(uint64_t value) {
  _internal_set_tls_opt(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.tls_opt)
}

// optional uint64 got_opt = 6;
inline bool Metadata_GoldInfo::_internal_has_got_opt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Metadata_GoldInfo::has_got_opt() const {
  return _internal_has_got_opt();
}
inline void Metadata_GoldInfo::clear_got_opt() {
  _impl_.got_opt_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t Metadata_GoldInfo::_internal_got_opt() const {
  return _impl_.got_opt_;
}
inline uint64_t Metadata_GoldInfo::got_opt() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.GoldInfo.got_opt)
  return _internal_got_opt();
}
inline void Metadata_GoldInfo::_internal_set_got_opt(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.got_opt_ = value;
}
inline void Metadata_GoldInfo::set_got_opt(uint64_t value) {
  _internal_set_got_opt(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.got_opt)
}

// optional uint64 got_target = 7;
inline bool Metadata_GoldInfo::_internal_has_got_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Metadata_GoldInfo::has_got_target() const {
  return _internal_has_got_target();
}
inline void Metadata_GoldInfo::clear_got_target() {
  _impl_.got_target_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t Metadata_GoldInfo::_internal_got_target() const {
  return _impl_.got_target_;
}
inline uint64_t Metadata_GoldInfo::got_target() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.GoldInfo.got_target)
  return _internal_got_target();
}
inline void Metadata_GoldInfo::_internal_set_got_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.got_target_ = value;
}
inline void Metadata_GoldInfo::set_got_target(uint64_t value) {
  _internal_set_got_target(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.got_target)
}

// optional uint64 tls_got_target = 8;
inline bool Metadata_GoldInfo::_internal_has_tls_got_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Metadata_GoldInfo::has_tls_got_target() const {
  return _internal_has_tls_got_target();
}
inline void Metadata_GoldInfo::clear_tls_got_target() {
  _impl_.tls_got_target_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t Metadata_GoldInfo::_internal_tls_got_target() const {
  return _impl_.tls_got_target_;
}
inline uint64_t Metadata_GoldInfo::tls_got_target() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.GoldInfo.tls_got_target)
  return _internal_tls_got_target();
}
inline void Metadata_GoldInfo::_internal_set_tls_got_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.tls_got_target_ = value;
}
inline void Metadata_GoldInfo::set_tls_got_target(uint64_t value) {
  _internal_set_tls_got_target(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.tls_got_target)
}

// optional uint64 plt_target = 9;
inline bool Metadata_GoldInfo::_internal_has_plt_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Metadata_GoldInfo::has_plt_target() const {
  return _internal_has_plt_target();
}
inline void Metadata_GoldInfo::clear_plt_target() {
  _impl_.plt_target_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t Metadata_GoldInfo::_internal_plt_target() const {
  return _impl_.plt_target_;
}
inline uint64_t Metadata_GoldInfo::plt_target() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.GoldInfo.plt_target)
  return _internal_plt_target();
}
inline void Metadata_GoldInfo::_internal_set_plt_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.plt_target_ = value;
}
inline void Metadata_GoldInfo::set_plt_target(uint64_t value) {
  _internal_set_plt_target(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.plt_target)
}

// optional uint64 merged_target = 10;
inline bool Metadata_GoldInfo::_internal_has_merged_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Metadata_GoldInfo::has_merged_target() const {
  return _internal_has_merged_target();
}
inline void Metadata_GoldInfo::clear_merged_target() {
  _impl_.merged_target_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t Metadata_GoldInfo::_internal_merged_target() const {
  return _impl_.merged_target_;
}
inline uint64_t Metadata_GoldInfo::merged_target() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.GoldInfo.merged_target)
  return _internal_merged_target();
}
inline void Metadata_GoldInfo::_internal_set_merged_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.merged_target_ = value;
}
inline void Metadata_GoldInfo::set_merged_target(uint64_t value) {
  _internal_set_merged_target(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.merged_target)
}

// optional uint64 ifunc_target = 11;
inline bool Metadata_GoldInfo::_internal_has_ifunc_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Metadata_GoldInfo::has_ifunc_target() const {
  return _internal_has_ifunc_target();
}
inline void Metadata_GoldInfo::clear_ifunc_target() {
  _impl_.ifunc_target_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t Metadata_GoldInfo::_internal_ifunc_target() const {
  return _impl_.ifunc_target_;
}
inline uint64_t Metadata_GoldInfo::ifunc_target() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.GoldInfo.ifunc_target)
  return _internal_ifunc_target();
}
inline void Metadata_GoldInfo::_internal_set_ifunc_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.ifunc_target_ = value;
}
inline void Metadata_GoldInfo::set_ifunc_target(uint64_t value) {
  _internal_set_ifunc_target(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.ifunc_target)
}

// repeated string missrandfile = 12;
inline int Metadata_GoldInfo::_internal_missrandfile_size() const {
  return _impl_.missrandfile_.size();
}
inline int Metadata_GoldInfo::missrandfile_size() const {
  return _internal_missrandfile_size();
}
inline void Metadata_GoldInfo::clear_missrandfile() {
  _impl_.missrandfile_.Clear();
}
inline std::string* Metadata_GoldInfo::add_missrandfile() {
  std::string* _s = _internal_add_missrandfile();
  // @@protoc_insertion_point(field_add_mutable:ShuffleInfo.Metadata.GoldInfo.missrandfile)
  return _s;
}
inline const std::string& Metadata_GoldInfo::_internal_missrandfile(int index) const {
  return _impl_.missrandfile_.Get(index);
}
inline const std::string& Metadata_GoldInfo::missrandfile(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.GoldInfo.missrandfile)
  return _internal_missrandfile(index);
}
inline std::string* Metadata_GoldInfo::mutable_missrandfile(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.Metadata.GoldInfo.missrandfile)
  return _impl_.missrandfile_.Mutable(index);
}
inline void Metadata_GoldInfo::set_missrandfile(int index, const std::string& value) {
  _impl_.missrandfile_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.missrandfile)
}
inline void Metadata_GoldInfo::set_missrandfile(int index, std::string&& value) {
  _impl_.missrandfile_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.missrandfile)
}
inline void Metadata_GoldInfo::set_missrandfile(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.missrandfile_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.Metadata.GoldInfo.missrandfile)
}
inline void Metadata_GoldInfo::set_missrandfile(int index, const char* value, size_t size) {
  _impl_.missrandfile_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.Metadata.GoldInfo.missrandfile)
}
inline std::string* Metadata_GoldInfo::_internal_add_missrandfile() {
  return _impl_.missrandfile_.Add();
}
inline void Metadata_GoldInfo::add_missrandfile(const std::string& value) {
  _impl_.missrandfile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ShuffleInfo.Metadata.GoldInfo.missrandfile)
}
inline void Metadata_GoldInfo::add_missrandfile(std::string&& value) {
  _impl_.missrandfile_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ShuffleInfo.Metadata.GoldInfo.missrandfile)
}
inline void Metadata_GoldInfo::add_missrandfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.missrandfile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ShuffleInfo.Metadata.GoldInfo.missrandfile)
}
inline void Metadata_GoldInfo::add_missrandfile(const char* value, size_t size) {
  _impl_.missrandfile_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ShuffleInfo.Metadata.GoldInfo.missrandfile)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Metadata_GoldInfo::missrandfile() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.Metadata.GoldInfo.missrandfile)
  return _impl_.missrandfile_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Metadata_GoldInfo::mutable_missrandfile() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.Metadata.GoldInfo.missrandfile)
  return &_impl_.missrandfile_;
}

// optional uint64 c_fun = 13;
inline bool Metadata_GoldInfo::_internal_has_c_fun() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Metadata_GoldInfo::has_c_fun() const {
  return _internal_has_c_fun();
}
inline void Metadata_GoldInfo::clear_c_fun() {
  _impl_.c_fun_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t Metadata_GoldInfo::_internal_c_fun() const {
  return _impl_.c_fun_;
}
inline uint64_t Metadata_GoldInfo::c_fun() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.GoldInfo.c_fun)
  return _internal_c_fun();
}
inline void Metadata_GoldInfo::_internal_set_c_fun(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.c_fun_ = value;
}
inline void Metadata_GoldInfo::set_c_fun(uint64_t value) {
  _internal_set_c_fun(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.Metadata.GoldInfo.c_fun)
}

// -------------------------------------------------------------------

// Metadata

// repeated .ShuffleInfo.Metadata.FunInfo funs = 1;
inline int Metadata::_internal_funs_size() const {
  return _impl_.funs_.size();
}
inline int Metadata::funs_size() const {
  return _internal_funs_size();
}
inline void Metadata::clear_funs() {
  _impl_.funs_.Clear();
}
inline ::ShuffleInfo::Metadata_FunInfo* Metadata::mutable_funs(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.Metadata.funs)
  return _impl_.funs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FunInfo >*
Metadata::mutable_funs() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.Metadata.funs)
  return &_impl_.funs_;
}
inline const ::ShuffleInfo::Metadata_FunInfo& Metadata::_internal_funs(int index) const {
  return _impl_.funs_.Get(index);
}
inline const ::ShuffleInfo::Metadata_FunInfo& Metadata::funs(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.funs)
  return _internal_funs(index);
}
inline ::ShuffleInfo::Metadata_FunInfo* Metadata::_internal_add_funs() {
  return _impl_.funs_.Add();
}
inline ::ShuffleInfo::Metadata_FunInfo* Metadata::add_funs() {
  ::ShuffleInfo::Metadata_FunInfo* _add = _internal_add_funs();
  // @@protoc_insertion_point(field_add:ShuffleInfo.Metadata.funs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FunInfo >&
Metadata::funs() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.Metadata.funs)
  return _impl_.funs_;
}

// repeated .ShuffleInfo.Metadata.FixupInfo fixups = 2;
inline int Metadata::_internal_fixups_size() const {
  return _impl_.fixups_.size();
}
inline int Metadata::fixups_size() const {
  return _internal_fixups_size();
}
inline void Metadata::clear_fixups() {
  _impl_.fixups_.Clear();
}
inline ::ShuffleInfo::Metadata_FixupInfo* Metadata::mutable_fixups(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.Metadata.fixups)
  return _impl_.fixups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FixupInfo >*
Metadata::mutable_fixups() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.Metadata.fixups)
  return &_impl_.fixups_;
}
inline const ::ShuffleInfo::Metadata_FixupInfo& Metadata::_internal_fixups(int index) const {
  return _impl_.fixups_.Get(index);
}
inline const ::ShuffleInfo::Metadata_FixupInfo& Metadata::fixups(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.fixups)
  return _internal_fixups(index);
}
inline ::ShuffleInfo::Metadata_FixupInfo* Metadata::_internal_add_fixups() {
  return _impl_.fixups_.Add();
}
inline ::ShuffleInfo::Metadata_FixupInfo* Metadata::add_fixups() {
  ::ShuffleInfo::Metadata_FixupInfo* _add = _internal_add_fixups();
  // @@protoc_insertion_point(field_add:ShuffleInfo.Metadata.fixups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FixupInfo >&
Metadata::fixups() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.Metadata.fixups)
  return _impl_.fixups_;
}

// repeated .ShuffleInfo.Metadata.FixupInfo otherfixups = 3;
inline int Metadata::_internal_otherfixups_size() const {
  return _impl_.otherfixups_.size();
}
inline int Metadata::otherfixups_size() const {
  return _internal_otherfixups_size();
}
inline void Metadata::clear_otherfixups() {
  _impl_.otherfixups_.Clear();
}
inline ::ShuffleInfo::Metadata_FixupInfo* Metadata::mutable_otherfixups(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.Metadata.otherfixups)
  return _impl_.otherfixups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FixupInfo >*
Metadata::mutable_otherfixups() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.Metadata.otherfixups)
  return &_impl_.otherfixups_;
}
inline const ::ShuffleInfo::Metadata_FixupInfo& Metadata::_internal_otherfixups(int index) const {
  return _impl_.otherfixups_.Get(index);
}
inline const ::ShuffleInfo::Metadata_FixupInfo& Metadata::otherfixups(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.otherfixups)
  return _internal_otherfixups(index);
}
inline ::ShuffleInfo::Metadata_FixupInfo* Metadata::_internal_add_otherfixups() {
  return _impl_.otherfixups_.Add();
}
inline ::ShuffleInfo::Metadata_FixupInfo* Metadata::add_otherfixups() {
  ::ShuffleInfo::Metadata_FixupInfo* _add = _internal_add_otherfixups();
  // @@protoc_insertion_point(field_add:ShuffleInfo.Metadata.otherfixups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::Metadata_FixupInfo >&
Metadata::otherfixups() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.Metadata.otherfixups)
  return _impl_.otherfixups_;
}

// optional .ShuffleInfo.Metadata.GoldInfo goldinfo = 4;
inline bool Metadata::_internal_has_goldinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.goldinfo_ != nullptr);
  return value;
}
inline bool Metadata::has_goldinfo() const {
  return _internal_has_goldinfo();
}
inline void Metadata::clear_goldinfo() {
  if (_impl_.goldinfo_ != nullptr) _impl_.goldinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ShuffleInfo::Metadata_GoldInfo& Metadata::_internal_goldinfo() const {
  const ::ShuffleInfo::Metadata_GoldInfo* p = _impl_.goldinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ShuffleInfo::Metadata_GoldInfo&>(
      ::ShuffleInfo::_Metadata_GoldInfo_default_instance_);
}
inline const ::ShuffleInfo::Metadata_GoldInfo& Metadata::goldinfo() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.Metadata.goldinfo)
  return _internal_goldinfo();
}
inline void Metadata::unsafe_arena_set_allocated_goldinfo(
    ::ShuffleInfo::Metadata_GoldInfo* goldinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.goldinfo_);
  }
  _impl_.goldinfo_ = goldinfo;
  if (goldinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ShuffleInfo.Metadata.goldinfo)
}
inline ::ShuffleInfo::Metadata_GoldInfo* Metadata::release_goldinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ShuffleInfo::Metadata_GoldInfo* temp = _impl_.goldinfo_;
  _impl_.goldinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ShuffleInfo::Metadata_GoldInfo* Metadata::unsafe_arena_release_goldinfo() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.Metadata.goldinfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ShuffleInfo::Metadata_GoldInfo* temp = _impl_.goldinfo_;
  _impl_.goldinfo_ = nullptr;
  return temp;
}
inline ::ShuffleInfo::Metadata_GoldInfo* Metadata::_internal_mutable_goldinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.goldinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ShuffleInfo::Metadata_GoldInfo>(GetArenaForAllocation());
    _impl_.goldinfo_ = p;
  }
  return _impl_.goldinfo_;
}
inline ::ShuffleInfo::Metadata_GoldInfo* Metadata::mutable_goldinfo() {
  ::ShuffleInfo::Metadata_GoldInfo* _msg = _internal_mutable_goldinfo();
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.Metadata.goldinfo)
  return _msg;
}
inline void Metadata::set_allocated_goldinfo(::ShuffleInfo::Metadata_GoldInfo* goldinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.goldinfo_;
  }
  if (goldinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(goldinfo);
    if (message_arena != submessage_arena) {
      goldinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goldinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.goldinfo_ = goldinfo;
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.Metadata.goldinfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ShuffleInfo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shuffleInfo_2eproto
